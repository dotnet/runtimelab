parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osSubgroup: ''
  platform: ''
  runtimeVariant: ''
  uploadTests: false
  testFilter: tree nativeaot
  runSingleFileTests: true
  isOfficialBuild: false
  librariesConfiguration: Debug

steps:
- ${{ if and(ne(parameters.archType, 'arm'), ne(parameters.archType, 'arm64')) }}:

  # For NativeAOT-LLVM, we have just built the Wasm-targeting native artifacts (the runtime and libraries).
  # Now we need to build the cross-targeting compilers, RyuJit and ILC. Likewise with packages.

  - ${{ if eq(parameters.archType, 'wasm') }}:
    - script: $(Build.SourcesDirectory)/build$(scriptExt) clr.wasmjit+clr.aot -c $(buildConfigUpper) $(_officialBuildParameter) -ci
      displayName: Build the ILC and RyuJit cross-compilers

    - ${{ if and(eq(parameters.isOfficialBuild, true), eq(parameters.platform, 'browser_wasm_win')) }}:
      - script: $(Build.SourcesDirectory)/build$(scriptExt) libs+nativeaot.packages -c $(buildConfigUpper) $(_officialBuildParameter) -ci
        displayName: Build host packages

  # Build coreclr native test output
  - ${{ if eq(parameters.platform, 'browser_wasm_win') }}:
    - script: |
        call $(Build.SourcesDirectory)\wasm-tools\emsdk\emsdk_env
        $(Build.SourcesDirectory)/src/tests/build$(scriptExt) nativeaot $(buildConfigUpper) ${{ parameters.archType }} tree nativeaot
      displayName: Build WebAssembly tests
  - ${{ elseif eq(parameters.platform, 'wasi_wasm_win') }}:
    - script: |
        call $(Build.SourcesDirectory)\wasm-tools\emsdk\emsdk_env
        $(Build.SourcesDirectory)/src/tests/build$(scriptExt) nativeaot $(buildConfigUpper) ${{ parameters.archType }} wasi tree nativeaot
      displayName: Build WebAssembly tests

  - ${{ elseif eq(parameters.osGroup, 'windows') }}:
    - ${{ if ne(parameters.isOfficialBuild, true) }}:
      - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) nativeaot $(buildConfigUpper) ${{ parameters.archType }} ${{ parameters.testFilter }} /p:NativeAotMultimodule=true /p:LibrariesConfiguration=${{ parameters.librariesConfiguration }}
        displayName: Build tests
  - ${{ else }}:
    - script: $(Build.SourcesDirectory)/src/tests/build$(scriptExt) nativeaot $(buildConfigUpper) ${{ parameters.archType }} 'tree nativeaot' /p:LibrariesConfiguration=${{ parameters.librariesConfiguration }}
      displayName: Build tests

  - ${{ if eq(parameters.runSingleFileTests, true) }}:
    - ${{ if in(parameters.platform, 'browser_wasm_win', 'wasi_wasm_win') }}:
      - script: |
          call $(Build.SourcesDirectory)\wasm-tools\emsdk\emsdk_env
          $(Build.SourcesDirectory)/src/tests/run$(scriptExt) runnativeaottests $(buildConfigUpper) ${{ parameters.archType }} ${{ parameters.osGroup }}
        displayName: Run WebAssembly tests in single file mode
    - ${{ elseif eq(parameters.osGroup, 'windows') }}:
      - script: $(Build.SourcesDirectory)/src/tests/run$(scriptExt) runnativeaottests $(buildConfigUpper) ${{ parameters.archType }}
        displayName: Run tests in single file mode
    - ${{ else }}:
      - script: $(Build.SourcesDirectory)/src/tests/run$(scriptExt) --runnativeaottests $(buildConfigUpper) ${{ parameters.archType }}
        displayName: Run tests in single file mode

  - ${{ if and(ne(parameters.isOfficialBuild, true), eq(parameters.archType, 'wasm')) }}:
    # We disable warn-as-error due to missing symbols warnings from emcc.
    - script: |
          call $(Build.SourcesDirectory)\wasm-tools\emsdk\emsdk_env
          $(Build.SourcesDirectory)/build$(scriptExt) libs.tests -test -warnAsError 0 -a ${{ parameters.archType }} -os ${{ parameters.osGroup }} -lc ${{ parameters.librariesConfiguration }} -rc $(buildConfigUpper) /p:TestNativeAot=true /p:RunSmokeTestsOnly=true
      displayName: Build and run WebAssembly libraries tests

# Upload unsigned artifacts
- ${{ if eq(parameters.uploadIntermediateArtifacts, true) }}:
  - template: /eng/pipelines/common/upload-intermediate-artifacts-step.yml
    parameters:
      name: ${{ parameters.platform }}${{ parameters.nameSuffix }}
