//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SwiftInterface.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
// [System.CLSCompliant(false)]
public partial class SwiftInterfaceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, Binary_literal=113, 
		Octal_literal=114, Decimal_literal=115, Pure_decimal_digits=116, Hexadecimal_literal=117, 
		Static_string_literal=118, Identifier=119, Implicit_parameter_name=120, 
		WS=121, OpPlus=122, OpMinus=123, OpAssign=124, OpAmp=125, OpQuestion=126, 
		OpLess=127, OpBang=128, OpDot=129, OpComma=130, OpTilde=131, OpColon=132, 
		OpSemi=133, OpAt=134, OpPound=135, OpBackTick=136, OpUnder=137, OpLParen=138, 
		OpRParen=139, OpLBracket=140, OpRBracket=141, OpLBrace=142, OpRBrace=143, 
		Decimal_digits=144, Operator=145, DotOperatorHead=146, DotOperatorFollow=147, 
		OpEqEq=148, Comment_line=149, OpGreater=150;
	public const int
		RULE_swiftinterface = 0, RULE_statement = 1, RULE_comment = 2, RULE_declaration = 3, 
		RULE_nominal_declaration = 4, RULE_import_statement = 5, RULE_import_kind = 6, 
		RULE_import_path = 7, RULE_import_path_identifier = 8, RULE_variable_declaration = 9, 
		RULE_variable_declaration_head = 10, RULE_variable_declaration_tail = 11, 
		RULE_variable_name = 12, RULE_var_clause = 13, RULE_let_clause = 14, RULE_getter_setter_keyword_block = 15, 
		RULE_getter_keyword_clause = 16, RULE_setter_keyword_clause = 17, RULE_new_value_name = 18, 
		RULE_typealias_declaration = 19, RULE_typealias_name = 20, RULE_typealias_assignment = 21, 
		RULE_enum_declaration = 22, RULE_union_style_enum = 23, RULE_union_style_enum_members = 24, 
		RULE_union_style_enum_member = 25, RULE_union_style_enum_case_clause = 26, 
		RULE_union_style_enum_case_list = 27, RULE_union_style_enum_case = 28, 
		RULE_enum_name = 29, RULE_enum_case_name = 30, RULE_raw_value_style_enum = 31, 
		RULE_raw_value_style_enum_members = 32, RULE_raw_value_style_enum_member = 33, 
		RULE_raw_value_style_enum_case_clause = 34, RULE_raw_value_style_enum_case_list = 35, 
		RULE_raw_value_style_enum_case = 36, RULE_raw_value_assignment = 37, RULE_raw_value_literal = 38, 
		RULE_struct_declaration = 39, RULE_struct_name = 40, RULE_struct_body = 41, 
		RULE_struct_member = 42, RULE_class_declaration = 43, RULE_class_name = 44, 
		RULE_class_body = 45, RULE_class_member = 46, RULE_final_clause = 47, 
		RULE_protocol_declaration = 48, RULE_protocol_name = 49, RULE_protocol_body = 50, 
		RULE_protocol_member = 51, RULE_protocol_member_declaration = 52, RULE_operator_declaration = 53, 
		RULE_prefix_operator_declaration = 54, RULE_postfix_operator_declaration = 55, 
		RULE_infix_operator_declaration = 56, RULE_infix_operator_group = 57, 
		RULE_precedence_group_declaration = 58, RULE_precedence_group_attribute = 59, 
		RULE_precedence_group_relation = 60, RULE_precedence_group_assignment = 61, 
		RULE_precedence_group_associativity = 62, RULE_associativity = 63, RULE_precedence_group_names = 64, 
		RULE_precedence_group_name = 65, RULE_extension_declaration = 66, RULE_extension_body = 67, 
		RULE_extension_member = 68, RULE_subscript_declaration = 69, RULE_subscript_head = 70, 
		RULE_subscript_result = 71, RULE_protocol_associated_type_declaration = 72, 
		RULE_function_declaration = 73, RULE_function_head = 74, RULE_function_name = 75, 
		RULE_function_body = 76, RULE_operator_name = 77, RULE_function_signature = 78, 
		RULE_async_clause = 79, RULE_throws_clause = 80, RULE_rethrows_clause = 81, 
		RULE_function_result = 82, RULE_initializer_declaration = 83, RULE_initializer_head = 84, 
		RULE_deinitializer_declaration = 85, RULE_parameter_clause = 86, RULE_parameter_list = 87, 
		RULE_parameter = 88, RULE_external_parameter_name = 89, RULE_local_parameter_name = 90, 
		RULE_defaultInitializer = 91, RULE_dyckExpression = 92, RULE_dyckSubExpression = 93, 
		RULE_any_other_things_for_dyck_expression = 94, RULE_dotSymbol = 95, RULE_declaration_identifier = 96, 
		RULE_type_inheritance_clause = 97, RULE_type_inheritance_list = 98, RULE_class_requirement = 99, 
		RULE_attribute = 100, RULE_attribute_name = 101, RULE_attribute_argument_clause = 102, 
		RULE_attributes = 103, RULE_balanced_tokens = 104, RULE_balanced_token = 105, 
		RULE_any_punctuation_for_balanced_token = 106, RULE_declaration_modifier = 107, 
		RULE_declaration_modifiers = 108, RULE_access_level_modifier = 109, RULE_mutation_modifier = 110, 
		RULE_pattern = 111, RULE_wildcard_pattern = 112, RULE_identifier_pattern = 113, 
		RULE_function_type = 114, RULE_function_type_argument_clause = 115, RULE_function_type_argument_list = 116, 
		RULE_function_type_argument = 117, RULE_argument_label = 118, RULE_type = 119, 
		RULE_type_annotation = 120, RULE_any_clause = 121, RULE_inout_clause = 122, 
		RULE_type_identifier = 123, RULE_type_name = 124, RULE_tuple_type = 125, 
		RULE_tuple_type_element_list = 126, RULE_tuple_type_element = 127, RULE_element_name = 128, 
		RULE_array_type = 129, RULE_dictionary_type = 130, RULE_protocol_composition_type = 131, 
		RULE_protocol_identifier = 132, RULE_literal = 133, RULE_nil_literal = 134, 
		RULE_boolean_literal = 135, RULE_numeric_literal = 136, RULE_integer_literal = 137, 
		RULE_string_literal = 138, RULE_label_identifier = 139, RULE_generic_parameter_clause = 140, 
		RULE_generic_parameter_list = 141, RULE_generic_parameter = 142, RULE_generic_where_clause = 143, 
		RULE_requirement_list = 144, RULE_requirement = 145, RULE_conformance_requirement = 146, 
		RULE_same_type_requirement = 147, RULE_generic_argument_clause = 148, 
		RULE_generic_argument_list = 149, RULE_generic_argument = 150, RULE_opGreater = 151, 
		RULE_arrow_operator = 152, RULE_range_operator = 153, RULE_keyword_as_identifier_in_declarations = 154, 
		RULE_keyword_as_identifier_in_labels = 155, RULE_operator = 156, RULE_operator_angles = 157;
	public static readonly string[] ruleNames = {
		"swiftinterface", "statement", "comment", "declaration", "nominal_declaration", 
		"import_statement", "import_kind", "import_path", "import_path_identifier", 
		"variable_declaration", "variable_declaration_head", "variable_declaration_tail", 
		"variable_name", "var_clause", "let_clause", "getter_setter_keyword_block", 
		"getter_keyword_clause", "setter_keyword_clause", "new_value_name", "typealias_declaration", 
		"typealias_name", "typealias_assignment", "enum_declaration", "union_style_enum", 
		"union_style_enum_members", "union_style_enum_member", "union_style_enum_case_clause", 
		"union_style_enum_case_list", "union_style_enum_case", "enum_name", "enum_case_name", 
		"raw_value_style_enum", "raw_value_style_enum_members", "raw_value_style_enum_member", 
		"raw_value_style_enum_case_clause", "raw_value_style_enum_case_list", 
		"raw_value_style_enum_case", "raw_value_assignment", "raw_value_literal", 
		"struct_declaration", "struct_name", "struct_body", "struct_member", "class_declaration", 
		"class_name", "class_body", "class_member", "final_clause", "protocol_declaration", 
		"protocol_name", "protocol_body", "protocol_member", "protocol_member_declaration", 
		"operator_declaration", "prefix_operator_declaration", "postfix_operator_declaration", 
		"infix_operator_declaration", "infix_operator_group", "precedence_group_declaration", 
		"precedence_group_attribute", "precedence_group_relation", "precedence_group_assignment", 
		"precedence_group_associativity", "associativity", "precedence_group_names", 
		"precedence_group_name", "extension_declaration", "extension_body", "extension_member", 
		"subscript_declaration", "subscript_head", "subscript_result", "protocol_associated_type_declaration", 
		"function_declaration", "function_head", "function_name", "function_body", 
		"operator_name", "function_signature", "async_clause", "throws_clause", 
		"rethrows_clause", "function_result", "initializer_declaration", "initializer_head", 
		"deinitializer_declaration", "parameter_clause", "parameter_list", "parameter", 
		"external_parameter_name", "local_parameter_name", "defaultInitializer", 
		"dyckExpression", "dyckSubExpression", "any_other_things_for_dyck_expression", 
		"dotSymbol", "declaration_identifier", "type_inheritance_clause", "type_inheritance_list", 
		"class_requirement", "attribute", "attribute_name", "attribute_argument_clause", 
		"attributes", "balanced_tokens", "balanced_token", "any_punctuation_for_balanced_token", 
		"declaration_modifier", "declaration_modifiers", "access_level_modifier", 
		"mutation_modifier", "pattern", "wildcard_pattern", "identifier_pattern", 
		"function_type", "function_type_argument_clause", "function_type_argument_list", 
		"function_type_argument", "argument_label", "type", "type_annotation", 
		"any_clause", "inout_clause", "type_identifier", "type_name", "tuple_type", 
		"tuple_type_element_list", "tuple_type_element", "element_name", "array_type", 
		"dictionary_type", "protocol_composition_type", "protocol_identifier", 
		"literal", "nil_literal", "boolean_literal", "numeric_literal", "integer_literal", 
		"string_literal", "label_identifier", "generic_parameter_clause", "generic_parameter_list", 
		"generic_parameter", "generic_where_clause", "requirement_list", "requirement", 
		"conformance_requirement", "same_type_requirement", "generic_argument_clause", 
		"generic_argument_list", "generic_argument", "opGreater", "arrow_operator", 
		"range_operator", "keyword_as_identifier_in_declarations", "keyword_as_identifier_in_labels", 
		"operator", "operator_angles"
	};

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'typealias'", "'struct'", "'class'", "'enum'", "'protocol'", 
		"'var'", "'func'", "'let'", "'get'", "'set'", "'indirect'", "'case'", 
		"'final'", "'prefix'", "'operator'", "'postfix'", "'infix'", "'precedencegroup'", 
		"'higherThan'", "'lowerThan'", "'assignment'", "'associativity'", "'left'", 
		"'right'", "'none'", "'extension'", "'subscript'", "'associatedtype'", 
		"'async'", "'throws'", "'rethrows'", "'init'", "'deinit'", "'convenience'", 
		"'dynamic'", "'lazy'", "'optional'", "'override'", "'required'", "'static'", 
		"'unowned'", "'safe'", "'unsafe'", "'weak'", "'private'", "'fileprivate'", 
		"'internal'", "'public'", "'open'", "'mutating'", "'nonmutating'", "'is'", 
		"'as'", "'Type'", "'Protocol'", "'Any'", "'Self'", "'any'", "'inout'", 
		"'nil'", "'true'", "'false'", "'where'", "'>'", "'->'", "'...'", "'alpha'", 
		"'arch'", "'arm'", "'arm64'", "'blue'", "'didSet'", "'file'", "'green'", 
		"'i386'", "'iOS'", "'iOSApplicationExtension'", "'line'", "'macOS'", "'macOSApplicationExtension'", 
		"'of'", "'os'", "'precedence'", "'red'", "'resourceName'", "'swift'", 
		"'tvOS'", "'type'", "'watchOS'", "'willSet'", "'x86_64'", "'break'", "'catch'", 
		"'continue'", "'default'", "'defer'", "'do'", "'else'", "'fallthrough'", 
		"'for'", "'guard'", "'if'", "'in'", "'repeat'", "'return'", "'self'", 
		"'super'", "'switch'", "'throw'", "'try'", "'while'", null, null, null, 
		null, null, null, null, null, null, "'+'", "'-'", "'='", "'&'", "'?'", 
		"'<'", "'!'", "'.'", "','", "'~'", "':'", "';'", "'@'", "'#'", "'`'", 
		"'_'", "'('", "')'", "'['", "']'", "'{'", "'}'", null, null, null, null, 
		"'=='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "Binary_literal", "Octal_literal", "Decimal_literal", 
		"Pure_decimal_digits", "Hexadecimal_literal", "Static_string_literal", 
		"Identifier", "Implicit_parameter_name", "WS", "OpPlus", "OpMinus", "OpAssign", 
		"OpAmp", "OpQuestion", "OpLess", "OpBang", "OpDot", "OpComma", "OpTilde", 
		"OpColon", "OpSemi", "OpAt", "OpPound", "OpBackTick", "OpUnder", "OpLParen", 
		"OpRParen", "OpLBracket", "OpRBracket", "OpLBrace", "OpRBrace", "Decimal_digits", 
		"Operator", "DotOperatorHead", "DotOperatorFollow", "OpEqEq", "Comment_line", 
		"OpGreater"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SwiftInterface.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SwiftInterfaceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SwiftInterfaceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SwiftInterfaceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SwiftinterfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SwiftinterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_swiftinterface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSwiftinterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSwiftinterface(this);
		}
	}

	[RuleVersion(0)]
	public SwiftinterfaceContext swiftinterface() {
		SwiftinterfaceContext _localctx = new SwiftinterfaceContext(Context, State);
		EnterRule(_localctx, 0, RULE_swiftinterface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt || _la==Comment_line) {
				{
				{
				State = 316;
				statement();
				}
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext import_statement() {
			return GetRuleContext<Import_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 322;
				import_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 323;
				declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 324;
				comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment_line() { return GetToken(SwiftInterfaceParser.Comment_line, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(Comment_line);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationContext struct_declaration() {
			return GetRuleContext<Struct_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_declarationContext protocol_declaration() {
			return GetRuleContext<Protocol_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extension_declarationContext extension_declaration() {
			return GetRuleContext<Extension_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_declarationContext subscript_declaration() {
			return GetRuleContext<Subscript_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_declarationContext precedence_group_declaration() {
			return GetRuleContext<Precedence_group_declarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				typealias_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				function_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				enum_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 333;
				struct_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 334;
				class_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 335;
				protocol_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 336;
				extension_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 337;
				subscript_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 338;
				operator_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 339;
				precedence_group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nominal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_declarationContext enum_declaration() {
			return GetRuleContext<Enum_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declarationContext struct_declaration() {
			return GetRuleContext<Struct_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_declarationContext protocol_declaration() {
			return GetRuleContext<Protocol_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_declarationContext initializer_declaration() {
			return GetRuleContext<Initializer_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Deinitializer_declarationContext deinitializer_declaration() {
			return GetRuleContext<Deinitializer_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extension_declarationContext extension_declaration() {
			return GetRuleContext<Extension_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_declarationContext subscript_declaration() {
			return GetRuleContext<Subscript_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_declarationContext operator_declaration() {
			return GetRuleContext<Operator_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_declarationContext precedence_group_declaration() {
			return GetRuleContext<Precedence_group_declarationContext>(0);
		}
		public Nominal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nominal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterNominal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitNominal_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Nominal_declarationContext nominal_declaration() {
		Nominal_declarationContext _localctx = new Nominal_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_nominal_declaration);
		try {
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342;
				variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				typealias_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344;
				function_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				enum_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 346;
				struct_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 347;
				class_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 348;
				protocol_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 349;
				initializer_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 350;
				deinitializer_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 351;
				extension_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 352;
				subscript_declaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 353;
				operator_declaration();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 354;
				precedence_group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_pathContext import_path() {
			return GetRuleContext<Import_pathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_kindContext import_kind() {
			return GetRuleContext<Import_kindContext>(0);
		}
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 357;
				attributes();
				}
			}

			State = 360;
			Match(T__0);
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) {
				{
				State = 361;
				import_kind();
				}
			}

			State = 364;
			import_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_kindContext : ParserRuleContext {
		public Import_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterImport_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitImport_kind(this);
		}
	}

	[RuleVersion(0)]
	public Import_kindContext import_kind() {
		Import_kindContext _localctx = new Import_kindContext(Context, State);
		EnterRule(_localctx, 12, RULE_import_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_path_identifierContext[] import_path_identifier() {
			return GetRuleContexts<Import_path_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_path_identifierContext import_path_identifier(int i) {
			return GetRuleContext<Import_path_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpDot() { return GetTokens(SwiftInterfaceParser.OpDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot(int i) {
			return GetToken(SwiftInterfaceParser.OpDot, i);
		}
		public Import_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterImport_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitImport_path(this);
		}
	}

	[RuleVersion(0)]
	public Import_pathContext import_path() {
		Import_pathContext _localctx = new Import_pathContext(Context, State);
		EnterRule(_localctx, 14, RULE_import_path);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			import_path_identifier();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpDot) {
				{
				{
				State = 369;
				Match(OpDot);
				State = 370;
				import_path_identifier();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_path_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Import_path_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_path_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterImport_path_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitImport_path_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Import_path_identifierContext import_path_identifier() {
		Import_path_identifierContext _localctx = new Import_path_identifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_import_path_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_headContext variable_declaration_head() {
			return GetRuleContext<Variable_declaration_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_tailContext[] variable_declaration_tail() {
			return GetRuleContexts<Variable_declaration_tailContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declaration_tailContext variable_declaration_tail(int i) {
			return GetRuleContext<Variable_declaration_tailContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpComma() { return GetTokens(SwiftInterfaceParser.OpComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma(int i) {
			return GetToken(SwiftInterfaceParser.OpComma, i);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			variable_declaration_head();
			State = 379;
			variable_declaration_tail();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpComma) {
				{
				{
				State = 380;
				Match(OpComma);
				State = 381;
				variable_declaration_tail();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaration_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_clauseContext var_clause() {
			return GetRuleContext<Var_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifiersContext declaration_modifiers() {
			return GetRuleContext<Declaration_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Variable_declaration_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterVariable_declaration_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitVariable_declaration_head(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaration_headContext variable_declaration_head() {
		Variable_declaration_headContext _localctx = new Variable_declaration_headContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable_declaration_head);
		int _la;
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 387;
					attributes();
					}
				}

				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
					{
					State = 390;
					declaration_modifiers();
					}
				}

				State = 393;
				var_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 394;
					attributes();
					}
				}

				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
					{
					State = 397;
					declaration_modifiers();
					}
				}

				State = 400;
				let_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaration_tailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_annotationContext type_annotation() {
			return GetRuleContext<Type_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getter_setter_keyword_blockContext getter_setter_keyword_block() {
			return GetRuleContext<Getter_setter_keyword_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultInitializerContext defaultInitializer() {
			return GetRuleContext<DefaultInitializerContext>(0);
		}
		public Variable_declaration_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterVariable_declaration_tail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitVariable_declaration_tail(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaration_tailContext variable_declaration_tail() {
		Variable_declaration_tailContext _localctx = new Variable_declaration_tailContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable_declaration_tail);
		int _la;
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403;
				variable_name();
				State = 404;
				type_annotation();
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpLBrace) {
					{
					State = 405;
					getter_setter_keyword_block();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408;
				variable_name();
				State = 409;
				type_annotation();
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAssign) {
					{
					State = 410;
					defaultInitializer();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitVariable_name(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_clauseContext : ParserRuleContext {
		public Var_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterVar_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitVar_clause(this);
		}
	}

	[RuleVersion(0)]
	public Var_clauseContext var_clause() {
		Var_clauseContext _localctx = new Var_clauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_var_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_setter_keyword_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getter_keyword_clauseContext getter_keyword_clause() {
			return GetRuleContext<Getter_keyword_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Setter_keyword_clauseContext setter_keyword_clause() {
			return GetRuleContext<Setter_keyword_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		public Getter_setter_keyword_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_setter_keyword_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGetter_setter_keyword_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGetter_setter_keyword_block(this);
		}
	}

	[RuleVersion(0)]
	public Getter_setter_keyword_blockContext getter_setter_keyword_block() {
		Getter_setter_keyword_blockContext _localctx = new Getter_setter_keyword_blockContext(Context, State);
		EnterRule(_localctx, 30, RULE_getter_setter_keyword_block);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421;
				Match(OpLBrace);
				State = 422;
				getter_keyword_clause();
				State = 423;
				setter_keyword_clause();
				State = 424;
				Match(OpRBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426;
				Match(OpLBrace);
				State = 427;
				setter_keyword_clause();
				State = 428;
				getter_keyword_clause();
				State = 429;
				Match(OpRBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 431;
				Match(OpLBrace);
				State = 432;
				getter_keyword_clause();
				State = 433;
				Match(OpRBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getter_keyword_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mutation_modifierContext mutation_modifier() {
			return GetRuleContext<Mutation_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Async_clauseContext async_clause() {
			return GetRuleContext<Async_clauseContext>(0);
		}
		public Getter_keyword_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter_keyword_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGetter_keyword_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGetter_keyword_clause(this);
		}
	}

	[RuleVersion(0)]
	public Getter_keyword_clauseContext getter_keyword_clause() {
		Getter_keyword_clauseContext _localctx = new Getter_keyword_clauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_getter_keyword_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 437;
				attributes();
				}
			}

			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__50 || _la==T__51) {
				{
				State = 440;
				mutation_modifier();
				}
			}

			State = 443;
			Match(T__9);
			State = 445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 444;
				async_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Setter_keyword_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mutation_modifierContext mutation_modifier() {
			return GetRuleContext<Mutation_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public New_value_nameContext new_value_name() {
			return GetRuleContext<New_value_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		public Setter_keyword_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter_keyword_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSetter_keyword_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSetter_keyword_clause(this);
		}
	}

	[RuleVersion(0)]
	public Setter_keyword_clauseContext setter_keyword_clause() {
		Setter_keyword_clauseContext _localctx = new Setter_keyword_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_setter_keyword_clause);
		int _la;
		try {
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 447;
					attributes();
					}
				}

				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50 || _la==T__51) {
					{
					State = 450;
					mutation_modifier();
					}
				}

				State = 453;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 454;
					attributes();
					}
				}

				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__50 || _la==T__51) {
					{
					State = 457;
					mutation_modifier();
					}
				}

				State = 460;
				Match(T__10);
				State = 461;
				Match(OpLParen);
				State = 462;
				new_value_name();
				State = 463;
				Match(OpRParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_value_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public New_value_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_value_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterNew_value_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitNew_value_name(this);
		}
	}

	[RuleVersion(0)]
	public New_value_nameContext new_value_name() {
		New_value_nameContext _localctx = new New_value_nameContext(Context, State);
		EnterRule(_localctx, 36, RULE_new_value_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typealias_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_nameContext typealias_name() {
			return GetRuleContext<Typealias_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_assignmentContext typealias_assignment() {
			return GetRuleContext<Typealias_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		public Typealias_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typealias_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTypealias_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTypealias_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Typealias_declarationContext typealias_declaration() {
		Typealias_declarationContext _localctx = new Typealias_declarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_typealias_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 469;
				attributes();
				}
			}

			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
				{
				State = 472;
				access_level_modifier();
				}
			}

			State = 475;
			Match(T__1);
			State = 476;
			typealias_name();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLess) {
				{
				State = 477;
				generic_parameter_clause();
				}
			}

			State = 480;
			typealias_assignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typealias_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Typealias_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typealias_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTypealias_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTypealias_name(this);
		}
	}

	[RuleVersion(0)]
	public Typealias_nameContext typealias_name() {
		Typealias_nameContext _localctx = new Typealias_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_typealias_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typealias_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAssign() { return GetToken(SwiftInterfaceParser.OpAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Typealias_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typealias_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTypealias_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTypealias_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Typealias_assignmentContext typealias_assignment() {
		Typealias_assignmentContext _localctx = new Typealias_assignmentContext(Context, State);
		EnterRule(_localctx, 42, RULE_typealias_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(OpAssign);
			State = 485;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enumContext union_style_enum() {
			return GetRuleContext<Union_style_enumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enumContext raw_value_style_enum() {
			return GetRuleContext<Raw_value_style_enumContext>(0);
		}
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_enum_declaration);
		int _la;
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 487;
					attributes();
					}
				}

				State = 491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
					{
					State = 490;
					access_level_modifier();
					}
				}

				State = 493;
				union_style_enum();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 494;
					attributes();
					}
				}

				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
					{
					State = 497;
					access_level_modifier();
					}
				}

				State = 500;
				raw_value_style_enum();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_style_enumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_nameContext enum_name() {
			return GetRuleContext<Enum_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_membersContext union_style_enum_members() {
			return GetRuleContext<Union_style_enum_membersContext>(0);
		}
		public Union_style_enumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_style_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnion_style_enum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnion_style_enum(this);
		}
	}

	[RuleVersion(0)]
	public Union_style_enumContext union_style_enum() {
		Union_style_enumContext _localctx = new Union_style_enumContext(Context, State);
		EnterRule(_localctx, 46, RULE_union_style_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 503;
				Match(T__11);
				}
			}

			State = 506;
			Match(T__4);
			State = 507;
			enum_name();
			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLess) {
				{
				State = 508;
				generic_parameter_clause();
				}
			}

			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpColon) {
				{
				State = 511;
				type_inheritance_clause();
				}
			}

			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 514;
				generic_where_clause();
				}
			}

			State = 517;
			Match(OpLBrace);
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				State = 518;
				union_style_enum_members();
				}
			}

			State = 521;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_style_enum_membersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_memberContext union_style_enum_member() {
			return GetRuleContext<Union_style_enum_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_membersContext union_style_enum_members() {
			return GetRuleContext<Union_style_enum_membersContext>(0);
		}
		public Union_style_enum_membersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_style_enum_members; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnion_style_enum_members(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnion_style_enum_members(this);
		}
	}

	[RuleVersion(0)]
	public Union_style_enum_membersContext union_style_enum_members() {
		Union_style_enum_membersContext _localctx = new Union_style_enum_membersContext(Context, State);
		EnterRule(_localctx, 48, RULE_union_style_enum_members);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			union_style_enum_member();
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				State = 524;
				union_style_enum_members();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_style_enum_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Nominal_declarationContext nominal_declaration() {
			return GetRuleContext<Nominal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_case_clauseContext union_style_enum_case_clause() {
			return GetRuleContext<Union_style_enum_case_clauseContext>(0);
		}
		public Union_style_enum_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_style_enum_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnion_style_enum_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnion_style_enum_member(this);
		}
	}

	[RuleVersion(0)]
	public Union_style_enum_memberContext union_style_enum_member() {
		Union_style_enum_memberContext _localctx = new Union_style_enum_memberContext(Context, State);
		EnterRule(_localctx, 50, RULE_union_style_enum_member);
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527;
				nominal_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				union_style_enum_case_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_style_enum_case_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_case_listContext union_style_enum_case_list() {
			return GetRuleContext<Union_style_enum_case_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Union_style_enum_case_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_style_enum_case_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnion_style_enum_case_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnion_style_enum_case_clause(this);
		}
	}

	[RuleVersion(0)]
	public Union_style_enum_case_clauseContext union_style_enum_case_clause() {
		Union_style_enum_case_clauseContext _localctx = new Union_style_enum_case_clauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_union_style_enum_case_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 531;
				attributes();
				}
			}

			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 534;
				Match(T__11);
				}
			}

			State = 537;
			Match(T__12);
			State = 538;
			union_style_enum_case_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_style_enum_case_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_caseContext union_style_enum_case() {
			return GetRuleContext<Union_style_enum_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Union_style_enum_case_listContext union_style_enum_case_list() {
			return GetRuleContext<Union_style_enum_case_listContext>(0);
		}
		public Union_style_enum_case_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_style_enum_case_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnion_style_enum_case_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnion_style_enum_case_list(this);
		}
	}

	[RuleVersion(0)]
	public Union_style_enum_case_listContext union_style_enum_case_list() {
		Union_style_enum_case_listContext _localctx = new Union_style_enum_case_listContext(Context, State);
		EnterRule(_localctx, 54, RULE_union_style_enum_case_list);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540;
				union_style_enum_case();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541;
				union_style_enum_case();
				State = 542;
				Match(OpComma);
				State = 543;
				union_style_enum_case_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_style_enum_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_nameContext enum_case_name() {
			return GetRuleContext<Enum_case_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		public Union_style_enum_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_style_enum_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnion_style_enum_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnion_style_enum_case(this);
		}
	}

	[RuleVersion(0)]
	public Union_style_enum_caseContext union_style_enum_case() {
		Union_style_enum_caseContext _localctx = new Union_style_enum_caseContext(Context, State);
		EnterRule(_localctx, 56, RULE_union_style_enum_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			enum_case_name();
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLParen) {
				{
				State = 548;
				tuple_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Enum_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterEnum_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitEnum_name(this);
		}
	}

	[RuleVersion(0)]
	public Enum_nameContext enum_name() {
		Enum_nameContext _localctx = new Enum_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_enum_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_case_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Enum_case_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_case_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterEnum_case_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitEnum_case_name(this);
		}
	}

	[RuleVersion(0)]
	public Enum_case_nameContext enum_case_name() {
		Enum_case_nameContext _localctx = new Enum_case_nameContext(Context, State);
		EnterRule(_localctx, 60, RULE_enum_case_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_style_enumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_nameContext enum_name() {
			return GetRuleContext<Enum_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_membersContext raw_value_style_enum_members() {
			return GetRuleContext<Raw_value_style_enum_membersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		public Raw_value_style_enumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_style_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_style_enum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_style_enum(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_style_enumContext raw_value_style_enum() {
		Raw_value_style_enumContext _localctx = new Raw_value_style_enumContext(Context, State);
		EnterRule(_localctx, 62, RULE_raw_value_style_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(T__4);
			State = 556;
			enum_name();
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLess) {
				{
				State = 557;
				generic_parameter_clause();
				}
			}

			State = 560;
			type_inheritance_clause();
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 561;
				generic_where_clause();
				}
			}

			State = 564;
			Match(OpLBrace);
			State = 565;
			raw_value_style_enum_members();
			State = 566;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_style_enum_membersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_memberContext raw_value_style_enum_member() {
			return GetRuleContext<Raw_value_style_enum_memberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_membersContext raw_value_style_enum_members() {
			return GetRuleContext<Raw_value_style_enum_membersContext>(0);
		}
		public Raw_value_style_enum_membersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_style_enum_members; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_style_enum_members(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_style_enum_members(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_style_enum_membersContext raw_value_style_enum_members() {
		Raw_value_style_enum_membersContext _localctx = new Raw_value_style_enum_membersContext(Context, State);
		EnterRule(_localctx, 64, RULE_raw_value_style_enum_members);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			raw_value_style_enum_member();
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				State = 569;
				raw_value_style_enum_members();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_style_enum_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Nominal_declarationContext nominal_declaration() {
			return GetRuleContext<Nominal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_case_clauseContext raw_value_style_enum_case_clause() {
			return GetRuleContext<Raw_value_style_enum_case_clauseContext>(0);
		}
		public Raw_value_style_enum_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_style_enum_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_style_enum_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_style_enum_member(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_style_enum_memberContext raw_value_style_enum_member() {
		Raw_value_style_enum_memberContext _localctx = new Raw_value_style_enum_memberContext(Context, State);
		EnterRule(_localctx, 66, RULE_raw_value_style_enum_member);
		try {
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				nominal_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				raw_value_style_enum_case_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_style_enum_case_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_case_listContext raw_value_style_enum_case_list() {
			return GetRuleContext<Raw_value_style_enum_case_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Raw_value_style_enum_case_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_style_enum_case_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_style_enum_case_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_style_enum_case_clause(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_style_enum_case_clauseContext raw_value_style_enum_case_clause() {
		Raw_value_style_enum_case_clauseContext _localctx = new Raw_value_style_enum_case_clauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_raw_value_style_enum_case_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 576;
				attributes();
				}
			}

			State = 579;
			Match(T__12);
			State = 580;
			raw_value_style_enum_case_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_style_enum_case_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_caseContext raw_value_style_enum_case() {
			return GetRuleContext<Raw_value_style_enum_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_style_enum_case_listContext raw_value_style_enum_case_list() {
			return GetRuleContext<Raw_value_style_enum_case_listContext>(0);
		}
		public Raw_value_style_enum_case_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_style_enum_case_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_style_enum_case_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_style_enum_case_list(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_style_enum_case_listContext raw_value_style_enum_case_list() {
		Raw_value_style_enum_case_listContext _localctx = new Raw_value_style_enum_case_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_raw_value_style_enum_case_list);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582;
				raw_value_style_enum_case();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583;
				raw_value_style_enum_case();
				State = 584;
				Match(OpComma);
				State = 585;
				raw_value_style_enum_case_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_style_enum_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_nameContext enum_case_name() {
			return GetRuleContext<Enum_case_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_assignmentContext raw_value_assignment() {
			return GetRuleContext<Raw_value_assignmentContext>(0);
		}
		public Raw_value_style_enum_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_style_enum_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_style_enum_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_style_enum_case(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_style_enum_caseContext raw_value_style_enum_case() {
		Raw_value_style_enum_caseContext _localctx = new Raw_value_style_enum_caseContext(Context, State);
		EnterRule(_localctx, 72, RULE_raw_value_style_enum_case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			enum_case_name();
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAssign) {
				{
				State = 590;
				raw_value_assignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAssign() { return GetToken(SwiftInterfaceParser.OpAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Raw_value_literalContext raw_value_literal() {
			return GetRuleContext<Raw_value_literalContext>(0);
		}
		public Raw_value_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_assignmentContext raw_value_assignment() {
		Raw_value_assignmentContext _localctx = new Raw_value_assignmentContext(Context, State);
		EnterRule(_localctx, 74, RULE_raw_value_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(OpAssign);
			State = 594;
			raw_value_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_value_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_string_literal() { return GetToken(SwiftInterfaceParser.Static_string_literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Raw_value_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_value_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRaw_value_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRaw_value_literal(this);
		}
	}

	[RuleVersion(0)]
	public Raw_value_literalContext raw_value_literal() {
		Raw_value_literalContext _localctx = new Raw_value_literalContext(Context, State);
		EnterRule(_localctx, 76, RULE_raw_value_literal);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Binary_literal:
			case Octal_literal:
			case Decimal_literal:
			case Pure_decimal_digits:
			case Hexadecimal_literal:
			case OpPlus:
			case OpMinus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 596;
				numeric_literal();
				}
				break;
			case Static_string_literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 597;
				Match(Static_string_literal);
				}
				break;
			case T__61:
			case T__62:
				EnterOuterAlt(_localctx, 3);
				{
				State = 598;
				boolean_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_nameContext struct_name() {
			return GetRuleContext<Struct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_struct_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 601;
				attributes();
				}
			}

			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
				{
				State = 604;
				access_level_modifier();
				}
			}

			State = 607;
			Match(T__2);
			State = 608;
			struct_name();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLess) {
				{
				State = 609;
				generic_parameter_clause();
				}
			}

			State = 613;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpColon) {
				{
				State = 612;
				type_inheritance_clause();
				}
			}

			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 615;
				generic_where_clause();
				}
			}

			State = 618;
			struct_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Struct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterStruct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitStruct_name(this);
		}
	}

	[RuleVersion(0)]
	public Struct_nameContext struct_name() {
		Struct_nameContext _localctx = new Struct_nameContext(Context, State);
		EnterRule(_localctx, 80, RULE_struct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_memberContext[] struct_member() {
			return GetRuleContexts<Struct_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_memberContext struct_member(int i) {
			return GetRuleContext<Struct_memberContext>(i);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			Match(OpLBrace);
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				{
				State = 623;
				struct_member();
				}
				}
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 629;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Nominal_declarationContext nominal_declaration() {
			return GetRuleContext<Nominal_declarationContext>(0);
		}
		public Struct_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterStruct_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitStruct_member(this);
		}
	}

	[RuleVersion(0)]
	public Struct_memberContext struct_member() {
		Struct_memberContext _localctx = new Struct_memberContext(Context, State);
		EnterRule(_localctx, 84, RULE_struct_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			nominal_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Final_clauseContext final_clause() {
			return GetRuleContext<Final_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_class_declaration);
		int _la;
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 633;
					attributes();
					}
				}

				State = 637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
					{
					State = 636;
					access_level_modifier();
					}
				}

				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 639;
					final_clause();
					}
				}

				State = 642;
				Match(T__3);
				State = 643;
				class_name();
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpLess) {
					{
					State = 644;
					generic_parameter_clause();
					}
				}

				State = 648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpColon) {
					{
					State = 647;
					type_inheritance_clause();
					}
				}

				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__63) {
					{
					State = 650;
					generic_where_clause();
					}
				}

				State = 653;
				class_body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 655;
					attributes();
					}
				}

				State = 658;
				final_clause();
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
					{
					State = 659;
					access_level_modifier();
					}
				}

				State = 662;
				Match(T__3);
				State = 663;
				class_name();
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpLess) {
					{
					State = 664;
					generic_parameter_clause();
					}
				}

				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpColon) {
					{
					State = 667;
					type_inheritance_clause();
					}
				}

				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__63) {
					{
					State = 670;
					generic_where_clause();
					}
				}

				State = 673;
				class_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 88, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 90, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(OpLBrace);
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				{
				State = 680;
				class_member();
				}
				}
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 686;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Nominal_declarationContext nominal_declaration() {
			return GetRuleContext<Nominal_declarationContext>(0);
		}
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 92, RULE_class_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			nominal_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Final_clauseContext : ParserRuleContext {
		public Final_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFinal_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFinal_clause(this);
		}
	}

	[RuleVersion(0)]
	public Final_clauseContext final_clause() {
		Final_clauseContext _localctx = new Final_clauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_final_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_nameContext protocol_name() {
			return GetRuleContext<Protocol_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_bodyContext protocol_body() {
			return GetRuleContext<Protocol_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		public Protocol_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_declarationContext protocol_declaration() {
		Protocol_declarationContext _localctx = new Protocol_declarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_protocol_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 692;
				attributes();
				}
			}

			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
				{
				State = 695;
				access_level_modifier();
				}
			}

			State = 698;
			Match(T__5);
			State = 699;
			protocol_name();
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpColon) {
				{
				State = 700;
				type_inheritance_clause();
				}
			}

			State = 703;
			protocol_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Protocol_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_name(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_nameContext protocol_name() {
		Protocol_nameContext _localctx = new Protocol_nameContext(Context, State);
		EnterRule(_localctx, 98, RULE_protocol_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_memberContext[] protocol_member() {
			return GetRuleContexts<Protocol_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_memberContext protocol_member(int i) {
			return GetRuleContext<Protocol_memberContext>(i);
		}
		public Protocol_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_body(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_bodyContext protocol_body() {
		Protocol_bodyContext _localctx = new Protocol_bodyContext(Context, State);
		EnterRule(_localctx, 100, RULE_protocol_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(OpLBrace);
			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__27) | (1L << T__28) | (1L << T__32) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				{
				State = 708;
				protocol_member();
				}
				}
				State = 713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 714;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_member_declarationContext protocol_member_declaration() {
			return GetRuleContext<Protocol_member_declarationContext>(0);
		}
		public Protocol_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_member(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_memberContext protocol_member() {
		Protocol_memberContext _localctx = new Protocol_memberContext(Context, State);
		EnterRule(_localctx, 102, RULE_protocol_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			protocol_member_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_member_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_declarationContext initializer_declaration() {
			return GetRuleContext<Initializer_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_declarationContext subscript_declaration() {
			return GetRuleContext<Subscript_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_associated_type_declarationContext protocol_associated_type_declaration() {
			return GetRuleContext<Protocol_associated_type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public Protocol_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_member_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_member_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_member_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_member_declarationContext protocol_member_declaration() {
		Protocol_member_declarationContext _localctx = new Protocol_member_declarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_protocol_member_declaration);
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 719;
				function_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 720;
				initializer_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 721;
				subscript_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 722;
				protocol_associated_type_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 723;
				typealias_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_operator_declarationContext prefix_operator_declaration() {
			return GetRuleContext<Prefix_operator_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_operator_declarationContext postfix_operator_declaration() {
			return GetRuleContext<Postfix_operator_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Infix_operator_declarationContext infix_operator_declaration() {
			return GetRuleContext<Infix_operator_declarationContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(Context, State);
		EnterRule(_localctx, 106, RULE_operator_declaration);
		try {
			State = 729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				prefix_operator_declaration();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				postfix_operator_declaration();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 728;
				infix_operator_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_operator_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Prefix_operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_operator_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrefix_operator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrefix_operator_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_operator_declarationContext prefix_operator_declaration() {
		Prefix_operator_declarationContext _localctx = new Prefix_operator_declarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_prefix_operator_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(T__14);
			State = 732;
			Match(T__15);
			State = 733;
			@operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_operator_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Postfix_operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_operator_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPostfix_operator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPostfix_operator_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_operator_declarationContext postfix_operator_declaration() {
		Postfix_operator_declarationContext _localctx = new Postfix_operator_declarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_postfix_operator_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(T__16);
			State = 736;
			Match(T__15);
			State = 737;
			@operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Infix_operator_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Infix_operator_groupContext infix_operator_group() {
			return GetRuleContext<Infix_operator_groupContext>(0);
		}
		public Infix_operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infix_operator_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterInfix_operator_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitInfix_operator_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Infix_operator_declarationContext infix_operator_declaration() {
		Infix_operator_declarationContext _localctx = new Infix_operator_declarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_infix_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			Match(T__17);
			State = 740;
			Match(T__15);
			State = 741;
			@operator();
			State = 743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpColon) {
				{
				State = 742;
				infix_operator_group();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Infix_operator_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_nameContext precedence_group_name() {
			return GetRuleContext<Precedence_group_nameContext>(0);
		}
		public Infix_operator_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infix_operator_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterInfix_operator_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitInfix_operator_group(this);
		}
	}

	[RuleVersion(0)]
	public Infix_operator_groupContext infix_operator_group() {
		Infix_operator_groupContext _localctx = new Infix_operator_groupContext(Context, State);
		EnterRule(_localctx, 114, RULE_infix_operator_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(OpColon);
			State = 746;
			precedence_group_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_nameContext precedence_group_name() {
			return GetRuleContext<Precedence_group_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_attributeContext[] precedence_group_attribute() {
			return GetRuleContexts<Precedence_group_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_attributeContext precedence_group_attribute(int i) {
			return GetRuleContext<Precedence_group_attributeContext>(i);
		}
		public Precedence_group_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_declarationContext precedence_group_declaration() {
		Precedence_group_declarationContext _localctx = new Precedence_group_declarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_precedence_group_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(T__18);
			State = 749;
			precedence_group_name();
			State = 750;
			Match(OpLBrace);
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) {
				{
				{
				State = 751;
				precedence_group_attribute();
				}
				}
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 757;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_relationContext precedence_group_relation() {
			return GetRuleContext<Precedence_group_relationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_assignmentContext precedence_group_assignment() {
			return GetRuleContext<Precedence_group_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_associativityContext precedence_group_associativity() {
			return GetRuleContext<Precedence_group_associativityContext>(0);
		}
		public Precedence_group_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_attribute(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_attributeContext precedence_group_attribute() {
		Precedence_group_attributeContext _localctx = new Precedence_group_attributeContext(Context, State);
		EnterRule(_localctx, 118, RULE_precedence_group_attribute);
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				precedence_group_relation();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				precedence_group_assignment();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 761;
				precedence_group_associativity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_namesContext precedence_group_names() {
			return GetRuleContext<Precedence_group_namesContext>(0);
		}
		public Precedence_group_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_relation(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_relationContext precedence_group_relation() {
		Precedence_group_relationContext _localctx = new Precedence_group_relationContext(Context, State);
		EnterRule(_localctx, 120, RULE_precedence_group_relation);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 764;
				Match(T__19);
				State = 765;
				Match(OpColon);
				State = 766;
				precedence_group_names();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 767;
				Match(T__20);
				State = 768;
				Match(OpColon);
				State = 769;
				precedence_group_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Precedence_group_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_assignmentContext precedence_group_assignment() {
		Precedence_group_assignmentContext _localctx = new Precedence_group_assignmentContext(Context, State);
		EnterRule(_localctx, 122, RULE_precedence_group_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(T__21);
			State = 773;
			Match(OpColon);
			State = 774;
			boolean_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_associativityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssociativityContext associativity() {
			return GetRuleContext<AssociativityContext>(0);
		}
		public Precedence_group_associativityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_associativity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_associativity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_associativity(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_associativityContext precedence_group_associativity() {
		Precedence_group_associativityContext _localctx = new Precedence_group_associativityContext(Context, State);
		EnterRule(_localctx, 124, RULE_precedence_group_associativity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(T__22);
			State = 777;
			Match(OpColon);
			State = 778;
			associativity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociativityContext : ParserRuleContext {
		public AssociativityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associativity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAssociativity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAssociativity(this);
		}
	}

	[RuleVersion(0)]
	public AssociativityContext associativity() {
		AssociativityContext _localctx = new AssociativityContext(Context, State);
		EnterRule(_localctx, 126, RULE_associativity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_nameContext[] precedence_group_name() {
			return GetRuleContexts<Precedence_group_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Precedence_group_nameContext precedence_group_name(int i) {
			return GetRuleContext<Precedence_group_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpComma() { return GetTokens(SwiftInterfaceParser.OpComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma(int i) {
			return GetToken(SwiftInterfaceParser.OpComma, i);
		}
		public Precedence_group_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_names(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_namesContext precedence_group_names() {
		Precedence_group_namesContext _localctx = new Precedence_group_namesContext(Context, State);
		EnterRule(_localctx, 128, RULE_precedence_group_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782;
			precedence_group_name();
			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpComma) {
				{
				{
				State = 783;
				Match(OpComma);
				State = 784;
				precedence_group_name();
				}
				}
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precedence_group_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Precedence_group_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedence_group_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPrecedence_group_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPrecedence_group_name(this);
		}
	}

	[RuleVersion(0)]
	public Precedence_group_nameContext precedence_group_name() {
		Precedence_group_nameContext _localctx = new Precedence_group_nameContext(Context, State);
		EnterRule(_localctx, 130, RULE_precedence_group_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extension_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extension_bodyContext extension_body() {
			return GetRuleContext<Extension_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		public Extension_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterExtension_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitExtension_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Extension_declarationContext extension_declaration() {
		Extension_declarationContext _localctx = new Extension_declarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_extension_declaration);
		int _la;
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 792;
					attributes();
					}
				}

				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
					{
					State = 795;
					access_level_modifier();
					}
				}

				State = 798;
				Match(T__26);
				State = 799;
				type_identifier();
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpColon) {
					{
					State = 800;
					type_inheritance_clause();
					}
				}

				State = 803;
				extension_body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 805;
					attributes();
					}
				}

				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
					{
					State = 808;
					access_level_modifier();
					}
				}

				State = 811;
				Match(T__26);
				State = 812;
				type_identifier();
				State = 813;
				generic_where_clause();
				State = 814;
				extension_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extension_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extension_memberContext[] extension_member() {
			return GetRuleContexts<Extension_memberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extension_memberContext extension_member(int i) {
			return GetRuleContext<Extension_memberContext>(i);
		}
		public Extension_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterExtension_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitExtension_body(this);
		}
	}

	[RuleVersion(0)]
	public Extension_bodyContext extension_body() {
		Extension_bodyContext _localctx = new Extension_bodyContext(Context, State);
		EnterRule(_localctx, 134, RULE_extension_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(OpLBrace);
			State = 822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || _la==OpAt) {
				{
				{
				State = 819;
				extension_member();
				}
				}
				State = 824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 825;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extension_memberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public Extension_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterExtension_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitExtension_member(this);
		}
	}

	[RuleVersion(0)]
	public Extension_memberContext extension_member() {
		Extension_memberContext _localctx = new Extension_memberContext(Context, State);
		EnterRule(_localctx, 136, RULE_extension_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_headContext subscript_head() {
			return GetRuleContext<Subscript_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_resultContext subscript_result() {
			return GetRuleContext<Subscript_resultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getter_setter_keyword_blockContext getter_setter_keyword_block() {
			return GetRuleContext<Getter_setter_keyword_blockContext>(0);
		}
		public Subscript_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSubscript_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSubscript_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_declarationContext subscript_declaration() {
		Subscript_declarationContext _localctx = new Subscript_declarationContext(Context, State);
		EnterRule(_localctx, 138, RULE_subscript_declaration);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829;
				subscript_head();
				State = 830;
				subscript_result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 832;
				subscript_head();
				State = 833;
				subscript_result();
				State = 834;
				getter_setter_keyword_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_clauseContext parameter_clause() {
			return GetRuleContext<Parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifiersContext declaration_modifiers() {
			return GetRuleContext<Declaration_modifiersContext>(0);
		}
		public Subscript_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSubscript_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSubscript_head(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_headContext subscript_head() {
		Subscript_headContext _localctx = new Subscript_headContext(Context, State);
		EnterRule(_localctx, 140, RULE_subscript_head);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 838;
				attributes();
				}
			}

			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
				{
				State = 841;
				declaration_modifiers();
				}
			}

			State = 844;
			Match(T__27);
			State = 845;
			parameter_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_resultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arrow_operatorContext arrow_operator() {
			return GetRuleContext<Arrow_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Subscript_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSubscript_result(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSubscript_result(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_resultContext subscript_result() {
		Subscript_resultContext _localctx = new Subscript_resultContext(Context, State);
		EnterRule(_localctx, 142, RULE_subscript_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			arrow_operator();
			State = 849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 848;
				attributes();
				}
				break;
			}
			State = 851;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_associated_type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_nameContext typealias_name() {
			return GetRuleContext<Typealias_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_clauseContext type_inheritance_clause() {
			return GetRuleContext<Type_inheritance_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typealias_assignmentContext typealias_assignment() {
			return GetRuleContext<Typealias_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		public Protocol_associated_type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_associated_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_associated_type_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_associated_type_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_associated_type_declarationContext protocol_associated_type_declaration() {
		Protocol_associated_type_declarationContext _localctx = new Protocol_associated_type_declarationContext(Context, State);
		EnterRule(_localctx, 144, RULE_protocol_associated_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 853;
				attributes();
				}
			}

			State = 857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49))) != 0)) {
				{
				State = 856;
				access_level_modifier();
				}
			}

			State = 859;
			Match(T__28);
			State = 860;
			typealias_name();
			State = 862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpColon) {
				{
				State = 861;
				type_inheritance_clause();
				}
			}

			State = 865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAssign) {
				{
				State = 864;
				typealias_assignment();
				}
			}

			State = 868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 867;
				generic_where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_headContext function_head() {
			return GetRuleContext<Function_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_signatureContext function_signature() {
			return GetRuleContext<Function_signatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 146, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			function_head();
			State = 871;
			function_name();
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLess) {
				{
				State = 872;
				generic_parameter_clause();
				}
			}

			State = 875;
			function_signature();
			State = 877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__63) {
				{
				State = 876;
				generic_where_clause();
				}
			}

			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpLBrace) {
				{
				State = 879;
				function_body();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifiersContext declaration_modifiers() {
			return GetRuleContext<Declaration_modifiersContext>(0);
		}
		public Function_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_head(this);
		}
	}

	[RuleVersion(0)]
	public Function_headContext function_head() {
		Function_headContext _localctx = new Function_headContext(Context, State);
		EnterRule(_localctx, 148, RULE_function_head);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 882;
				attributes();
				}
			}

			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
				{
				State = 885;
				declaration_modifiers();
				}
			}

			State = 888;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_nameContext operator_name() {
			return GetRuleContext<Operator_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 150, RULE_function_name);
		try {
			State = 892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case T__14:
			case T__16:
			case T__17:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__49:
			case T__50:
			case T__51:
			case T__54:
			case T__55:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 890;
				declaration_identifier();
				}
				break;
			case T__64:
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 891;
				operator_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DyckSubExpressionContext[] dyckSubExpression() {
			return GetRuleContexts<DyckSubExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DyckSubExpressionContext dyckSubExpression(int i) {
			return GetRuleContext<DyckSubExpressionContext>(i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 152, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(OpLBrace);
			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (Binary_literal - 64)) | (1L << (Octal_literal - 64)) | (1L << (Decimal_literal - 64)) | (1L << (Pure_decimal_digits - 64)) | (1L << (Hexadecimal_literal - 64)) | (1L << (Static_string_literal - 64)) | (1L << (Identifier - 64)) | (1L << (OpPlus - 64)) | (1L << (OpMinus - 64)) | (1L << (OpAssign - 64)) | (1L << (OpAmp - 64)) | (1L << (OpQuestion - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OpBang - 128)) | (1L << (OpDot - 128)) | (1L << (OpComma - 128)) | (1L << (OpTilde - 128)) | (1L << (OpColon - 128)) | (1L << (OpSemi - 128)) | (1L << (OpAt - 128)) | (1L << (OpPound - 128)) | (1L << (OpBackTick - 128)) | (1L << (OpUnder - 128)) | (1L << (OpLParen - 128)) | (1L << (OpLBracket - 128)) | (1L << (OpLBrace - 128)) | (1L << (Operator - 128)) | (1L << (OpGreater - 128)))) != 0)) {
				{
				{
				State = 895;
				dyckSubExpression();
				}
				}
				State = 900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 901;
			Match(OpRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public Operator_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterOperator_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitOperator_name(this);
		}
	}

	[RuleVersion(0)]
	public Operator_nameContext operator_name() {
		Operator_nameContext _localctx = new Operator_nameContext(Context, State);
		EnterRule(_localctx, 154, RULE_operator_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			@operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_signatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_clauseContext parameter_clause() {
			return GetRuleContext<Parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Async_clauseContext async_clause() {
			return GetRuleContext<Async_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throws_clauseContext throws_clause() {
			return GetRuleContext<Throws_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_resultContext function_result() {
			return GetRuleContext<Function_resultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rethrows_clauseContext rethrows_clause() {
			return GetRuleContext<Rethrows_clauseContext>(0);
		}
		public Function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_signature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_signature(this);
		}
	}

	[RuleVersion(0)]
	public Function_signatureContext function_signature() {
		Function_signatureContext _localctx = new Function_signatureContext(Context, State);
		EnterRule(_localctx, 156, RULE_function_signature);
		int _la;
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 905;
				parameter_clause();
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 906;
					async_clause();
					}
				}

				State = 910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 909;
					throws_clause();
					}
				}

				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__65) {
					{
					State = 912;
					function_result();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915;
				parameter_clause();
				State = 917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__29) {
					{
					State = 916;
					async_clause();
					}
				}

				State = 919;
				rethrows_clause();
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__65) {
					{
					State = 920;
					function_result();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Async_clauseContext : ParserRuleContext {
		public Async_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_async_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAsync_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAsync_clause(this);
		}
	}

	[RuleVersion(0)]
	public Async_clauseContext async_clause() {
		Async_clauseContext _localctx = new Async_clauseContext(Context, State);
		EnterRule(_localctx, 158, RULE_async_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_clauseContext : ParserRuleContext {
		public Throws_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterThrows_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitThrows_clause(this);
		}
	}

	[RuleVersion(0)]
	public Throws_clauseContext throws_clause() {
		Throws_clauseContext _localctx = new Throws_clauseContext(Context, State);
		EnterRule(_localctx, 160, RULE_throws_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rethrows_clauseContext : ParserRuleContext {
		public Rethrows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rethrows_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRethrows_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRethrows_clause(this);
		}
	}

	[RuleVersion(0)]
	public Rethrows_clauseContext rethrows_clause() {
		Rethrows_clauseContext _localctx = new Rethrows_clauseContext(Context, State);
		EnterRule(_localctx, 162, RULE_rethrows_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_resultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arrow_operatorContext arrow_operator() {
			return GetRuleContext<Arrow_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Function_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_result(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_result(this);
		}
	}

	[RuleVersion(0)]
	public Function_resultContext function_result() {
		Function_resultContext _localctx = new Function_resultContext(Context, State);
		EnterRule(_localctx, 164, RULE_function_result);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931;
			arrow_operator();
			State = 933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 932;
				attributes();
				}
				break;
			}
			State = 935;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Initializer_headContext initializer_head() {
			return GetRuleContext<Initializer_headContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_clauseContext parameter_clause() {
			return GetRuleContext<Parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_clauseContext generic_parameter_clause() {
			return GetRuleContext<Generic_parameter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Throws_clauseContext throws_clause() {
			return GetRuleContext<Throws_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_where_clauseContext generic_where_clause() {
			return GetRuleContext<Generic_where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rethrows_clauseContext rethrows_clause() {
			return GetRuleContext<Rethrows_clauseContext>(0);
		}
		public Initializer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterInitializer_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitInitializer_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_declarationContext initializer_declaration() {
		Initializer_declarationContext _localctx = new Initializer_declarationContext(Context, State);
		EnterRule(_localctx, 166, RULE_initializer_declaration);
		int _la;
		try {
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 937;
				initializer_head();
				State = 939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpLess) {
					{
					State = 938;
					generic_parameter_clause();
					}
				}

				State = 941;
				parameter_clause();
				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 942;
					throws_clause();
					}
				}

				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__63) {
					{
					State = 945;
					generic_where_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 948;
				initializer_head();
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpLess) {
					{
					State = 949;
					generic_parameter_clause();
					}
				}

				State = 952;
				parameter_clause();
				State = 953;
				rethrows_clause();
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__63) {
					{
					State = 954;
					generic_where_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_headContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifiersContext declaration_modifiers() {
			return GetRuleContext<Declaration_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpQuestion() { return GetToken(SwiftInterfaceParser.OpQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpBang() { return GetToken(SwiftInterfaceParser.OpBang, 0); }
		public Initializer_headContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_head; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterInitializer_head(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitInitializer_head(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_headContext initializer_head() {
		Initializer_headContext _localctx = new Initializer_headContext(Context, State);
		EnterRule(_localctx, 168, RULE_initializer_head);
		int _la;
		try {
			State = 982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 959;
					attributes();
					}
				}

				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
					{
					State = 962;
					declaration_modifiers();
					}
				}

				State = 965;
				Match(T__32);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 966;
					attributes();
					}
				}

				State = 970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
					{
					State = 969;
					declaration_modifiers();
					}
				}

				State = 972;
				Match(T__32);
				State = 973;
				Match(OpQuestion);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 974;
					attributes();
					}
				}

				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
					{
					State = 977;
					declaration_modifiers();
					}
				}

				State = 980;
				Match(T__32);
				State = 981;
				Match(OpBang);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deinitializer_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifiersContext declaration_modifiers() {
			return GetRuleContext<Declaration_modifiersContext>(0);
		}
		public Deinitializer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deinitializer_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDeinitializer_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDeinitializer_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Deinitializer_declarationContext deinitializer_declaration() {
		Deinitializer_declarationContext _localctx = new Deinitializer_declarationContext(Context, State);
		EnterRule(_localctx, 170, RULE_deinitializer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpAt) {
				{
				State = 984;
				attributes();
				}
			}

			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
				{
				State = 987;
				declaration_modifiers();
				}
			}

			State = 990;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public Parameter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterParameter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitParameter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_clauseContext parameter_clause() {
		Parameter_clauseContext _localctx = new Parameter_clauseContext(Context, State);
		EnterRule(_localctx, 172, RULE_parameter_clause);
		try {
			State = 998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 992;
				Match(OpLParen);
				State = 993;
				Match(OpRParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 994;
				Match(OpLParen);
				State = 995;
				parameter_list();
				State = 996;
				Match(OpRParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpComma() { return GetTokens(SwiftInterfaceParser.OpComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma(int i) {
			return GetToken(SwiftInterfaceParser.OpComma, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 174, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000;
			parameter();
			State = 1005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpComma) {
				{
				{
				State = 1001;
				Match(OpComma);
				State = 1002;
				parameter();
				}
				}
				State = 1007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_parameter_nameContext local_parameter_name() {
			return GetRuleContext<Local_parameter_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_annotationContext type_annotation() {
			return GetRuleContext<Type_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_parameter_nameContext external_parameter_name() {
			return GetRuleContext<External_parameter_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultInitializerContext defaultInitializer() {
			return GetRuleContext<DefaultInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_operatorContext range_operator() {
			return GetRuleContext<Range_operatorContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 176, RULE_parameter);
		int _la;
		try {
			State = 1023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 1008;
					external_parameter_name();
					}
					break;
				}
				State = 1011;
				local_parameter_name();
				State = 1012;
				type_annotation();
				State = 1014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAssign) {
					{
					State = 1013;
					defaultInitializer();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1017;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
				case 1:
					{
					State = 1016;
					external_parameter_name();
					}
					break;
				}
				State = 1019;
				local_parameter_name();
				State = 1020;
				type_annotation();
				State = 1021;
				range_operator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_parameter_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext label_identifier() {
			return GetRuleContext<Label_identifierContext>(0);
		}
		public External_parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_parameter_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterExternal_parameter_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitExternal_parameter_name(this);
		}
	}

	[RuleVersion(0)]
	public External_parameter_nameContext external_parameter_name() {
		External_parameter_nameContext _localctx = new External_parameter_nameContext(Context, State);
		EnterRule(_localctx, 178, RULE_external_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1025;
			label_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_parameter_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext label_identifier() {
			return GetRuleContext<Label_identifierContext>(0);
		}
		public Local_parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_parameter_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterLocal_parameter_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitLocal_parameter_name(this);
		}
	}

	[RuleVersion(0)]
	public Local_parameter_nameContext local_parameter_name() {
		Local_parameter_nameContext _localctx = new Local_parameter_nameContext(Context, State);
		EnterRule(_localctx, 180, RULE_local_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			label_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAssign() { return GetToken(SwiftInterfaceParser.OpAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DyckExpressionContext[] dyckExpression() {
			return GetRuleContexts<DyckExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DyckExpressionContext dyckExpression(int i) {
			return GetRuleContext<DyckExpressionContext>(i);
		}
		public DefaultInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDefaultInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDefaultInitializer(this);
		}
	}

	[RuleVersion(0)]
	public DefaultInitializerContext defaultInitializer() {
		DefaultInitializerContext _localctx = new DefaultInitializerContext(Context, State);
		EnterRule(_localctx, 182, RULE_defaultInitializer);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029;
			Match(OpAssign);
			State = 1031;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1030;
					dyckExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1033;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DyckExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DyckSubExpressionContext[] dyckSubExpression() {
			return GetRuleContexts<DyckSubExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DyckSubExpressionContext dyckSubExpression(int i) {
			return GetRuleContext<DyckSubExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBracket() { return GetToken(SwiftInterfaceParser.OpLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBracket() { return GetToken(SwiftInterfaceParser.OpRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext label_identifier() {
			return GetRuleContext<Label_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotSymbolContext dotSymbol() {
			return GetRuleContext<DotSymbolContext>(0);
		}
		public DyckExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dyckExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDyckExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDyckExpression(this);
		}
	}

	[RuleVersion(0)]
	public DyckExpressionContext dyckExpression() {
		DyckExpressionContext _localctx = new DyckExpressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_dyckExpression);
		int _la;
		try {
			State = 1063;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1035;
				Match(OpLParen);
				State = 1039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (Binary_literal - 64)) | (1L << (Octal_literal - 64)) | (1L << (Decimal_literal - 64)) | (1L << (Pure_decimal_digits - 64)) | (1L << (Hexadecimal_literal - 64)) | (1L << (Static_string_literal - 64)) | (1L << (Identifier - 64)) | (1L << (OpPlus - 64)) | (1L << (OpMinus - 64)) | (1L << (OpAssign - 64)) | (1L << (OpAmp - 64)) | (1L << (OpQuestion - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OpBang - 128)) | (1L << (OpDot - 128)) | (1L << (OpComma - 128)) | (1L << (OpTilde - 128)) | (1L << (OpColon - 128)) | (1L << (OpSemi - 128)) | (1L << (OpAt - 128)) | (1L << (OpPound - 128)) | (1L << (OpBackTick - 128)) | (1L << (OpUnder - 128)) | (1L << (OpLParen - 128)) | (1L << (OpLBracket - 128)) | (1L << (OpLBrace - 128)) | (1L << (Operator - 128)) | (1L << (OpGreater - 128)))) != 0)) {
					{
					{
					State = 1036;
					dyckSubExpression();
					}
					}
					State = 1041;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1042;
				Match(OpRParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1043;
				Match(OpLBracket);
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (Binary_literal - 64)) | (1L << (Octal_literal - 64)) | (1L << (Decimal_literal - 64)) | (1L << (Pure_decimal_digits - 64)) | (1L << (Hexadecimal_literal - 64)) | (1L << (Static_string_literal - 64)) | (1L << (Identifier - 64)) | (1L << (OpPlus - 64)) | (1L << (OpMinus - 64)) | (1L << (OpAssign - 64)) | (1L << (OpAmp - 64)) | (1L << (OpQuestion - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OpBang - 128)) | (1L << (OpDot - 128)) | (1L << (OpComma - 128)) | (1L << (OpTilde - 128)) | (1L << (OpColon - 128)) | (1L << (OpSemi - 128)) | (1L << (OpAt - 128)) | (1L << (OpPound - 128)) | (1L << (OpBackTick - 128)) | (1L << (OpUnder - 128)) | (1L << (OpLParen - 128)) | (1L << (OpLBracket - 128)) | (1L << (OpLBrace - 128)) | (1L << (Operator - 128)) | (1L << (OpGreater - 128)))) != 0)) {
					{
					{
					State = 1044;
					dyckSubExpression();
					}
					}
					State = 1049;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1050;
				Match(OpRBracket);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1051;
				Match(OpLBrace);
				State = 1055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (Binary_literal - 64)) | (1L << (Octal_literal - 64)) | (1L << (Decimal_literal - 64)) | (1L << (Pure_decimal_digits - 64)) | (1L << (Hexadecimal_literal - 64)) | (1L << (Static_string_literal - 64)) | (1L << (Identifier - 64)) | (1L << (OpPlus - 64)) | (1L << (OpMinus - 64)) | (1L << (OpAssign - 64)) | (1L << (OpAmp - 64)) | (1L << (OpQuestion - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OpBang - 128)) | (1L << (OpDot - 128)) | (1L << (OpComma - 128)) | (1L << (OpTilde - 128)) | (1L << (OpColon - 128)) | (1L << (OpSemi - 128)) | (1L << (OpAt - 128)) | (1L << (OpPound - 128)) | (1L << (OpBackTick - 128)) | (1L << (OpUnder - 128)) | (1L << (OpLParen - 128)) | (1L << (OpLBracket - 128)) | (1L << (OpLBrace - 128)) | (1L << (Operator - 128)) | (1L << (OpGreater - 128)))) != 0)) {
					{
					{
					State = 1052;
					dyckSubExpression();
					}
					}
					State = 1057;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1058;
				Match(OpRBrace);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1059;
				label_identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1060;
				literal();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1061;
				@operator();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1062;
				dotSymbol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DyckSubExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DyckExpressionContext dyckExpression() {
			return GetRuleContext<DyckExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_other_things_for_dyck_expressionContext any_other_things_for_dyck_expression() {
			return GetRuleContext<Any_other_things_for_dyck_expressionContext>(0);
		}
		public DyckSubExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dyckSubExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDyckSubExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDyckSubExpression(this);
		}
	}

	[RuleVersion(0)]
	public DyckSubExpressionContext dyckSubExpression() {
		DyckSubExpressionContext _localctx = new DyckSubExpressionContext(Context, State);
		EnterRule(_localctx, 186, RULE_dyckSubExpression);
		try {
			State = 1067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065;
				dyckExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066;
				any_other_things_for_dyck_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_other_things_for_dyck_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpSemi() { return GetToken(SwiftInterfaceParser.OpSemi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAssign() { return GetToken(SwiftInterfaceParser.OpAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAt() { return GetToken(SwiftInterfaceParser.OpAt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpPound() { return GetToken(SwiftInterfaceParser.OpPound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpBackTick() { return GetToken(SwiftInterfaceParser.OpBackTick, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpQuestion() { return GetToken(SwiftInterfaceParser.OpQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpUnder() { return GetToken(SwiftInterfaceParser.OpUnder, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpPlus() { return GetToken(SwiftInterfaceParser.OpPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpMinus() { return GetToken(SwiftInterfaceParser.OpMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAmp() { return GetToken(SwiftInterfaceParser.OpAmp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpBang() { return GetToken(SwiftInterfaceParser.OpBang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpTilde() { return GetToken(SwiftInterfaceParser.OpTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpGreater() { return GetToken(SwiftInterfaceParser.OpGreater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpGreaterContext opGreater() {
			return GetRuleContext<OpGreaterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arrow_operatorContext arrow_operator() {
			return GetRuleContext<Arrow_operatorContext>(0);
		}
		public Any_other_things_for_dyck_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_other_things_for_dyck_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAny_other_things_for_dyck_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAny_other_things_for_dyck_expression(this);
		}
	}

	[RuleVersion(0)]
	public Any_other_things_for_dyck_expressionContext any_other_things_for_dyck_expression() {
		Any_other_things_for_dyck_expressionContext _localctx = new Any_other_things_for_dyck_expressionContext(Context, State);
		EnterRule(_localctx, 188, RULE_any_other_things_for_dyck_expression);
		try {
			State = 1089;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
			case OpPlus:
			case OpMinus:
			case OpAssign:
			case OpAmp:
			case OpQuestion:
			case OpBang:
			case OpDot:
			case OpComma:
			case OpTilde:
			case OpColon:
			case OpSemi:
			case OpAt:
			case OpPound:
			case OpBackTick:
			case OpUnder:
			case OpGreater:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1086;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpDot:
					{
					State = 1069;
					Match(OpDot);
					}
					break;
				case OpComma:
					{
					State = 1070;
					Match(OpComma);
					}
					break;
				case OpColon:
					{
					State = 1071;
					Match(OpColon);
					}
					break;
				case OpSemi:
					{
					State = 1072;
					Match(OpSemi);
					}
					break;
				case OpAssign:
					{
					State = 1073;
					Match(OpAssign);
					}
					break;
				case OpAt:
					{
					State = 1074;
					Match(OpAt);
					}
					break;
				case OpPound:
					{
					State = 1075;
					Match(OpPound);
					}
					break;
				case OpBackTick:
					{
					State = 1076;
					Match(OpBackTick);
					}
					break;
				case OpQuestion:
					{
					State = 1077;
					Match(OpQuestion);
					}
					break;
				case OpUnder:
					{
					State = 1078;
					Match(OpUnder);
					}
					break;
				case OpPlus:
					{
					State = 1079;
					Match(OpPlus);
					}
					break;
				case OpMinus:
					{
					State = 1080;
					Match(OpMinus);
					}
					break;
				case OpAmp:
					{
					State = 1081;
					Match(OpAmp);
					}
					break;
				case OpBang:
					{
					State = 1082;
					Match(OpBang);
					}
					break;
				case OpTilde:
					{
					State = 1083;
					Match(OpTilde);
					}
					break;
				case OpGreater:
					{
					State = 1084;
					Match(OpGreater);
					}
					break;
				case T__64:
					{
					State = 1085;
					opGreater();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1088;
				arrow_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public DotSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDotSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDotSymbol(this);
		}
	}

	[RuleVersion(0)]
	public DotSymbolContext dotSymbol() {
		DotSymbolContext _localctx = new DotSymbolContext(Context, State);
		EnterRule(_localctx, 190, RULE_dotSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(OpDot);
			State = 1092;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SwiftInterfaceParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_as_identifier_in_declarationsContext keyword_as_identifier_in_declarations() {
			return GetRuleContext<Keyword_as_identifier_in_declarationsContext>(0);
		}
		public Declaration_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDeclaration_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDeclaration_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_identifierContext declaration_identifier() {
		Declaration_identifierContext _localctx = new Declaration_identifierContext(Context, State);
		EnterRule(_localctx, 192, RULE_declaration_identifier);
		try {
			State = 1096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1094;
				Match(Identifier);
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case T__14:
			case T__16:
			case T__17:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__49:
			case T__50:
			case T__51:
			case T__54:
			case T__55:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095;
				keyword_as_identifier_in_declarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_inheritance_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_requirementContext class_requirement() {
			return GetRuleContext<Class_requirementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_listContext type_inheritance_list() {
			return GetRuleContext<Type_inheritance_listContext>(0);
		}
		public Type_inheritance_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_inheritance_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterType_inheritance_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitType_inheritance_clause(this);
		}
	}

	[RuleVersion(0)]
	public Type_inheritance_clauseContext type_inheritance_clause() {
		Type_inheritance_clauseContext _localctx = new Type_inheritance_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_type_inheritance_clause);
		try {
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1098;
				Match(OpColon);
				State = 1099;
				class_requirement();
				State = 1100;
				Match(OpComma);
				State = 1101;
				type_inheritance_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1103;
				Match(OpColon);
				State = 1104;
				class_requirement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1105;
				Match(OpColon);
				State = 1106;
				type_inheritance_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_inheritance_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_inheritance_listContext type_inheritance_list() {
			return GetRuleContext<Type_inheritance_listContext>(0);
		}
		public Type_inheritance_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_inheritance_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterType_inheritance_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitType_inheritance_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_inheritance_listContext type_inheritance_list() {
		Type_inheritance_listContext _localctx = new Type_inheritance_listContext(Context, State);
		EnterRule(_localctx, 196, RULE_type_inheritance_list);
		try {
			State = 1114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1109;
				type_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1110;
				type_identifier();
				State = 1111;
				Match(OpComma);
				State = 1112;
				type_inheritance_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_requirementContext : ParserRuleContext {
		public Class_requirementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_requirement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterClass_requirement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitClass_requirement(this);
		}
	}

	[RuleVersion(0)]
	public Class_requirementContext class_requirement() {
		Class_requirementContext _localctx = new Class_requirementContext(Context, State);
		EnterRule(_localctx, 198, RULE_class_requirement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAt() { return GetToken(SwiftInterfaceParser.OpAt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_argument_clauseContext attribute_argument_clause() {
			return GetRuleContext<Attribute_argument_clauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 200, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(OpAt);
			State = 1119;
			attribute_name();
			State = 1121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1120;
				attribute_argument_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 202, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			type_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argument_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Balanced_tokensContext balanced_tokens() {
			return GetRuleContext<Balanced_tokensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		public Attribute_argument_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAttribute_argument_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAttribute_argument_clause(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argument_clauseContext attribute_argument_clause() {
		Attribute_argument_clauseContext _localctx = new Attribute_argument_clauseContext(Context, State);
		EnterRule(_localctx, 204, RULE_attribute_argument_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(OpLParen);
			State = 1126;
			balanced_tokens();
			State = 1127;
			Match(OpRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 206, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1129;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Balanced_tokensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Balanced_tokenContext[] balanced_token() {
			return GetRuleContexts<Balanced_tokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Balanced_tokenContext balanced_token(int i) {
			return GetRuleContext<Balanced_tokenContext>(i);
		}
		public Balanced_tokensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balanced_tokens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterBalanced_tokens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitBalanced_tokens(this);
		}
	}

	[RuleVersion(0)]
	public Balanced_tokensContext balanced_tokens() {
		Balanced_tokensContext _localctx = new Balanced_tokensContext(Context, State);
		EnterRule(_localctx, 208, RULE_balanced_tokens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (Binary_literal - 64)) | (1L << (Octal_literal - 64)) | (1L << (Decimal_literal - 64)) | (1L << (Pure_decimal_digits - 64)) | (1L << (Hexadecimal_literal - 64)) | (1L << (Static_string_literal - 64)) | (1L << (Identifier - 64)) | (1L << (OpPlus - 64)) | (1L << (OpMinus - 64)) | (1L << (OpAssign - 64)) | (1L << (OpQuestion - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (OpDot - 129)) | (1L << (OpComma - 129)) | (1L << (OpColon - 129)) | (1L << (OpSemi - 129)) | (1L << (OpAt - 129)) | (1L << (OpPound - 129)) | (1L << (OpBackTick - 129)) | (1L << (OpLParen - 129)) | (1L << (OpLBracket - 129)) | (1L << (OpLBrace - 129)) | (1L << (Operator - 129)))) != 0)) {
				{
				{
				State = 1134;
				balanced_token();
				}
				}
				State = 1139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Balanced_tokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Balanced_tokensContext balanced_tokens() {
			return GetRuleContext<Balanced_tokensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBracket() { return GetToken(SwiftInterfaceParser.OpLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBracket() { return GetToken(SwiftInterfaceParser.OpRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBrace() { return GetToken(SwiftInterfaceParser.OpLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBrace() { return GetToken(SwiftInterfaceParser.OpRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext label_identifier() {
			return GetRuleContext<Label_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_punctuation_for_balanced_tokenContext any_punctuation_for_balanced_token() {
			return GetRuleContext<Any_punctuation_for_balanced_tokenContext>(0);
		}
		public Balanced_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balanced_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterBalanced_token(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitBalanced_token(this);
		}
	}

	[RuleVersion(0)]
	public Balanced_tokenContext balanced_token() {
		Balanced_tokenContext _localctx = new Balanced_tokenContext(Context, State);
		EnterRule(_localctx, 210, RULE_balanced_token);
		try {
			State = 1156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1140;
				Match(OpLParen);
				State = 1141;
				balanced_tokens();
				State = 1142;
				Match(OpRParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1144;
				Match(OpLBracket);
				State = 1145;
				balanced_tokens();
				State = 1146;
				Match(OpRBracket);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1148;
				Match(OpLBrace);
				State = 1149;
				balanced_tokens();
				State = 1150;
				Match(OpRBrace);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1152;
				label_identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1153;
				literal();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1154;
				@operator();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1155;
				any_punctuation_for_balanced_token();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_punctuation_for_balanced_tokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpSemi() { return GetToken(SwiftInterfaceParser.OpSemi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAssign() { return GetToken(SwiftInterfaceParser.OpAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAt() { return GetToken(SwiftInterfaceParser.OpAt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpPound() { return GetToken(SwiftInterfaceParser.OpPound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpBackTick() { return GetToken(SwiftInterfaceParser.OpBackTick, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpQuestion() { return GetToken(SwiftInterfaceParser.OpQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arrow_operatorContext arrow_operator() {
			return GetRuleContext<Arrow_operatorContext>(0);
		}
		public Any_punctuation_for_balanced_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_punctuation_for_balanced_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAny_punctuation_for_balanced_token(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAny_punctuation_for_balanced_token(this);
		}
	}

	[RuleVersion(0)]
	public Any_punctuation_for_balanced_tokenContext any_punctuation_for_balanced_token() {
		Any_punctuation_for_balanced_tokenContext _localctx = new Any_punctuation_for_balanced_tokenContext(Context, State);
		EnterRule(_localctx, 212, RULE_any_punctuation_for_balanced_token);
		int _la;
		try {
			State = 1160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpAssign:
			case OpQuestion:
			case OpDot:
			case OpComma:
			case OpColon:
			case OpSemi:
			case OpAt:
			case OpPound:
			case OpBackTick:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1158;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & ((1L << (OpAssign - 124)) | (1L << (OpQuestion - 124)) | (1L << (OpDot - 124)) | (1L << (OpComma - 124)) | (1L << (OpColon - 124)) | (1L << (OpSemi - 124)) | (1L << (OpAt - 124)) | (1L << (OpPound - 124)) | (1L << (OpBackTick - 124)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1159;
				arrow_operator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_level_modifierContext access_level_modifier() {
			return GetRuleContext<Access_level_modifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mutation_modifierContext mutation_modifier() {
			return GetRuleContext<Mutation_modifierContext>(0);
		}
		public Declaration_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDeclaration_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDeclaration_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_modifierContext declaration_modifier() {
		Declaration_modifierContext _localctx = new Declaration_modifierContext(Context, State);
		EnterRule(_localctx, 214, RULE_declaration_modifier);
		try {
			State = 1186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1162;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1163;
				Match(T__34);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1164;
				Match(T__35);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1165;
				Match(T__13);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1166;
				Match(T__17);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1167;
				Match(T__36);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1168;
				Match(T__37);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1169;
				Match(T__38);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1170;
				Match(T__16);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1171;
				Match(T__14);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1172;
				Match(T__39);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1173;
				Match(T__40);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1174;
				Match(T__41);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1175;
				Match(T__41);
				State = 1176;
				Match(OpLParen);
				State = 1177;
				Match(T__42);
				State = 1178;
				Match(OpRParen);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1179;
				Match(T__41);
				State = 1180;
				Match(OpLParen);
				State = 1181;
				Match(T__43);
				State = 1182;
				Match(OpRParen);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1183;
				Match(T__44);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1184;
				access_level_modifier();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1185;
				mutation_modifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifierContext[] declaration_modifier() {
			return GetRuleContexts<Declaration_modifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_modifierContext declaration_modifier(int i) {
			return GetRuleContext<Declaration_modifierContext>(i);
		}
		public Declaration_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDeclaration_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDeclaration_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_modifiersContext declaration_modifiers() {
		Declaration_modifiersContext _localctx = new Declaration_modifiersContext(Context, State);
		EnterRule(_localctx, 216, RULE_declaration_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1188;
				declaration_modifier();
				}
				}
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_level_modifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		public Access_level_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_level_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAccess_level_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAccess_level_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Access_level_modifierContext access_level_modifier() {
		Access_level_modifierContext _localctx = new Access_level_modifierContext(Context, State);
		EnterRule(_localctx, 218, RULE_access_level_modifier);
		try {
			State = 1218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1193;
				Match(T__45);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1194;
				Match(T__45);
				State = 1195;
				Match(OpLParen);
				State = 1196;
				Match(T__10);
				State = 1197;
				Match(OpRParen);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1198;
				Match(T__46);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1199;
				Match(T__46);
				State = 1200;
				Match(OpLParen);
				State = 1201;
				Match(T__10);
				State = 1202;
				Match(OpRParen);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1203;
				Match(T__47);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1204;
				Match(T__47);
				State = 1205;
				Match(OpLParen);
				State = 1206;
				Match(T__10);
				State = 1207;
				Match(OpRParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1208;
				Match(T__48);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1209;
				Match(T__48);
				State = 1210;
				Match(OpLParen);
				State = 1211;
				Match(T__10);
				State = 1212;
				Match(OpRParen);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1213;
				Match(T__49);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1214;
				Match(T__49);
				State = 1215;
				Match(OpLParen);
				State = 1216;
				Match(T__10);
				State = 1217;
				Match(OpRParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mutation_modifierContext : ParserRuleContext {
		public Mutation_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mutation_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterMutation_modifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitMutation_modifier(this);
		}
	}

	[RuleVersion(0)]
	public Mutation_modifierContext mutation_modifier() {
		Mutation_modifierContext _localctx = new Mutation_modifierContext(Context, State);
		EnterRule(_localctx, 220, RULE_mutation_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			_la = TokenStream.LA(1);
			if ( !(_la==T__50 || _la==T__51) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_patternContext wildcard_pattern() {
			return GetRuleContext<Wildcard_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_annotationContext type_annotation() {
			return GetRuleContext<Type_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_patternContext identifier_pattern() {
			return GetRuleContext<Identifier_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		return pattern(0);
	}

	private PatternContext pattern(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PatternContext _localctx = new PatternContext(Context, _parentState);
		PatternContext _prevctx = _localctx;
		int _startState = 222;
		EnterRecursionRule(_localctx, 222, RULE_pattern, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpUnder:
				{
				State = 1223;
				wildcard_pattern();
				State = 1225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
				case 1:
					{
					State = 1224;
					type_annotation();
					}
					break;
				}
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__13:
			case T__14:
			case T__16:
			case T__17:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__49:
			case T__50:
			case T__51:
			case T__54:
			case T__55:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case Identifier:
				{
				State = 1227;
				identifier_pattern();
				State = 1229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
				case 1:
					{
					State = 1228;
					type_annotation();
					}
					break;
				}
				}
				break;
			case T__52:
				{
				State = 1231;
				Match(T__52);
				State = 1232;
				type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PatternContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_pattern);
					State = 1235;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1236;
					Match(T__53);
					State = 1237;
					type(0);
					}
					} 
				}
				State = 1242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Wildcard_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpUnder() { return GetToken(SwiftInterfaceParser.OpUnder, 0); }
		public Wildcard_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterWildcard_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitWildcard_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_patternContext wildcard_pattern() {
		Wildcard_patternContext _localctx = new Wildcard_patternContext(Context, State);
		EnterRule(_localctx, 224, RULE_wildcard_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243;
			Match(OpUnder);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Identifier_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterIdentifier_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitIdentifier_pattern(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_patternContext identifier_pattern() {
		Identifier_patternContext _localctx = new Identifier_patternContext(Context, State);
		EnterRule(_localctx, 226, RULE_identifier_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_type_argument_clauseContext function_type_argument_clause() {
			return GetRuleContext<Function_type_argument_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arrow_operatorContext arrow_operator() {
			return GetRuleContext<Arrow_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Function_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_type(this);
		}
	}

	[RuleVersion(0)]
	public Function_typeContext function_type() {
		Function_typeContext _localctx = new Function_typeContext(Context, State);
		EnterRule(_localctx, 228, RULE_function_type);
		int _la;
		try {
			State = 1265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 1247;
					attributes();
					}
				}

				State = 1250;
				function_type_argument_clause();
				State = 1252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 1251;
					Match(T__30);
					}
				}

				State = 1254;
				arrow_operator();
				State = 1255;
				type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpAt) {
					{
					State = 1257;
					attributes();
					}
				}

				State = 1260;
				function_type_argument_clause();
				State = 1261;
				Match(T__31);
				State = 1262;
				arrow_operator();
				State = 1263;
				type(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_type_argument_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_type_argument_listContext function_type_argument_list() {
			return GetRuleContext<Function_type_argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_operatorContext range_operator() {
			return GetRuleContext<Range_operatorContext>(0);
		}
		public Function_type_argument_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type_argument_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_type_argument_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_type_argument_clause(this);
		}
	}

	[RuleVersion(0)]
	public Function_type_argument_clauseContext function_type_argument_clause() {
		Function_type_argument_clauseContext _localctx = new Function_type_argument_clauseContext(Context, State);
		EnterRule(_localctx, 230, RULE_function_type_argument_clause);
		int _la;
		try {
			State = 1276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1267;
				Match(OpLParen);
				State = 1268;
				Match(OpRParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1269;
				Match(OpLParen);
				State = 1270;
				function_type_argument_list();
				State = 1272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__66) {
					{
					State = 1271;
					range_operator();
					}
				}

				State = 1274;
				Match(OpRParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_type_argumentContext function_type_argument() {
			return GetRuleContext<Function_type_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_type_argument_listContext function_type_argument_list() {
			return GetRuleContext<Function_type_argument_listContext>(0);
		}
		public Function_type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_type_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_type_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_type_argument_listContext function_type_argument_list() {
		Function_type_argument_listContext _localctx = new Function_type_argument_listContext(Context, State);
		EnterRule(_localctx, 232, RULE_function_type_argument_list);
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1278;
				function_type_argument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1279;
				function_type_argument();
				State = 1280;
				Match(OpComma);
				State = 1281;
				function_type_argument_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_type_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inout_clauseContext inout_clause() {
			return GetRuleContext<Inout_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_labelContext argument_label() {
			return GetRuleContext<Argument_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_annotationContext type_annotation() {
			return GetRuleContext<Type_annotationContext>(0);
		}
		public Function_type_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunction_type_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunction_type_argument(this);
		}
	}

	[RuleVersion(0)]
	public Function_type_argumentContext function_type_argument() {
		Function_type_argumentContext _localctx = new Function_type_argumentContext(Context, State);
		EnterRule(_localctx, 234, RULE_function_type_argument);
		int _la;
		try {
			State = 1295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
				case 1:
					{
					State = 1285;
					attributes();
					}
					break;
				}
				State = 1289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__59) {
					{
					State = 1288;
					inout_clause();
					}
				}

				State = 1291;
				type(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1292;
				argument_label();
				State = 1293;
				type_annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext[] label_identifier() {
			return GetRuleContexts<Label_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext label_identifier(int i) {
			return GetRuleContext<Label_identifierContext>(i);
		}
		public Argument_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterArgument_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitArgument_label(this);
		}
	}

	[RuleVersion(0)]
	public Argument_labelContext argument_label() {
		Argument_labelContext _localctx = new Argument_labelContext(Context, State);
		EnterRule(_localctx, 236, RULE_argument_label);
		try {
			State = 1301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1297;
				label_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1298;
				label_identifier();
				State = 1299;
				label_identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Dict_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dictionary_typeContext dictionary_type() {
			return GetRuleContext<Dictionary_typeContext>(0);
		}
		public Dict_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDict_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDict_type(this);
		}
	}
	public partial class Any_typeContext : TypeContext {
		public Any_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAny_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAny_type(this);
		}
	}
	public partial class Identifier_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Identifier_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterIdentifier_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitIdentifier_type(this);
		}
	}
	public partial class Func_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_typeContext function_type() {
			return GetRuleContext<Function_typeContext>(0);
		}
		public Func_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitFunc_type(this);
		}
	}
	public partial class Arr_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Arr_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterArr_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitArr_type(this);
		}
	}
	public partial class Meta_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		public Meta_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterMeta_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitMeta_type(this);
		}
	}
	public partial class Boxed_protocol_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_clauseContext any_clause() {
			return GetRuleContext<Any_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Boxed_protocol_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterBoxed_protocol_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitBoxed_protocol_type(this);
		}
	}
	public partial class Optional_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpQuestion() { return GetToken(SwiftInterfaceParser.OpQuestion, 0); }
		public Optional_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterOptional_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitOptional_type(this);
		}
	}
	public partial class Self_typeContext : TypeContext {
		public Self_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSelf_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSelf_type(this);
		}
	}
	public partial class Unwrapped_optional_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpBang() { return GetToken(SwiftInterfaceParser.OpBang, 0); }
		public Unwrapped_optional_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterUnwrapped_optional_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitUnwrapped_optional_type(this);
		}
	}
	public partial class Proto_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		public Proto_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProto_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProto_type(this);
		}
	}
	public partial class Tup_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		public Tup_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTup_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTup_type(this);
		}
	}
	public partial class Self_longContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Self_longContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSelf_long(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSelf_long(this);
		}
	}
	public partial class Proto_comp_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_composition_typeContext protocol_composition_type() {
			return GetRuleContext<Protocol_composition_typeContext>(0);
		}
		public Proto_comp_typeContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProto_comp_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProto_comp_type(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 238;
		EnterRecursionRule(_localctx, 238, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				_localctx = new Arr_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1304;
				array_type();
				}
				break;
			case 2:
				{
				_localctx = new Dict_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1305;
				dictionary_type();
				}
				break;
			case 3:
				{
				_localctx = new Func_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1306;
				function_type();
				}
				break;
			case 4:
				{
				_localctx = new Identifier_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1307;
				type_identifier();
				}
				break;
			case 5:
				{
				_localctx = new Tup_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1308;
				tuple_type();
				}
				break;
			case 6:
				{
				_localctx = new Proto_comp_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1309;
				protocol_composition_type();
				}
				break;
			case 7:
				{
				_localctx = new Boxed_protocol_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1310;
				any_clause();
				State = 1311;
				type(4);
				}
				break;
			case 8:
				{
				_localctx = new Any_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1313;
				Match(T__56);
				}
				break;
			case 9:
				{
				_localctx = new Self_typeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1314;
				Match(T__57);
				}
				break;
			case 10:
				{
				_localctx = new Self_longContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1315;
				Match(T__57);
				State = 1316;
				Match(OpDot);
				State = 1317;
				type_identifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1330;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
					case 1:
						{
						_localctx = new Optional_typeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 1320;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1321;
						Match(OpQuestion);
						}
						break;
					case 2:
						{
						_localctx = new Unwrapped_optional_typeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 1322;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1323;
						Match(OpBang);
						}
						break;
					case 3:
						{
						_localctx = new Meta_typeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 1324;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1325;
						Match(OpDot);
						State = 1326;
						Match(T__54);
						}
						break;
					case 4:
						{
						_localctx = new Proto_typeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 1327;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1328;
						Match(OpDot);
						State = 1329;
						Match(T__55);
						}
						break;
					}
					} 
				}
				State = 1334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Type_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inout_clauseContext inout_clause() {
			return GetRuleContext<Inout_clauseContext>(0);
		}
		public Type_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterType_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitType_annotation(this);
		}
	}

	[RuleVersion(0)]
	public Type_annotationContext type_annotation() {
		Type_annotationContext _localctx = new Type_annotationContext(Context, State);
		EnterRule(_localctx, 240, RULE_type_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			Match(OpColon);
			State = 1337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 1336;
				attributes();
				}
				break;
			}
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__59) {
				{
				State = 1339;
				inout_clause();
				}
			}

			State = 1342;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_clauseContext : ParserRuleContext {
		public Any_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterAny_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitAny_clause(this);
		}
	}

	[RuleVersion(0)]
	public Any_clauseContext any_clause() {
		Any_clauseContext _localctx = new Any_clauseContext(Context, State);
		EnterRule(_localctx, 242, RULE_any_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344;
			Match(T__58);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inout_clauseContext : ParserRuleContext {
		public Inout_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inout_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterInout_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitInout_clause(this);
		}
	}

	[RuleVersion(0)]
	public Inout_clauseContext inout_clause() {
		Inout_clauseContext _localctx = new Inout_clauseContext(Context, State);
		EnterRule(_localctx, 244, RULE_inout_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346;
			Match(T__59);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_argument_clauseContext generic_argument_clause() {
			return GetRuleContext<Generic_argument_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpDot() { return GetToken(SwiftInterfaceParser.OpDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Type_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterType_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitType_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Type_identifierContext type_identifier() {
		Type_identifierContext _localctx = new Type_identifierContext(Context, State);
		EnterRule(_localctx, 246, RULE_type_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			type_name();
			State = 1350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 1349;
				generic_argument_clause();
				}
				break;
			}
			State = 1354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1352;
				Match(OpDot);
				State = 1353;
				type_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_identifierContext declaration_identifier() {
			return GetRuleContext<Declaration_identifierContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 248, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356;
			declaration_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLParen() { return GetToken(SwiftInterfaceParser.OpLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRParen() { return GetToken(SwiftInterfaceParser.OpRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_type_element_listContext tuple_type_element_list() {
			return GetRuleContext<Tuple_type_element_listContext>(0);
		}
		public Tuple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTuple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTuple_type(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_typeContext tuple_type() {
		Tuple_typeContext _localctx = new Tuple_typeContext(Context, State);
		EnterRule(_localctx, 250, RULE_tuple_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			Match(OpLParen);
			State = 1360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (Identifier - 64)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (OpAt - 134)) | (1L << (OpLParen - 134)) | (1L << (OpLBracket - 134)))) != 0)) {
				{
				State = 1359;
				tuple_type_element_list();
				}
			}

			State = 1362;
			Match(OpRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_type_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_type_elementContext tuple_type_element() {
			return GetRuleContext<Tuple_type_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma() { return GetToken(SwiftInterfaceParser.OpComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_type_element_listContext tuple_type_element_list() {
			return GetRuleContext<Tuple_type_element_listContext>(0);
		}
		public Tuple_type_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTuple_type_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTuple_type_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_type_element_listContext tuple_type_element_list() {
		Tuple_type_element_listContext _localctx = new Tuple_type_element_listContext(Context, State);
		EnterRule(_localctx, 252, RULE_tuple_type_element_list);
		try {
			State = 1369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1364;
				tuple_type_element();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1365;
				tuple_type_element();
				State = 1366;
				Match(OpComma);
				State = 1367;
				tuple_type_element_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_type_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Element_nameContext element_name() {
			return GetRuleContext<Element_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_annotationContext type_annotation() {
			return GetRuleContext<Type_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Tuple_type_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterTuple_type_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitTuple_type_element(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_type_elementContext tuple_type_element() {
		Tuple_type_elementContext _localctx = new Tuple_type_elementContext(Context, State);
		EnterRule(_localctx, 254, RULE_tuple_type_element);
		try {
			State = 1375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1371;
				element_name();
				State = 1372;
				type_annotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1374;
				type(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_identifierContext label_identifier() {
			return GetRuleContext<Label_identifierContext>(0);
		}
		public Element_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterElement_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitElement_name(this);
		}
	}

	[RuleVersion(0)]
	public Element_nameContext element_name() {
		Element_nameContext _localctx = new Element_nameContext(Context, State);
		EnterRule(_localctx, 256, RULE_element_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377;
			label_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBracket() { return GetToken(SwiftInterfaceParser.OpLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBracket() { return GetToken(SwiftInterfaceParser.OpRBracket, 0); }
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 258, RULE_array_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			Match(OpLBracket);
			State = 1380;
			type(0);
			State = 1381;
			Match(OpRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLBracket() { return GetToken(SwiftInterfaceParser.OpLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpRBracket() { return GetToken(SwiftInterfaceParser.OpRBracket, 0); }
		public Dictionary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterDictionary_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitDictionary_type(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_typeContext dictionary_type() {
		Dictionary_typeContext _localctx = new Dictionary_typeContext(Context, State);
		EnterRule(_localctx, 260, RULE_dictionary_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383;
			Match(OpLBracket);
			State = 1384;
			type(0);
			State = 1385;
			Match(OpColon);
			State = 1386;
			type(0);
			State = 1387;
			Match(OpRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_composition_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_identifierContext[] protocol_identifier() {
			return GetRuleContexts<Protocol_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_identifierContext protocol_identifier(int i) {
			return GetRuleContext<Protocol_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpAmp() { return GetTokens(SwiftInterfaceParser.OpAmp); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpAmp(int i) {
			return GetToken(SwiftInterfaceParser.OpAmp, i);
		}
		public Protocol_composition_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_composition_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_composition_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_composition_type(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_composition_typeContext protocol_composition_type() {
		Protocol_composition_typeContext _localctx = new Protocol_composition_typeContext(Context, State);
		EnterRule(_localctx, 262, RULE_protocol_composition_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389;
			protocol_identifier();
			State = 1392;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1390;
					Match(OpAmp);
					State = 1391;
					protocol_identifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protocol_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		public Protocol_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protocol_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterProtocol_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitProtocol_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Protocol_identifierContext protocol_identifier() {
		Protocol_identifierContext _localctx = new Protocol_identifierContext(Context, State);
		EnterRule(_localctx, 264, RULE_protocol_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			type_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nil_literalContext nil_literal() {
			return GetRuleContext<Nil_literalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 266, RULE_literal);
		try {
			State = 1402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Binary_literal:
			case Octal_literal:
			case Decimal_literal:
			case Pure_decimal_digits:
			case Hexadecimal_literal:
			case OpPlus:
			case OpMinus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1398;
				numeric_literal();
				}
				break;
			case Static_string_literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1399;
				string_literal();
				}
				break;
			case T__61:
			case T__62:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1400;
				boolean_literal();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1401;
				nil_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nil_literalContext : ParserRuleContext {
		public Nil_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nil_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterNil_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitNil_literal(this);
		}
	}

	[RuleVersion(0)]
	public Nil_literalContext nil_literal() {
		Nil_literalContext _localctx = new Nil_literalContext(Context, State);
		EnterRule(_localctx, 268, RULE_nil_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			Match(T__60);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 270, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1406;
			_la = TokenStream.LA(1);
			if ( !(_la==T__61 || _la==T__62) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_literalContext integer_literal() {
			return GetRuleContext<Integer_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpPlus() { return GetToken(SwiftInterfaceParser.OpPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpMinus() { return GetToken(SwiftInterfaceParser.OpMinus, 0); }
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 272, RULE_numeric_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpPlus || _la==OpMinus) {
				{
				State = 1408;
				_la = TokenStream.LA(1);
				if ( !(_la==OpPlus || _la==OpMinus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1411;
			integer_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary_literal() { return GetToken(SwiftInterfaceParser.Binary_literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Octal_literal() { return GetToken(SwiftInterfaceParser.Octal_literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal_literal() { return GetToken(SwiftInterfaceParser.Decimal_literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pure_decimal_digits() { return GetToken(SwiftInterfaceParser.Pure_decimal_digits, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hexadecimal_literal() { return GetToken(SwiftInterfaceParser.Hexadecimal_literal, 0); }
		public Integer_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterInteger_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitInteger_literal(this);
		}
	}

	[RuleVersion(0)]
	public Integer_literalContext integer_literal() {
		Integer_literalContext _localctx = new Integer_literalContext(Context, State);
		EnterRule(_localctx, 274, RULE_integer_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (Binary_literal - 113)) | (1L << (Octal_literal - 113)) | (1L << (Decimal_literal - 113)) | (1L << (Pure_decimal_digits - 113)) | (1L << (Hexadecimal_literal - 113)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static_string_literal() { return GetToken(SwiftInterfaceParser.Static_string_literal, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 276, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415;
			Match(Static_string_literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SwiftInterfaceParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_as_identifier_in_labelsContext keyword_as_identifier_in_labels() {
			return GetRuleContext<Keyword_as_identifier_in_labelsContext>(0);
		}
		public Label_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterLabel_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitLabel_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Label_identifierContext label_identifier() {
		Label_identifierContext _localctx = new Label_identifierContext(Context, State);
		EnterRule(_localctx, 278, RULE_label_identifier);
		try {
			State = 1419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1417;
				Match(Identifier);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__7:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case T__82:
			case T__83:
			case T__84:
			case T__85:
			case T__86:
			case T__87:
			case T__88:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case T__98:
			case T__99:
			case T__100:
			case T__101:
			case T__102:
			case T__103:
			case T__104:
			case T__105:
			case T__106:
			case T__107:
			case T__108:
			case T__109:
			case T__110:
			case T__111:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1418;
				keyword_as_identifier_in_labels();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLess() { return GetToken(SwiftInterfaceParser.OpLess, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameter_listContext generic_parameter_list() {
			return GetRuleContext<Generic_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpGreaterContext opGreater() {
			return GetRuleContext<OpGreaterContext>(0);
		}
		public Generic_parameter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_clauseContext generic_parameter_clause() {
		Generic_parameter_clauseContext _localctx = new Generic_parameter_clauseContext(Context, State);
		EnterRule(_localctx, 280, RULE_generic_parameter_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			Match(OpLess);
			State = 1422;
			generic_parameter_list();
			State = 1423;
			opGreater();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameterContext[] generic_parameter() {
			return GetRuleContexts<Generic_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_parameterContext generic_parameter(int i) {
			return GetRuleContext<Generic_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpComma() { return GetTokens(SwiftInterfaceParser.OpComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma(int i) {
			return GetToken(SwiftInterfaceParser.OpComma, i);
		}
		public Generic_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameter_listContext generic_parameter_list() {
		Generic_parameter_listContext _localctx = new Generic_parameter_listContext(Context, State);
		EnterRule(_localctx, 282, RULE_generic_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			generic_parameter();
			State = 1430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpComma) {
				{
				{
				State = 1426;
				Match(OpComma);
				State = 1427;
				generic_parameter();
				}
				}
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_composition_typeContext protocol_composition_type() {
			return GetRuleContext<Protocol_composition_typeContext>(0);
		}
		public Generic_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parameterContext generic_parameter() {
		Generic_parameterContext _localctx = new Generic_parameterContext(Context, State);
		EnterRule(_localctx, 284, RULE_generic_parameter);
		try {
			State = 1442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1433;
				type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1434;
				type_name();
				State = 1435;
				Match(OpColon);
				State = 1436;
				type_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1438;
				type_name();
				State = 1439;
				Match(OpColon);
				State = 1440;
				protocol_composition_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Requirement_listContext requirement_list() {
			return GetRuleContext<Requirement_listContext>(0);
		}
		public Generic_where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_where_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_where_clause(this);
		}
	}

	[RuleVersion(0)]
	public Generic_where_clauseContext generic_where_clause() {
		Generic_where_clauseContext _localctx = new Generic_where_clauseContext(Context, State);
		EnterRule(_localctx, 286, RULE_generic_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1444;
			Match(T__63);
			State = 1445;
			requirement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Requirement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequirementContext[] requirement() {
			return GetRuleContexts<RequirementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequirementContext requirement(int i) {
			return GetRuleContext<RequirementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpComma() { return GetTokens(SwiftInterfaceParser.OpComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma(int i) {
			return GetToken(SwiftInterfaceParser.OpComma, i);
		}
		public Requirement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requirement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRequirement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRequirement_list(this);
		}
	}

	[RuleVersion(0)]
	public Requirement_listContext requirement_list() {
		Requirement_listContext _localctx = new Requirement_listContext(Context, State);
		EnterRule(_localctx, 288, RULE_requirement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			requirement();
			State = 1452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpComma) {
				{
				{
				State = 1448;
				Match(OpComma);
				State = 1449;
				requirement();
				}
				}
				State = 1454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequirementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conformance_requirementContext conformance_requirement() {
			return GetRuleContext<Conformance_requirementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Same_type_requirementContext same_type_requirement() {
			return GetRuleContext<Same_type_requirementContext>(0);
		}
		public RequirementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requirement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRequirement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRequirement(this);
		}
	}

	[RuleVersion(0)]
	public RequirementContext requirement() {
		RequirementContext _localctx = new RequirementContext(Context, State);
		EnterRule(_localctx, 290, RULE_requirement);
		try {
			State = 1457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1455;
				conformance_requirement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1456;
				same_type_requirement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conformance_requirementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext[] type_identifier() {
			return GetRuleContexts<Type_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier(int i) {
			return GetRuleContext<Type_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpColon() { return GetToken(SwiftInterfaceParser.OpColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Protocol_composition_typeContext protocol_composition_type() {
			return GetRuleContext<Protocol_composition_typeContext>(0);
		}
		public Conformance_requirementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conformance_requirement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterConformance_requirement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitConformance_requirement(this);
		}
	}

	[RuleVersion(0)]
	public Conformance_requirementContext conformance_requirement() {
		Conformance_requirementContext _localctx = new Conformance_requirementContext(Context, State);
		EnterRule(_localctx, 292, RULE_conformance_requirement);
		try {
			State = 1467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1459;
				type_identifier();
				State = 1460;
				Match(OpColon);
				State = 1461;
				type_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1463;
				type_identifier();
				State = 1464;
				Match(OpColon);
				State = 1465;
				protocol_composition_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Same_type_requirementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_identifierContext type_identifier() {
			return GetRuleContext<Type_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Same_type_requirementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_same_type_requirement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterSame_type_requirement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitSame_type_requirement(this);
		}
	}

	[RuleVersion(0)]
	public Same_type_requirementContext same_type_requirement() {
		Same_type_requirementContext _localctx = new Same_type_requirementContext(Context, State);
		EnterRule(_localctx, 294, RULE_same_type_requirement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1469;
			type_identifier();
			State = 1470;
			@operator();
			State = 1471;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_argument_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpLess() { return GetToken(SwiftInterfaceParser.OpLess, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_argument_listContext generic_argument_list() {
			return GetRuleContext<Generic_argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpGreaterContext opGreater() {
			return GetRuleContext<OpGreaterContext>(0);
		}
		public Generic_argument_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_argument_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_argument_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_argument_clause(this);
		}
	}

	[RuleVersion(0)]
	public Generic_argument_clauseContext generic_argument_clause() {
		Generic_argument_clauseContext _localctx = new Generic_argument_clauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_generic_argument_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473;
			Match(OpLess);
			State = 1474;
			generic_argument_list();
			State = 1475;
			opGreater();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_argumentContext[] generic_argument() {
			return GetRuleContexts<Generic_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_argumentContext generic_argument(int i) {
			return GetRuleContext<Generic_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpComma() { return GetTokens(SwiftInterfaceParser.OpComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpComma(int i) {
			return GetToken(SwiftInterfaceParser.OpComma, i);
		}
		public Generic_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_argument_listContext generic_argument_list() {
		Generic_argument_listContext _localctx = new Generic_argument_listContext(Context, State);
		EnterRule(_localctx, 298, RULE_generic_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477;
			generic_argument();
			State = 1482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OpComma) {
				{
				{
				State = 1478;
				Match(OpComma);
				State = 1479;
				generic_argument();
				}
				}
				State = 1484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Generic_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterGeneric_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitGeneric_argument(this);
		}
	}

	[RuleVersion(0)]
	public Generic_argumentContext generic_argument() {
		Generic_argumentContext _localctx = new Generic_argumentContext(Context, State);
		EnterRule(_localctx, 300, RULE_generic_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1485;
			type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpGreaterContext : ParserRuleContext {
		public OpGreaterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opGreater; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterOpGreater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitOpGreater(this);
		}
	}

	[RuleVersion(0)]
	public OpGreaterContext opGreater() {
		OpGreaterContext _localctx = new OpGreaterContext(Context, State);
		EnterRule(_localctx, 302, RULE_opGreater);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1487;
			Match(T__64);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arrow_operatorContext : ParserRuleContext {
		public Arrow_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrow_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterArrow_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitArrow_operator(this);
		}
	}

	[RuleVersion(0)]
	public Arrow_operatorContext arrow_operator() {
		Arrow_operatorContext _localctx = new Arrow_operatorContext(Context, State);
		EnterRule(_localctx, 304, RULE_arrow_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489;
			Match(T__65);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_operatorContext : ParserRuleContext {
		public Range_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterRange_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitRange_operator(this);
		}
	}

	[RuleVersion(0)]
	public Range_operatorContext range_operator() {
		Range_operatorContext _localctx = new Range_operatorContext(Context, State);
		EnterRule(_localctx, 306, RULE_range_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491;
			Match(T__66);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_as_identifier_in_declarationsContext : ParserRuleContext {
		public Keyword_as_identifier_in_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_as_identifier_in_declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterKeyword_as_identifier_in_declarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitKeyword_as_identifier_in_declarations(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_as_identifier_in_declarationsContext keyword_as_identifier_in_declarations() {
		Keyword_as_identifier_in_declarationsContext _localctx = new Keyword_as_identifier_in_declarationsContext(Context, State);
		EnterRule(_localctx, 308, RULE_keyword_as_identifier_in_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__54) | (1L << T__55))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (T__67 - 68)) | (1L << (T__68 - 68)) | (1L << (T__69 - 68)) | (1L << (T__70 - 68)) | (1L << (T__71 - 68)) | (1L << (T__72 - 68)) | (1L << (T__73 - 68)) | (1L << (T__74 - 68)) | (1L << (T__75 - 68)) | (1L << (T__76 - 68)) | (1L << (T__77 - 68)) | (1L << (T__78 - 68)) | (1L << (T__79 - 68)) | (1L << (T__80 - 68)) | (1L << (T__81 - 68)) | (1L << (T__82 - 68)) | (1L << (T__83 - 68)) | (1L << (T__84 - 68)) | (1L << (T__85 - 68)) | (1L << (T__86 - 68)) | (1L << (T__87 - 68)) | (1L << (T__88 - 68)) | (1L << (T__89 - 68)) | (1L << (T__90 - 68)) | (1L << (T__91 - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_as_identifier_in_labelsContext : ParserRuleContext {
		public Keyword_as_identifier_in_labelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_as_identifier_in_labels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterKeyword_as_identifier_in_labels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitKeyword_as_identifier_in_labels(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_as_identifier_in_labelsContext keyword_as_identifier_in_labels() {
		Keyword_as_identifier_in_labelsContext _localctx = new Keyword_as_identifier_in_labelsContext(Context, State);
		EnterRule(_localctx, 310, RULE_keyword_as_identifier_in_labels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_anglesContext operator_angles() {
			return GetRuleContext<Operator_anglesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(SwiftInterfaceParser.Operator, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 312, RULE_operator);
		try {
			State = 1499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1497;
				operator_angles();
				}
				break;
			case Operator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1498;
				Match(Operator);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_anglesContext : ParserRuleContext {
		public Operator_anglesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_angles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.EnterOperator_angles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISwiftInterfaceListener typedListener = listener as ISwiftInterfaceListener;
			if (typedListener != null) typedListener.ExitOperator_angles(this);
		}
	}

	[RuleVersion(0)]
	public Operator_anglesContext operator_angles() {
		Operator_anglesContext _localctx = new Operator_anglesContext(Context, State);
		EnterRule(_localctx, 314, RULE_operator_angles);
		try {
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1501;
				Match(T__64);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1502;
				Match(T__64);
				State = 1503;
				Match(T__64);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1504;
				Match(T__64);
				State = 1505;
				Match(T__64);
				State = 1506;
				Match(T__64);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1507;
				Match(T__64);
				State = 1508;
				Match(T__64);
				State = 1509;
				Match(T__64);
				State = 1510;
				Match(T__64);
				State = 1511;
				Match(T__64);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1512;
				Match(T__64);
				State = 1513;
				Match(T__64);
				State = 1514;
				Match(T__64);
				State = 1515;
				Match(T__64);
				State = 1516;
				Match(T__64);
				State = 1517;
				Match(T__64);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1518;
				Match(T__64);
				State = 1519;
				Match(T__64);
				State = 1520;
				Match(T__64);
				State = 1521;
				Match(T__64);
				State = 1522;
				Match(T__64);
				State = 1523;
				Match(T__64);
				State = 1524;
				Match(T__64);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1525;
				Match(T__64);
				State = 1526;
				Match(T__64);
				State = 1527;
				Match(T__64);
				State = 1528;
				Match(T__64);
				State = 1529;
				Match(T__64);
				State = 1530;
				Match(T__64);
				State = 1531;
				Match(T__64);
				State = 1532;
				Match(T__64);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 111: return pattern_sempred((PatternContext)_localctx, predIndex);
		case 119: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool pattern_sempred(PatternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x98', '\x602', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x3', '\x2', '\a', '\x2', 
		'\x140', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x143', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x148', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x157', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x166', 
		'\n', '\x6', '\x3', '\a', '\x5', '\a', '\x169', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x16D', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x176', '\n', '\t', '\f', '\t', '\xE', '\t', '\x179', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x181', '\n', '\v', '\f', '\v', '\xE', '\v', '\x184', 
		'\v', '\v', '\x3', '\f', '\x5', '\f', '\x187', '\n', '\f', '\x3', '\f', 
		'\x5', '\f', '\x18A', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x18E', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x191', '\n', '\f', '\x3', 
		'\f', '\x5', '\f', '\x194', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x199', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x19E', '\n', '\r', '\x5', '\r', '\x1A0', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x1B6', '\n', '\x11', '\x3', '\x12', '\x5', '\x12', '\x1B9', 
		'\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1BC', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x1C0', '\n', '\x12', '\x3', '\x13', 
		'\x5', '\x13', '\x1C3', '\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x1C6', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x1CA', '\n', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x1CD', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x1D4', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x5', 
		'\x15', '\x1D9', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1DC', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x1E1', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x5', 
		'\x18', '\x1EB', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1EE', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1F2', '\n', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x1F5', '\n', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x1F8', '\n', '\x18', '\x3', '\x19', '\x5', '\x19', '\x1FB', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x200', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', '\x203', '\n', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x206', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x20A', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x210', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x214', '\n', '\x1B', '\x3', '\x1C', 
		'\x5', '\x1C', '\x217', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x21A', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x224', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x228', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x5', '!', '\x231', '\n', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x235', '\n', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x23D', '\n', 
		'\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x241', '\n', '#', '\x3', '$', 
		'\x5', '$', '\x244', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x24E', 
		'\n', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x252', '\n', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x25A', '\n', '(', '\x3', ')', '\x5', ')', '\x25D', '\n', ')', '\x3', 
		')', '\x5', ')', '\x260', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x265', '\n', ')', '\x3', ')', '\x5', ')', '\x268', '\n', 
		')', '\x3', ')', '\x5', ')', '\x26B', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\a', '+', '\x273', '\n', 
		'+', '\f', '+', '\xE', '+', '\x276', '\v', '+', '\x3', '+', '\x3', '+', 
		'\x3', ',', '\x3', ',', '\x3', '-', '\x5', '-', '\x27D', '\n', '-', '\x3', 
		'-', '\x5', '-', '\x280', '\n', '-', '\x3', '-', '\x5', '-', '\x283', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x288', '\n', 
		'-', '\x3', '-', '\x5', '-', '\x28B', '\n', '-', '\x3', '-', '\x5', '-', 
		'\x28E', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x293', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x297', '\n', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x29C', '\n', '-', '\x3', '-', 
		'\x5', '-', '\x29F', '\n', '-', '\x3', '-', '\x5', '-', '\x2A2', '\n', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x2A6', '\n', '-', '\x3', '.', 
		'\x3', '.', '\x3', '/', '\x3', '/', '\a', '/', '\x2AC', '\n', '/', '\f', 
		'/', '\xE', '/', '\x2AF', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x5', '\x32', 
		'\x2B8', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', '\x2BB', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x2C0', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\a', '\x34', '\x2C8', '\n', '\x34', '\f', '\x34', 
		'\xE', '\x34', '\x2CB', '\v', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2D7', '\n', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x2DC', '\n', 
		'\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x2EA', '\n', ':', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\a', '<', '\x2F3', '\n', '<', '\f', '<', '\xE', '<', '\x2F6', '\v', '<', 
		'\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', 
		'\x2FD', '\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x5', '>', '\x305', '\n', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\a', '\x42', '\x314', '\n', '\x42', '\f', '\x42', '\xE', '\x42', '\x317', 
		'\v', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x5', '\x44', 
		'\x31C', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x31F', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x324', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x329', 
		'\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x32C', '\n', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x333', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', 
		'\x337', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x33A', '\v', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x5', 'G', '\x347', '\n', 'G', '\x3', 'H', '\x5', 'H', '\x34A', '\n', 
		'H', '\x3', 'H', '\x5', 'H', '\x34D', '\n', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x354', '\n', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'J', '\x5', 'J', '\x359', '\n', 'J', '\x3', 'J', 
		'\x5', 'J', '\x35C', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x361', '\n', 'J', '\x3', 'J', '\x5', 'J', '\x364', '\n', 'J', '\x3', 
		'J', '\x5', 'J', '\x367', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x5', 'K', '\x36C', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x370', 
		'\n', 'K', '\x3', 'K', '\x5', 'K', '\x373', '\n', 'K', '\x3', 'L', '\x5', 
		'L', '\x376', '\n', 'L', '\x3', 'L', '\x5', 'L', '\x379', '\n', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x37F', '\n', 'M', 
		'\x3', 'N', '\x3', 'N', '\a', 'N', '\x383', '\n', 'N', '\f', 'N', '\xE', 
		'N', '\x386', '\v', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', 
		'\x3', 'P', '\x3', 'P', '\x5', 'P', '\x38E', '\n', 'P', '\x3', 'P', '\x5', 
		'P', '\x391', '\n', 'P', '\x3', 'P', '\x5', 'P', '\x394', '\n', 'P', '\x3', 
		'P', '\x3', 'P', '\x5', 'P', '\x398', '\n', 'P', '\x3', 'P', '\x3', 'P', 
		'\x5', 'P', '\x39C', '\n', 'P', '\x5', 'P', '\x39E', '\n', 'P', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'T', '\x3', 'T', '\x5', 'T', '\x3A8', '\n', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'U', '\x3', 'U', '\x5', 'U', '\x3AE', '\n', 'U', '\x3', 'U', '\x3', 
		'U', '\x5', 'U', '\x3B2', '\n', 'U', '\x3', 'U', '\x5', 'U', '\x3B5', 
		'\n', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x3B9', '\n', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x3BE', '\n', 'U', '\x5', 'U', 
		'\x3C0', '\n', 'U', '\x3', 'V', '\x5', 'V', '\x3C3', '\n', 'V', '\x3', 
		'V', '\x5', 'V', '\x3C6', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', 
		'\x3CA', '\n', 'V', '\x3', 'V', '\x5', 'V', '\x3CD', '\n', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x3D2', '\n', 'V', '\x3', 'V', 
		'\x5', 'V', '\x3D5', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x3D9', 
		'\n', 'V', '\x3', 'W', '\x5', 'W', '\x3DC', '\n', 'W', '\x3', 'W', '\x5', 
		'W', '\x3DF', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x3E9', '\n', 
		'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\x3EE', '\n', 'Y', 
		'\f', 'Y', '\xE', 'Y', '\x3F1', '\v', 'Y', '\x3', 'Z', '\x5', 'Z', '\x3F4', 
		'\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x3F9', '\n', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x3FC', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x402', '\n', 'Z', '\x3', '[', '\x3', 
		'[', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x6', ']', '\x40A', 
		'\n', ']', '\r', ']', '\xE', ']', '\x40B', '\x3', '^', '\x3', '^', '\a', 
		'^', '\x410', '\n', '^', '\f', '^', '\xE', '^', '\x413', '\v', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\a', '^', '\x418', '\n', '^', '\f', '^', 
		'\xE', '^', '\x41B', '\v', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\a', 
		'^', '\x420', '\n', '^', '\f', '^', '\xE', '^', '\x423', '\v', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\x42A', 
		'\n', '^', '\x3', '_', '\x3', '_', '\x5', '_', '\x42E', '\n', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x441', 
		'\n', '`', '\x3', '`', '\x5', '`', '\x444', '\n', '`', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', 
		'\x44B', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x5', '\x63', '\x456', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x45D', '\n', 
		'\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x5', '\x66', '\x464', '\n', '\x66', '\x3', 'g', '\x3', 'g', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x6', 'i', 
		'\x46D', '\n', 'i', '\r', 'i', '\xE', 'i', '\x46E', '\x3', 'j', '\a', 
		'j', '\x472', '\n', 'j', '\f', 'j', '\xE', 'j', '\x475', '\v', 'j', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\x487', '\n', 'k', 
		'\x3', 'l', '\x3', 'l', '\x5', 'l', '\x48B', '\n', 'l', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x4A5', 
		'\n', 'm', '\x3', 'n', '\x6', 'n', '\x4A8', '\n', 'n', '\r', 'n', '\xE', 
		'n', '\x4A9', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'o', '\x3', 'o', '\x5', 'o', '\x4C5', '\n', 'o', '\x3', 'p', '\x3', 
		'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\x4CC', '\n', 'q', 
		'\x3', 'q', '\x3', 'q', '\x5', 'q', '\x4D0', '\n', 'q', '\x3', 'q', '\x3', 
		'q', '\x5', 'q', '\x4D4', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\a', 'q', '\x4D9', '\n', 'q', '\f', 'q', '\xE', 'q', '\x4DC', '\v', 'q', 
		'\x3', 'r', '\x3', 'r', '\x3', 's', '\x3', 's', '\x3', 't', '\x5', 't', 
		'\x4E3', '\n', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x4E7', '\n', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x4ED', 
		'\n', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\x5', 't', '\x4F4', '\n', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\x5', 'u', '\x4FB', '\n', 'u', '\x3', 'u', '\x3', 'u', 
		'\x5', 'u', '\x4FF', '\n', 'u', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 
		'v', '\x3', 'v', '\x5', 'v', '\x506', '\n', 'v', '\x3', 'w', '\x5', 'w', 
		'\x509', '\n', 'w', '\x3', 'w', '\x5', 'w', '\x50C', '\n', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x512', '\n', 'w', 
		'\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\x518', '\n', 
		'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 
		'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 
		'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\x529', '\n', 'y', 
		'\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', 
		'\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\a', 'y', '\x535', '\n', 
		'y', '\f', 'y', '\xE', 'y', '\x538', '\v', 'y', '\x3', 'z', '\x3', 'z', 
		'\x5', 'z', '\x53C', '\n', 'z', '\x3', 'z', '\x5', 'z', '\x53F', '\n', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '|', '\x3', 
		'|', '\x3', '}', '\x3', '}', '\x5', '}', '\x549', '\n', '}', '\x3', '}', 
		'\x3', '}', '\x5', '}', '\x54D', '\n', '}', '\x3', '~', '\x3', '~', '\x3', 
		'\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x553', '\n', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x5', '\x80', '\x55C', '\n', '\x80', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x562', '\n', '\x81', 
		'\x3', '\x82', '\x3', '\x82', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x6', '\x85', '\x573', '\n', '\x85', '\r', '\x85', '\xE', '\x85', '\x574', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\x57D', '\n', '\x87', '\x3', '\x88', '\x3', 
		'\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x8A', '\x5', '\x8A', '\x584', 
		'\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', 
		'\x58E', '\n', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\a', '\x8F', '\x597', 
		'\n', '\x8F', '\f', '\x8F', '\xE', '\x8F', '\x59A', '\v', '\x8F', '\x3', 
		'\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', 
		'\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x5', '\x90', '\x5A5', 
		'\n', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\a', '\x92', '\x5AD', '\n', '\x92', '\f', 
		'\x92', '\xE', '\x92', '\x5B0', '\v', '\x92', '\x3', '\x93', '\x3', '\x93', 
		'\x5', '\x93', '\x5B4', '\n', '\x93', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x5', '\x94', '\x5BE', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', 
		'\x3', '\x95', '\x3', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\a', '\x97', 
		'\x5CB', '\n', '\x97', '\f', '\x97', '\xE', '\x97', '\x5CE', '\v', '\x97', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', 
		'\x5DE', '\n', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\x600', 
		'\n', '\x9F', '\x3', '\x9F', '\x2', '\x4', '\xE0', '\xF0', '\xA0', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', 
		'|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', 
		'\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', 
		'\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', 
		'\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', 
		'\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', 
		'\xD8', '\xDA', '\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', 
		'\xEA', '\xEC', '\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', 
		'\xFC', '\xFE', '\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', 
		'\x10C', '\x10E', '\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', 
		'\x11C', '\x11E', '\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', 
		'\x12C', '\x12E', '\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', 
		'\x13C', '\x2', '\v', '\x3', '\x2', '\x4', '\n', '\x3', '\x2', '\x1A', 
		'\x1C', '\x6', '\x2', '~', '~', '\x80', '\x80', '\x83', '\x84', '\x86', 
		'\x8A', '\x3', '\x2', '\x35', '\x36', '\x3', '\x2', '@', '\x41', '\x3', 
		'\x2', '|', '}', '\x3', '\x2', 's', 'w', '\v', '\x2', '\f', '\xE', '\x10', 
		'\x11', '\x13', '\x14', '\x16', '\x1C', '%', '*', ',', '/', '\x34', '\x36', 
		'\x39', ':', '\x46', '^', '\b', '\x2', '\x3', '\b', '\n', '\n', '\f', 
		'\x1F', '!', '<', '?', '\x42', '\x46', 'r', '\x2', '\x683', '\x2', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x149', '\x3', '\x2', '\x2', '\x2', '\b', '\x156', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x165', '\x3', '\x2', '\x2', '\x2', '\f', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x172', '\x3', '\x2', '\x2', '\x2', '\x12', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x16', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1A5', '\x3', '\x2', '\x2', '\x2', ' ', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x1D3', '\x3', '\x2', '\x2', '\x2', '&', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x1D8', '\x3', '\x2', '\x2', '\x2', '*', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1FA', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x223', '\x3', '\x2', '\x2', '\x2', ':', '\x225', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x229', '\x3', '\x2', '\x2', '\x2', '>', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x44', '\x240', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x243', '\x3', '\x2', '\x2', '\x2', 'H', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x253', '\x3', '\x2', '\x2', '\x2', 'N', '\x259', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x25C', '\x3', '\x2', '\x2', '\x2', 'R', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x279', '\x3', '\x2', '\x2', '\x2', 'X', '\x2A5', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\\', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x62', '\x2B7', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x66', '\x2C5', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x2D6', '\x3', '\x2', '\x2', '\x2', 'l', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x2DD', '\x3', '\x2', '\x2', '\x2', 'p', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2E5', '\x3', '\x2', '\x2', '\x2', 
		't', '\x2EB', '\x3', '\x2', '\x2', '\x2', 'v', '\x2EE', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x2FC', '\x3', '\x2', '\x2', '\x2', 'z', '\x304', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x306', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x80', '\x30E', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x310', '\x3', '\x2', '\x2', '\x2', '\x84', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x332', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x334', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x33D', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x346', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x349', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x351', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x358', '\x3', '\x2', '\x2', '\x2', '\x94', '\x368', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x375', '\x3', '\x2', '\x2', '\x2', '\x98', '\x37E', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x380', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x389', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x39D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x39F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x3A1', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x3A3', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x3BF', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x3E8', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x401', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x403', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x405', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x407', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x429', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x42D', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x443', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x445', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x44A', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x455', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x45C', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x45E', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x460', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x465', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x467', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x46C', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x473', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x486', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x48A', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x4A7', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x4C6', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x4D3', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x4DF', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\x505', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\x511', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x517', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\x528', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x539', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x542', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\x544', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x546', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\x54E', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x550', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x55B', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x561', '\x3', '\x2', '\x2', '\x2', '\x102', '\x563', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x565', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x569', '\x3', '\x2', '\x2', '\x2', '\x108', '\x56F', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x576', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x57C', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x57E', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x580', '\x3', '\x2', '\x2', '\x2', '\x112', '\x583', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x587', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x589', '\x3', '\x2', '\x2', '\x2', '\x118', '\x58D', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x593', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x5A4', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x122', '\x5A9', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x5B3', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x5BD', '\x3', '\x2', '\x2', '\x2', '\x128', '\x5BF', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x5C7', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x5CF', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x132', '\x5D3', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x5D5', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x5D7', '\x3', '\x2', '\x2', '\x2', '\x138', '\x5D9', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x5DD', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x5FF', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', '\x5', '\x4', '\x3', '\x2', 
		'\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x144', '\x148', 
		'\x5', '\f', '\a', '\x2', '\x145', '\x148', '\x5', '\b', '\x5', '\x2', 
		'\x146', '\x148', '\x5', '\x6', '\x4', '\x2', '\x147', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\a', '\x97', '\x2', '\x2', '\x14A', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x157', '\x5', '\x14', '\v', '\x2', '\x14C', 
		'\x157', '\x5', '(', '\x15', '\x2', '\x14D', '\x157', '\x5', '\x94', 'K', 
		'\x2', '\x14E', '\x157', '\x5', '.', '\x18', '\x2', '\x14F', '\x157', 
		'\x5', 'P', ')', '\x2', '\x150', '\x157', '\x5', 'X', '-', '\x2', '\x151', 
		'\x157', '\x5', '\x62', '\x32', '\x2', '\x152', '\x157', '\x5', '\x86', 
		'\x44', '\x2', '\x153', '\x157', '\x5', '\x8C', 'G', '\x2', '\x154', '\x157', 
		'\x5', 'l', '\x37', '\x2', '\x155', '\x157', '\x5', 'v', '<', '\x2', '\x156', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x156', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x156', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x150', '\x3', '\x2', '\x2', '\x2', '\x156', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x152', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x166', '\x5', '\x14', '\v', '\x2', '\x159', 
		'\x166', '\x5', '(', '\x15', '\x2', '\x15A', '\x166', '\x5', '\x94', 'K', 
		'\x2', '\x15B', '\x166', '\x5', '.', '\x18', '\x2', '\x15C', '\x166', 
		'\x5', 'P', ')', '\x2', '\x15D', '\x166', '\x5', 'X', '-', '\x2', '\x15E', 
		'\x166', '\x5', '\x62', '\x32', '\x2', '\x15F', '\x166', '\x5', '\xA8', 
		'U', '\x2', '\x160', '\x166', '\x5', '\xAC', 'W', '\x2', '\x161', '\x166', 
		'\x5', '\x86', '\x44', '\x2', '\x162', '\x166', '\x5', '\x8C', 'G', '\x2', 
		'\x163', '\x166', '\x5', 'l', '\x37', '\x2', '\x164', '\x166', '\x5', 
		'v', '<', '\x2', '\x165', '\x158', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x165', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x165', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x165', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x160', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x165', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x169', '\x5', '\xD0', 'i', '\x2', '\x168', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16C', '\a', '\x3', '\x2', 
		'\x2', '\x16B', '\x16D', '\x5', '\xE', '\b', '\x2', '\x16C', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x5', 
		'\x10', '\t', '\x2', '\x16F', '\r', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x171', '\t', '\x2', '\x2', '\x2', '\x171', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x177', '\x5', '\x12', '\n', '\x2', '\x173', '\x174', 
		'\a', '\x83', '\x2', '\x2', '\x174', '\x176', '\x5', '\x12', '\n', '\x2', 
		'\x175', '\x173', '\x3', '\x2', '\x2', '\x2', '\x176', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\x5', '\xC2', '\x62', '\x2', '\x17B', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17D', '\x5', '\x16', '\f', '\x2', '\x17D', '\x182', '\x5', 
		'\x18', '\r', '\x2', '\x17E', '\x17F', '\a', '\x84', '\x2', '\x2', '\x17F', 
		'\x181', '\x5', '\x18', '\r', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x184', '\x3', '\x2', '\x2', '\x2', '\x182', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x15', '\x3', '\x2', '\x2', '\x2', '\x184', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x187', '\x5', '\xD0', 'i', '\x2', '\x186', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x189', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18A', 
		'\x5', '\xDA', 'n', '\x2', '\x189', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x194', '\x5', '\x1C', '\xF', '\x2', '\x18C', 
		'\x18E', '\x5', '\xD0', 'i', '\x2', '\x18D', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x191', '\x5', '\xDA', 'n', '\x2', 
		'\x190', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x194', '\x5', '\x1E', '\x10', '\x2', '\x193', '\x186', '\x3', '\x2', 
		'\x2', '\x2', '\x193', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x194', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x5', '\x1A', '\xE', '\x2', 
		'\x196', '\x198', '\x5', '\xF2', 'z', '\x2', '\x197', '\x199', '\x5', 
		' ', '\x11', '\x2', '\x198', '\x197', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x199', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x19B', '\x5', '\x1A', '\xE', '\x2', '\x19B', '\x19D', 
		'\x5', '\xF2', 'z', '\x2', '\x19C', '\x19E', '\x5', '\xB8', ']', '\x2', 
		'\x19D', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x19A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', 
		'\x5', '\xC2', '\x62', '\x2', '\x1A2', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A4', '\a', '\t', '\x2', '\x2', '\x1A4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A5', '\x1A6', '\a', '\v', '\x2', '\x2', '\x1A6', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\a', '\x90', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\x5', '\"', '\x12', '\x2', '\x1A9', '\x1AA', '\x5', 
		'$', '\x13', '\x2', '\x1AA', '\x1AB', '\a', '\x91', '\x2', '\x2', '\x1AB', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '\x90', '\x2', 
		'\x2', '\x1AD', '\x1AE', '\x5', '$', '\x13', '\x2', '\x1AE', '\x1AF', 
		'\x5', '\"', '\x12', '\x2', '\x1AF', '\x1B0', '\a', '\x91', '\x2', '\x2', 
		'\x1B0', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\a', 
		'\x90', '\x2', '\x2', '\x1B2', '\x1B3', '\x5', '\"', '\x12', '\x2', '\x1B3', 
		'\x1B4', '\a', '\x91', '\x2', '\x2', '\x1B4', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '!', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B9', '\x5', '\xD0', 
		'i', '\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1BC', '\x5', '\xDE', 'p', '\x2', '\x1BB', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BF', '\a', '\f', '\x2', 
		'\x2', '\x1BE', '\x1C0', '\x5', '\xA0', 'Q', '\x2', '\x1BF', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '#', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C3', '\x5', '\xD0', 
		'i', '\x2', '\x1C2', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C6', '\x5', '\xDE', 'p', '\x2', '\x1C5', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1D4', '\a', '\r', '\x2', 
		'\x2', '\x1C8', '\x1CA', '\x5', '\xD0', 'i', '\x2', '\x1C9', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CA', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CD', '\x5', 
		'\xDE', 'p', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\a', '\r', '\x2', '\x2', '\x1CF', '\x1D0', '\a', 
		'\x8C', '\x2', '\x2', '\x1D0', '\x1D1', '\x5', '&', '\x14', '\x2', '\x1D1', 
		'\x1D2', '\a', '\x8D', '\x2', '\x2', '\x1D2', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x5', '\xC2', '\x62', '\x2', '\x1D6', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D9', '\x5', '\xD0', 'i', '\x2', '\x1D8', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DC', 
		'\x5', '\xDC', 'o', '\x2', '\x1DB', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '\x4', '\x2', '\x2', '\x1DE', 
		'\x1E0', '\x5', '*', '\x16', '\x2', '\x1DF', '\x1E1', '\x5', '\x11A', 
		'\x8E', '\x2', '\x1E0', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E2', '\x1E3', '\x5', ',', '\x17', '\x2', '\x1E3', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', '\xC2', '\x62', '\x2', '\x1E5', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '~', '\x2', '\x2', 
		'\x1E7', '\x1E8', '\x5', '\xF0', 'y', '\x2', '\x1E8', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x1E9', '\x1EB', '\x5', '\xD0', 'i', '\x2', '\x1EA', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EE', '\x5', 
		'\xDC', 'o', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F8', '\x5', '\x30', '\x19', '\x2', '\x1F0', '\x1F2', 
		'\x5', '\xD0', 'i', '\x2', '\x1F1', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1F1', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', '\x1F5', '\x5', '\xDC', 'o', '\x2', '\x1F4', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F8', 
		'\x5', '@', '!', '\x2', '\x1F7', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F8', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9', '\x1FB', '\a', '\xE', '\x2', '\x2', '\x1FA', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', '\a', 
		'\a', '\x2', '\x2', '\x1FD', '\x1FF', '\x5', '<', '\x1F', '\x2', '\x1FE', 
		'\x200', '\x5', '\x11A', '\x8E', '\x2', '\x1FF', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF', '\x200', '\x3', '\x2', '\x2', '\x2', '\x200', '\x202', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x203', '\x5', '\xC4', '\x63', '\x2', 
		'\x202', '\x201', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x203', '\x205', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x206', '\x5', '\x120', '\x91', '\x2', '\x205', '\x204', '\x3', '\x2', 
		'\x2', '\x2', '\x205', '\x206', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x209', '\a', '\x90', '\x2', '\x2', 
		'\x208', '\x20A', '\x5', '\x32', '\x1A', '\x2', '\x209', '\x208', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', '\x91', '\x2', 
		'\x2', '\x20C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20F', 
		'\x5', '\x34', '\x1B', '\x2', '\x20E', '\x210', '\x5', '\x32', '\x1A', 
		'\x2', '\x20F', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x214', '\x5', '\n', '\x6', '\x2', '\x212', '\x214', '\x5', 
		'\x36', '\x1C', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', 
		'\x212', '\x3', '\x2', '\x2', '\x2', '\x214', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x217', '\x5', '\xD0', 'i', '\x2', '\x216', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x219', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21A', '\a', 
		'\xE', '\x2', '\x2', '\x219', '\x218', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x21C', '\a', '\xF', '\x2', '\x2', '\x21C', '\x21D', 
		'\x5', '\x38', '\x1D', '\x2', '\x21D', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x224', '\x5', ':', '\x1E', '\x2', '\x21F', '\x220', '\x5', 
		':', '\x1E', '\x2', '\x220', '\x221', '\a', '\x84', '\x2', '\x2', '\x221', 
		'\x222', '\x5', '\x38', '\x1D', '\x2', '\x222', '\x224', '\x3', '\x2', 
		'\x2', '\x2', '\x223', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x223', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x224', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x225', '\x227', '\x5', '>', ' ', '\x2', '\x226', '\x228', '\x5', '\xFC', 
		'\x7F', '\x2', '\x227', '\x226', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x228', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x22A', '\x5', '\xC2', '\x62', '\x2', '\x22A', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x22B', '\x22C', '\x5', '\xC2', '\x62', '\x2', '\x22C', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\a', '\a', '\x2', 
		'\x2', '\x22E', '\x230', '\x5', '<', '\x1F', '\x2', '\x22F', '\x231', 
		'\x5', '\x11A', '\x8E', '\x2', '\x230', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', 
		'\x3', '\x2', '\x2', '\x2', '\x232', '\x234', '\x5', '\xC4', '\x63', '\x2', 
		'\x233', '\x235', '\x5', '\x120', '\x91', '\x2', '\x234', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\a', '\x90', '\x2', 
		'\x2', '\x237', '\x238', '\x5', '\x42', '\"', '\x2', '\x238', '\x239', 
		'\a', '\x91', '\x2', '\x2', '\x239', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x23C', '\x5', '\x44', '#', '\x2', '\x23B', '\x23D', '\x5', 
		'\x42', '\"', '\x2', '\x23C', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x23E', '\x241', '\x5', '\n', '\x6', '\x2', '\x23F', '\x241', 
		'\x5', '\x46', '$', '\x2', '\x240', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x241', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x244', '\x5', '\xD0', 'i', '\x2', '\x243', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', 
		'\a', '\xF', '\x2', '\x2', '\x246', '\x247', '\x5', 'H', '%', '\x2', '\x247', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24E', '\x5', 'J', '&', '\x2', 
		'\x249', '\x24A', '\x5', 'J', '&', '\x2', '\x24A', '\x24B', '\a', '\x84', 
		'\x2', '\x2', '\x24B', '\x24C', '\x5', 'H', '%', '\x2', '\x24C', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24E', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x24F', '\x251', '\x5', '>', ' ', '\x2', '\x250', '\x252', 
		'\x5', 'L', '\'', '\x2', '\x251', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x252', '\x3', '\x2', '\x2', '\x2', '\x252', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x253', '\x254', '\a', '~', '\x2', '\x2', '\x254', '\x255', 
		'\x5', 'N', '(', '\x2', '\x255', 'M', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x25A', '\x5', '\x112', '\x8A', '\x2', '\x257', '\x25A', '\a', 'x', '\x2', 
		'\x2', '\x258', '\x25A', '\x5', '\x110', '\x89', '\x2', '\x259', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x259', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25A', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x25B', '\x25D', '\x5', '\xD0', 'i', '\x2', '\x25C', '\x25B', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x260', '\x5', 
		'\xDC', 'o', '\x2', '\x25F', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x261', '\x262', '\a', '\x5', '\x2', '\x2', '\x262', '\x264', 
		'\x5', 'R', '*', '\x2', '\x263', '\x265', '\x5', '\x11A', '\x8E', '\x2', 
		'\x264', '\x263', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x267', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x268', '\x5', '\xC4', '\x63', '\x2', '\x267', '\x266', '\x3', '\x2', 
		'\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', '\x2', '\x268', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x269', '\x26B', '\x5', '\x120', '\x91', 
		'\x2', '\x26A', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x26D', '\x5', 'T', '+', '\x2', '\x26D', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x26E', '\x26F', '\x5', '\xC2', '\x62', '\x2', '\x26F', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x270', '\x274', '\a', '\x90', '\x2', 
		'\x2', '\x271', '\x273', '\x5', 'V', ',', '\x2', '\x272', '\x271', '\x3', 
		'\x2', '\x2', '\x2', '\x273', '\x276', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x272', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x277', '\x3', '\x2', '\x2', '\x2', '\x276', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\a', '\x91', '\x2', '\x2', 
		'\x278', 'U', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\x5', '\n', 
		'\x6', '\x2', '\x27A', 'W', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27D', 
		'\x5', '\xD0', 'i', '\x2', '\x27C', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'\x27C', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x280', '\x5', '\xDC', 'o', '\x2', '\x27F', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', '\x3', '\x2', '\x2', 
		'\x2', '\x280', '\x282', '\x3', '\x2', '\x2', '\x2', '\x281', '\x283', 
		'\x5', '`', '\x31', '\x2', '\x282', '\x281', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x283', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x285', '\a', '\x6', '\x2', '\x2', '\x285', 
		'\x287', '\x5', 'Z', '.', '\x2', '\x286', '\x288', '\x5', '\x11A', '\x8E', 
		'\x2', '\x287', '\x286', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', 
		'\x3', '\x2', '\x2', '\x2', '\x288', '\x28A', '\x3', '\x2', '\x2', '\x2', 
		'\x289', '\x28B', '\x5', '\xC4', '\x63', '\x2', '\x28A', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x28A', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28E', '\x5', '\x120', 
		'\x91', '\x2', '\x28D', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x28E', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\x3', '\x2', '\x2', 
		'\x2', '\x28F', '\x290', '\x5', '\\', '/', '\x2', '\x290', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x293', '\x5', '\xD0', 'i', '\x2', '\x292', 
		'\x291', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', '\x296', 
		'\x5', '`', '\x31', '\x2', '\x295', '\x297', '\x5', '\xDC', 'o', '\x2', 
		'\x296', '\x295', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\x3', 
		'\x2', '\x2', '\x2', '\x297', '\x298', '\x3', '\x2', '\x2', '\x2', '\x298', 
		'\x299', '\a', '\x6', '\x2', '\x2', '\x299', '\x29B', '\x5', 'Z', '.', 
		'\x2', '\x29A', '\x29C', '\x5', '\x11A', '\x8E', '\x2', '\x29B', '\x29A', 
		'\x3', '\x2', '\x2', '\x2', '\x29B', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'\x29C', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29F', '\x5', 
		'\xC4', '\x63', '\x2', '\x29E', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x2A0', '\x2A2', '\x5', '\x120', '\x91', '\x2', '\x2A1', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', '\x2', '\x2', '\x2', 
		'\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\x5', 
		'\\', '/', '\x2', '\x2A4', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x2A6', 'Y', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\x5', 
		'\xC2', '\x62', '\x2', '\x2A8', '[', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2AD', '\a', '\x90', '\x2', '\x2', '\x2AA', '\x2AC', '\x5', '^', '\x30', 
		'\x2', '\x2AB', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2B0', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\a', '\x91', '\x2', '\x2', '\x2B1', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2B3', '\x5', '\n', '\x6', '\x2', '\x2B3', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\a', '\x10', '\x2', '\x2', '\x2B5', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B8', '\x5', '\xD0', 'i', 
		'\x2', '\x2B7', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2B9', '\x2BB', '\x5', '\xDC', 'o', '\x2', '\x2BA', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\a', '\b', '\x2', 
		'\x2', '\x2BD', '\x2BF', '\x5', '\x64', '\x33', '\x2', '\x2BE', '\x2C0', 
		'\x5', '\xC4', '\x63', '\x2', '\x2BF', '\x2BE', '\x3', '\x2', '\x2', '\x2', 
		'\x2BF', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', 
		'\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\x5', '\x66', '\x34', '\x2', '\x2C2', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\x5', '\xC2', '\x62', 
		'\x2', '\x2C4', '\x65', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C9', 
		'\a', '\x90', '\x2', '\x2', '\x2C6', '\x2C8', '\x5', 'h', '\x35', '\x2', 
		'\x2C7', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CC', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x2CD', 
		'\a', '\x91', '\x2', '\x2', '\x2CD', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x2CE', '\x2CF', '\x5', 'j', '\x36', '\x2', '\x2CF', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x2D0', '\x2D7', '\x5', '\x14', '\v', '\x2', '\x2D1', '\x2D7', 
		'\x5', '\x94', 'K', '\x2', '\x2D2', '\x2D7', '\x5', '\xA8', 'U', '\x2', 
		'\x2D3', '\x2D7', '\x5', '\x8C', 'G', '\x2', '\x2D4', '\x2D7', '\x5', 
		'\x92', 'J', '\x2', '\x2D5', '\x2D7', '\x5', '(', '\x15', '\x2', '\x2D6', 
		'\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D6', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D3', 
		'\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2D6', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D7', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x2D8', '\x2DC', '\x5', 'n', '\x38', '\x2', '\x2D9', '\x2DC', 
		'\x5', 'p', '\x39', '\x2', '\x2DA', '\x2DC', '\x5', 'r', ':', '\x2', '\x2DB', 
		'\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2D9', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DC', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\a', '\x11', '\x2', '\x2', '\x2DE', 
		'\x2DF', '\a', '\x12', '\x2', '\x2', '\x2DF', '\x2E0', '\x5', '\x13A', 
		'\x9E', '\x2', '\x2E0', 'o', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', 
		'\a', '\x13', '\x2', '\x2', '\x2E2', '\x2E3', '\a', '\x12', '\x2', '\x2', 
		'\x2E3', '\x2E4', '\x5', '\x13A', '\x9E', '\x2', '\x2E4', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\a', '\x14', '\x2', '\x2', '\x2E6', 
		'\x2E7', '\a', '\x12', '\x2', '\x2', '\x2E7', '\x2E9', '\x5', '\x13A', 
		'\x9E', '\x2', '\x2E8', '\x2EA', '\x5', 't', ';', '\x2', '\x2E9', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', 's', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EC', '\a', '\x86', 
		'\x2', '\x2', '\x2EC', '\x2ED', '\x5', '\x84', '\x43', '\x2', '\x2ED', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\a', '\x15', '\x2', 
		'\x2', '\x2EF', '\x2F0', '\x5', '\x84', '\x43', '\x2', '\x2F0', '\x2F4', 
		'\a', '\x90', '\x2', '\x2', '\x2F1', '\x2F3', '\x5', 'x', '=', '\x2', 
		'\x2F2', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F7', '\x3', '\x2', '\x2', 
		'\x2', '\x2F6', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F8', 
		'\a', '\x91', '\x2', '\x2', '\x2F8', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x2F9', '\x2FD', '\x5', 'z', '>', '\x2', '\x2FA', '\x2FD', '\x5', '|', 
		'?', '\x2', '\x2FB', '\x2FD', '\x5', '~', '@', '\x2', '\x2FC', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FD', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x2FE', '\x2FF', '\a', '\x16', '\x2', '\x2', '\x2FF', '\x300', 
		'\a', '\x86', '\x2', '\x2', '\x300', '\x305', '\x5', '\x82', '\x42', '\x2', 
		'\x301', '\x302', '\a', '\x17', '\x2', '\x2', '\x302', '\x303', '\a', 
		'\x86', '\x2', '\x2', '\x303', '\x305', '\x5', '\x82', '\x42', '\x2', 
		'\x304', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x304', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x305', '{', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\x307', '\a', '\x18', '\x2', '\x2', '\x307', '\x308', '\a', '\x86', '\x2', 
		'\x2', '\x308', '\x309', '\x5', '\x110', '\x89', '\x2', '\x309', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x30B', '\a', '\x19', '\x2', '\x2', 
		'\x30B', '\x30C', '\a', '\x86', '\x2', '\x2', '\x30C', '\x30D', '\x5', 
		'\x80', '\x41', '\x2', '\x30D', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x30E', 
		'\x30F', '\t', '\x3', '\x2', '\x2', '\x30F', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x315', '\x5', '\x84', '\x43', '\x2', '\x311', '\x312', 
		'\a', '\x84', '\x2', '\x2', '\x312', '\x314', '\x5', '\x84', '\x43', '\x2', 
		'\x313', '\x311', '\x3', '\x2', '\x2', '\x2', '\x314', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x315', '\x313', '\x3', '\x2', '\x2', '\x2', '\x315', 
		'\x316', '\x3', '\x2', '\x2', '\x2', '\x316', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x317', '\x315', '\x3', '\x2', '\x2', '\x2', '\x318', '\x319', 
		'\x5', '\xC2', '\x62', '\x2', '\x319', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x31C', '\x5', '\xD0', 'i', '\x2', '\x31B', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x31B', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31C', 
		'\x31E', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31F', '\x5', '\xDC', 
		'o', '\x2', '\x31E', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', '\x3', '\x2', '\x2', '\x2', 
		'\x320', '\x321', '\a', '\x1D', '\x2', '\x2', '\x321', '\x323', '\x5', 
		'\xF8', '}', '\x2', '\x322', '\x324', '\x5', '\xC4', '\x63', '\x2', '\x323', 
		'\x322', '\x3', '\x2', '\x2', '\x2', '\x323', '\x324', '\x3', '\x2', '\x2', 
		'\x2', '\x324', '\x325', '\x3', '\x2', '\x2', '\x2', '\x325', '\x326', 
		'\x5', '\x88', '\x45', '\x2', '\x326', '\x333', '\x3', '\x2', '\x2', '\x2', 
		'\x327', '\x329', '\x5', '\xD0', 'i', '\x2', '\x328', '\x327', '\x3', 
		'\x2', '\x2', '\x2', '\x328', '\x329', '\x3', '\x2', '\x2', '\x2', '\x329', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x32C', '\x5', '\xDC', 
		'o', '\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', 
		'\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x32D', '\x32E', '\a', '\x1D', '\x2', '\x2', '\x32E', '\x32F', '\x5', 
		'\xF8', '}', '\x2', '\x32F', '\x330', '\x5', '\x120', '\x91', '\x2', '\x330', 
		'\x331', '\x5', '\x88', '\x45', '\x2', '\x331', '\x333', '\x3', '\x2', 
		'\x2', '\x2', '\x332', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x332', '\x328', 
		'\x3', '\x2', '\x2', '\x2', '\x333', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x334', '\x338', '\a', '\x90', '\x2', '\x2', '\x335', '\x337', '\x5', 
		'\x8A', '\x46', '\x2', '\x336', '\x335', '\x3', '\x2', '\x2', '\x2', '\x337', 
		'\x33A', '\x3', '\x2', '\x2', '\x2', '\x338', '\x336', '\x3', '\x2', '\x2', 
		'\x2', '\x338', '\x339', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33B', 
		'\x3', '\x2', '\x2', '\x2', '\x33A', '\x338', '\x3', '\x2', '\x2', '\x2', 
		'\x33B', '\x33C', '\a', '\x91', '\x2', '\x2', '\x33C', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x33D', '\x33E', '\x5', '\b', '\x5', '\x2', '\x33E', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\x5', '\x8E', 'H', 
		'\x2', '\x340', '\x341', '\x5', '\x90', 'I', '\x2', '\x341', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x342', '\x343', '\x5', '\x8E', 'H', '\x2', 
		'\x343', '\x344', '\x5', '\x90', 'I', '\x2', '\x344', '\x345', '\x5', 
		' ', '\x11', '\x2', '\x345', '\x347', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x33F', '\x3', '\x2', '\x2', '\x2', '\x346', '\x342', '\x3', '\x2', '\x2', 
		'\x2', '\x347', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x348', '\x34A', 
		'\x5', '\xD0', 'i', '\x2', '\x349', '\x348', '\x3', '\x2', '\x2', '\x2', 
		'\x349', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x34B', '\x34D', '\x5', '\xDA', 'n', '\x2', '\x34C', 
		'\x34B', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', 
		'\a', '\x1E', '\x2', '\x2', '\x34F', '\x350', '\x5', '\xAE', 'X', '\x2', 
		'\x350', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x351', '\x353', '\x5', 
		'\x132', '\x9A', '\x2', '\x352', '\x354', '\x5', '\xD0', 'i', '\x2', '\x353', 
		'\x352', '\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\x3', '\x2', '\x2', 
		'\x2', '\x354', '\x355', '\x3', '\x2', '\x2', '\x2', '\x355', '\x356', 
		'\x5', '\xF0', 'y', '\x2', '\x356', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x357', '\x359', '\x5', '\xD0', 'i', '\x2', '\x358', '\x357', '\x3', 
		'\x2', '\x2', '\x2', '\x358', '\x359', '\x3', '\x2', '\x2', '\x2', '\x359', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x35C', '\x5', '\xDC', 
		'o', '\x2', '\x35B', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', '\x35C', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x35D', '\x35E', '\a', '\x1F', '\x2', '\x2', '\x35E', '\x360', '\x5', 
		'*', '\x16', '\x2', '\x35F', '\x361', '\x5', '\xC4', '\x63', '\x2', '\x360', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\x3', '\x2', '\x2', 
		'\x2', '\x361', '\x363', '\x3', '\x2', '\x2', '\x2', '\x362', '\x364', 
		'\x5', ',', '\x17', '\x2', '\x363', '\x362', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x364', '\x3', '\x2', '\x2', '\x2', '\x364', '\x366', '\x3', 
		'\x2', '\x2', '\x2', '\x365', '\x367', '\x5', '\x120', '\x91', '\x2', 
		'\x366', '\x365', '\x3', '\x2', '\x2', '\x2', '\x366', '\x367', '\x3', 
		'\x2', '\x2', '\x2', '\x367', '\x93', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x369', '\x5', '\x96', 'L', '\x2', '\x369', '\x36B', '\x5', '\x98', 'M', 
		'\x2', '\x36A', '\x36C', '\x5', '\x11A', '\x8E', '\x2', '\x36B', '\x36A', 
		'\x3', '\x2', '\x2', '\x2', '\x36B', '\x36C', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36F', '\x5', 
		'\x9E', 'P', '\x2', '\x36E', '\x370', '\x5', '\x120', '\x91', '\x2', '\x36F', 
		'\x36E', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x370', '\x3', '\x2', '\x2', 
		'\x2', '\x370', '\x372', '\x3', '\x2', '\x2', '\x2', '\x371', '\x373', 
		'\x5', '\x9A', 'N', '\x2', '\x372', '\x371', '\x3', '\x2', '\x2', '\x2', 
		'\x372', '\x373', '\x3', '\x2', '\x2', '\x2', '\x373', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\x376', '\x5', '\xD0', 'i', '\x2', '\x375', 
		'\x374', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', '\x3', '\x2', '\x2', 
		'\x2', '\x376', '\x378', '\x3', '\x2', '\x2', '\x2', '\x377', '\x379', 
		'\x5', '\xDA', 'n', '\x2', '\x378', '\x377', '\x3', '\x2', '\x2', '\x2', 
		'\x378', '\x379', '\x3', '\x2', '\x2', '\x2', '\x379', '\x37A', '\x3', 
		'\x2', '\x2', '\x2', '\x37A', '\x37B', '\a', '\n', '\x2', '\x2', '\x37B', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37F', '\x5', '\xC2', '\x62', 
		'\x2', '\x37D', '\x37F', '\x5', '\x9C', 'O', '\x2', '\x37E', '\x37C', 
		'\x3', '\x2', '\x2', '\x2', '\x37E', '\x37D', '\x3', '\x2', '\x2', '\x2', 
		'\x37F', '\x99', '\x3', '\x2', '\x2', '\x2', '\x380', '\x384', '\a', '\x90', 
		'\x2', '\x2', '\x381', '\x383', '\x5', '\xBC', '_', '\x2', '\x382', '\x381', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x384', '\x382', '\x3', '\x2', '\x2', '\x2', '\x384', '\x385', '\x3', 
		'\x2', '\x2', '\x2', '\x385', '\x387', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\x384', '\x3', '\x2', '\x2', '\x2', '\x387', '\x388', '\a', '\x91', '\x2', 
		'\x2', '\x388', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x389', '\x38A', 
		'\x5', '\x13A', '\x9E', '\x2', '\x38A', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x38D', '\x5', '\xAE', 'X', '\x2', '\x38C', '\x38E', '\x5', 
		'\xA0', 'Q', '\x2', '\x38D', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38D', 
		'\x38E', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x390', '\x3', '\x2', '\x2', 
		'\x2', '\x38F', '\x391', '\x5', '\xA2', 'R', '\x2', '\x390', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '\x390', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x393', '\x3', '\x2', '\x2', '\x2', '\x392', '\x394', '\x5', 
		'\xA6', 'T', '\x2', '\x393', '\x392', '\x3', '\x2', '\x2', '\x2', '\x393', 
		'\x394', '\x3', '\x2', '\x2', '\x2', '\x394', '\x39E', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\x397', '\x5', '\xAE', 'X', '\x2', '\x396', '\x398', 
		'\x5', '\xA0', 'Q', '\x2', '\x397', '\x396', '\x3', '\x2', '\x2', '\x2', 
		'\x397', '\x398', '\x3', '\x2', '\x2', '\x2', '\x398', '\x399', '\x3', 
		'\x2', '\x2', '\x2', '\x399', '\x39B', '\x5', '\xA4', 'S', '\x2', '\x39A', 
		'\x39C', '\x5', '\xA6', 'T', '\x2', '\x39B', '\x39A', '\x3', '\x2', '\x2', 
		'\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39E', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '\x38B', '\x3', '\x2', '\x2', '\x2', 
		'\x39D', '\x395', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x39F', '\x3A0', '\a', ' ', '\x2', '\x2', '\x3A0', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\a', '!', '\x2', 
		'\x2', '\x3A2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', 
		'\a', '\"', '\x2', '\x2', '\x3A4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A5', '\x3A7', '\x5', '\x132', '\x9A', '\x2', '\x3A6', '\x3A8', '\x5', 
		'\xD0', 'i', '\x2', '\x3A7', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3A7', 
		'\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\x3', '\x2', '\x2', 
		'\x2', '\x3A9', '\x3AA', '\x5', '\xF0', 'y', '\x2', '\x3AA', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x3AB', '\x3AD', '\x5', '\xAA', 'V', '\x2', '\x3AC', 
		'\x3AE', '\x5', '\x11A', '\x8E', '\x2', '\x3AD', '\x3AC', '\x3', '\x2', 
		'\x2', '\x2', '\x3AD', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AF', 
		'\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B1', '\x5', '\xAE', 'X', '\x2', 
		'\x3B0', '\x3B2', '\x5', '\xA2', 'R', '\x2', '\x3B1', '\x3B0', '\x3', 
		'\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B5', '\x5', '\x120', 
		'\x91', '\x2', '\x3B4', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B4', 
		'\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3C0', '\x3', '\x2', '\x2', 
		'\x2', '\x3B6', '\x3B8', '\x5', '\xAA', 'V', '\x2', '\x3B7', '\x3B9', 
		'\x5', '\x11A', '\x8E', '\x2', '\x3B8', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x3B8', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', 
		'\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\x5', '\xAE', 'X', '\x2', 
		'\x3BB', '\x3BD', '\x5', '\xA4', 'S', '\x2', '\x3BC', '\x3BE', '\x5', 
		'\x120', '\x91', '\x2', '\x3BD', '\x3BC', '\x3', '\x2', '\x2', '\x2', 
		'\x3BD', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3C0', '\x3', 
		'\x2', '\x2', '\x2', '\x3BF', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x3C1', '\x3C3', '\x5', '\xD0', 'i', '\x2', '\x3C2', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\x3', '\x2', '\x2', '\x2', 
		'\x3C3', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3C6', '\x5', 
		'\xDA', 'n', '\x2', '\x3C5', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C5', 
		'\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C7', '\x3', '\x2', '\x2', 
		'\x2', '\x3C7', '\x3D9', '\a', '#', '\x2', '\x2', '\x3C8', '\x3CA', '\x5', 
		'\xD0', 'i', '\x2', '\x3C9', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C9', 
		'\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CC', '\x3', '\x2', '\x2', 
		'\x2', '\x3CB', '\x3CD', '\x5', '\xDA', 'n', '\x2', '\x3CC', '\x3CB', 
		'\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'\x3CD', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CF', '\a', 
		'#', '\x2', '\x2', '\x3CF', '\x3D9', '\a', '\x80', '\x2', '\x2', '\x3D0', 
		'\x3D2', '\x5', '\xD0', 'i', '\x2', '\x3D1', '\x3D0', '\x3', '\x2', '\x2', 
		'\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D4', 
		'\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D5', '\x5', '\xDA', 'n', '\x2', 
		'\x3D4', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', 
		'\x2', '\x2', '\x2', '\x3D5', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x3D7', '\a', '#', '\x2', '\x2', '\x3D7', '\x3D9', '\a', '\x82', '\x2', 
		'\x2', '\x3D8', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3C9', 
		'\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D1', '\x3', '\x2', '\x2', '\x2', 
		'\x3D9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3DC', '\x5', 
		'\xD0', 'i', '\x2', '\x3DB', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3DB', 
		'\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DE', '\x3', '\x2', '\x2', 
		'\x2', '\x3DD', '\x3DF', '\x5', '\xDA', 'n', '\x2', '\x3DE', '\x3DD', 
		'\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DF', '\x3', '\x2', '\x2', '\x2', 
		'\x3DF', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3E1', '\a', 
		'$', '\x2', '\x2', '\x3E1', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x3E2', 
		'\x3E3', '\a', '\x8C', '\x2', '\x2', '\x3E3', '\x3E9', '\a', '\x8D', '\x2', 
		'\x2', '\x3E4', '\x3E5', '\a', '\x8C', '\x2', '\x2', '\x3E5', '\x3E6', 
		'\x5', '\xB0', 'Y', '\x2', '\x3E6', '\x3E7', '\a', '\x8D', '\x2', '\x2', 
		'\x3E7', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E2', '\x3', 
		'\x2', '\x2', '\x2', '\x3E8', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3E9', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EF', '\x5', '\xB2', 'Z', 
		'\x2', '\x3EB', '\x3EC', '\a', '\x84', '\x2', '\x2', '\x3EC', '\x3EE', 
		'\x5', '\xB2', 'Z', '\x2', '\x3ED', '\x3EB', '\x3', '\x2', '\x2', '\x2', 
		'\x3EE', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3ED', '\x3', 
		'\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F0', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3EF', '\x3', '\x2', '\x2', 
		'\x2', '\x3F2', '\x3F4', '\x5', '\xB4', '[', '\x2', '\x3F3', '\x3F2', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\x3', '\x2', '\x2', '\x2', 
		'\x3F4', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\x5', 
		'\xB6', '\\', '\x2', '\x3F6', '\x3F8', '\x5', '\xF2', 'z', '\x2', '\x3F7', 
		'\x3F9', '\x5', '\xB8', ']', '\x2', '\x3F8', '\x3F7', '\x3', '\x2', '\x2', 
		'\x2', '\x3F8', '\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x402', 
		'\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FC', '\x5', '\xB4', '[', '\x2', 
		'\x3FB', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FC', '\x3', 
		'\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FD', 
		'\x3FE', '\x5', '\xB6', '\\', '\x2', '\x3FE', '\x3FF', '\x5', '\xF2', 
		'z', '\x2', '\x3FF', '\x400', '\x5', '\x134', '\x9B', '\x2', '\x400', 
		'\x402', '\x3', '\x2', '\x2', '\x2', '\x401', '\x3F3', '\x3', '\x2', '\x2', 
		'\x2', '\x401', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x402', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x403', '\x404', '\x5', '\x118', '\x8D', 
		'\x2', '\x404', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x405', '\x406', 
		'\x5', '\x118', '\x8D', '\x2', '\x406', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x407', '\x409', '\a', '~', '\x2', '\x2', '\x408', '\x40A', '\x5', '\xBA', 
		'^', '\x2', '\x409', '\x408', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', 
		'\x3', '\x2', '\x2', '\x2', '\x40B', '\x409', '\x3', '\x2', '\x2', '\x2', 
		'\x40B', '\x40C', '\x3', '\x2', '\x2', '\x2', '\x40C', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x411', '\a', '\x8C', '\x2', '\x2', '\x40E', 
		'\x410', '\x5', '\xBC', '_', '\x2', '\x40F', '\x40E', '\x3', '\x2', '\x2', 
		'\x2', '\x410', '\x413', '\x3', '\x2', '\x2', '\x2', '\x411', '\x40F', 
		'\x3', '\x2', '\x2', '\x2', '\x411', '\x412', '\x3', '\x2', '\x2', '\x2', 
		'\x412', '\x414', '\x3', '\x2', '\x2', '\x2', '\x413', '\x411', '\x3', 
		'\x2', '\x2', '\x2', '\x414', '\x42A', '\a', '\x8D', '\x2', '\x2', '\x415', 
		'\x419', '\a', '\x8E', '\x2', '\x2', '\x416', '\x418', '\x5', '\xBC', 
		'_', '\x2', '\x417', '\x416', '\x3', '\x2', '\x2', '\x2', '\x418', '\x41B', 
		'\x3', '\x2', '\x2', '\x2', '\x419', '\x417', '\x3', '\x2', '\x2', '\x2', 
		'\x419', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41C', '\x3', 
		'\x2', '\x2', '\x2', '\x41B', '\x419', '\x3', '\x2', '\x2', '\x2', '\x41C', 
		'\x42A', '\a', '\x8F', '\x2', '\x2', '\x41D', '\x421', '\a', '\x90', '\x2', 
		'\x2', '\x41E', '\x420', '\x5', '\xBC', '_', '\x2', '\x41F', '\x41E', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x423', '\x3', '\x2', '\x2', '\x2', 
		'\x421', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', '\x3', 
		'\x2', '\x2', '\x2', '\x422', '\x424', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x421', '\x3', '\x2', '\x2', '\x2', '\x424', '\x42A', '\a', '\x91', '\x2', 
		'\x2', '\x425', '\x42A', '\x5', '\x118', '\x8D', '\x2', '\x426', '\x42A', 
		'\x5', '\x10C', '\x87', '\x2', '\x427', '\x42A', '\x5', '\x13A', '\x9E', 
		'\x2', '\x428', '\x42A', '\x5', '\xC0', '\x61', '\x2', '\x429', '\x40D', 
		'\x3', '\x2', '\x2', '\x2', '\x429', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x429', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x429', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '\x426', '\x3', '\x2', '\x2', '\x2', '\x429', 
		'\x427', '\x3', '\x2', '\x2', '\x2', '\x429', '\x428', '\x3', '\x2', '\x2', 
		'\x2', '\x42A', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42E', 
		'\x5', '\xBA', '^', '\x2', '\x42C', '\x42E', '\x5', '\xBE', '`', '\x2', 
		'\x42D', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x42D', '\x42C', '\x3', 
		'\x2', '\x2', '\x2', '\x42E', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x42F', 
		'\x441', '\a', '\x83', '\x2', '\x2', '\x430', '\x441', '\a', '\x84', '\x2', 
		'\x2', '\x431', '\x441', '\a', '\x86', '\x2', '\x2', '\x432', '\x441', 
		'\a', '\x87', '\x2', '\x2', '\x433', '\x441', '\a', '~', '\x2', '\x2', 
		'\x434', '\x441', '\a', '\x88', '\x2', '\x2', '\x435', '\x441', '\a', 
		'\x89', '\x2', '\x2', '\x436', '\x441', '\a', '\x8A', '\x2', '\x2', '\x437', 
		'\x441', '\a', '\x80', '\x2', '\x2', '\x438', '\x441', '\a', '\x8B', '\x2', 
		'\x2', '\x439', '\x441', '\a', '|', '\x2', '\x2', '\x43A', '\x441', '\a', 
		'}', '\x2', '\x2', '\x43B', '\x441', '\a', '\x7F', '\x2', '\x2', '\x43C', 
		'\x441', '\a', '\x82', '\x2', '\x2', '\x43D', '\x441', '\a', '\x85', '\x2', 
		'\x2', '\x43E', '\x441', '\a', '\x98', '\x2', '\x2', '\x43F', '\x441', 
		'\x5', '\x130', '\x99', '\x2', '\x440', '\x42F', '\x3', '\x2', '\x2', 
		'\x2', '\x440', '\x430', '\x3', '\x2', '\x2', '\x2', '\x440', '\x431', 
		'\x3', '\x2', '\x2', '\x2', '\x440', '\x432', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x433', '\x3', '\x2', '\x2', '\x2', '\x440', '\x434', '\x3', 
		'\x2', '\x2', '\x2', '\x440', '\x435', '\x3', '\x2', '\x2', '\x2', '\x440', 
		'\x436', '\x3', '\x2', '\x2', '\x2', '\x440', '\x437', '\x3', '\x2', '\x2', 
		'\x2', '\x440', '\x438', '\x3', '\x2', '\x2', '\x2', '\x440', '\x439', 
		'\x3', '\x2', '\x2', '\x2', '\x440', '\x43A', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x440', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x440', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x440', 
		'\x43E', '\x3', '\x2', '\x2', '\x2', '\x440', '\x43F', '\x3', '\x2', '\x2', 
		'\x2', '\x441', '\x444', '\x3', '\x2', '\x2', '\x2', '\x442', '\x444', 
		'\x5', '\x132', '\x9A', '\x2', '\x443', '\x440', '\x3', '\x2', '\x2', 
		'\x2', '\x443', '\x442', '\x3', '\x2', '\x2', '\x2', '\x444', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\a', '\x83', '\x2', '\x2', 
		'\x446', '\x447', '\x5', '\xC2', '\x62', '\x2', '\x447', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x448', '\x44B', '\a', 'y', '\x2', '\x2', '\x449', 
		'\x44B', '\x5', '\x136', '\x9C', '\x2', '\x44A', '\x448', '\x3', '\x2', 
		'\x2', '\x2', '\x44A', '\x449', '\x3', '\x2', '\x2', '\x2', '\x44B', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\x44C', '\x44D', '\a', '\x86', '\x2', '\x2', 
		'\x44D', '\x44E', '\x5', '\xC8', '\x65', '\x2', '\x44E', '\x44F', '\a', 
		'\x84', '\x2', '\x2', '\x44F', '\x450', '\x5', '\xC6', '\x64', '\x2', 
		'\x450', '\x456', '\x3', '\x2', '\x2', '\x2', '\x451', '\x452', '\a', 
		'\x86', '\x2', '\x2', '\x452', '\x456', '\x5', '\xC8', '\x65', '\x2', 
		'\x453', '\x454', '\a', '\x86', '\x2', '\x2', '\x454', '\x456', '\x5', 
		'\xC6', '\x64', '\x2', '\x455', '\x44C', '\x3', '\x2', '\x2', '\x2', '\x455', 
		'\x451', '\x3', '\x2', '\x2', '\x2', '\x455', '\x453', '\x3', '\x2', '\x2', 
		'\x2', '\x456', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x457', '\x45D', 
		'\x5', '\xF8', '}', '\x2', '\x458', '\x459', '\x5', '\xF8', '}', '\x2', 
		'\x459', '\x45A', '\a', '\x84', '\x2', '\x2', '\x45A', '\x45B', '\x5', 
		'\xC6', '\x64', '\x2', '\x45B', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45C', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x458', '\x3', '\x2', '\x2', 
		'\x2', '\x45D', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', 
		'\a', '\x6', '\x2', '\x2', '\x45F', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x460', '\x461', '\a', '\x88', '\x2', '\x2', '\x461', '\x463', '\x5', 
		'\xCC', 'g', '\x2', '\x462', '\x464', '\x5', '\xCE', 'h', '\x2', '\x463', 
		'\x462', '\x3', '\x2', '\x2', '\x2', '\x463', '\x464', '\x3', '\x2', '\x2', 
		'\x2', '\x464', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x465', '\x466', 
		'\x5', '\xF8', '}', '\x2', '\x466', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x467', '\x468', '\a', '\x8C', '\x2', '\x2', '\x468', '\x469', '\x5', 
		'\xD2', 'j', '\x2', '\x469', '\x46A', '\a', '\x8D', '\x2', '\x2', '\x46A', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\x46B', '\x46D', '\x5', '\xCA', '\x66', 
		'\x2', '\x46C', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x46C', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x46F', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x470', '\x472', '\x5', '\xD4', 'k', '\x2', '\x471', 
		'\x470', '\x3', '\x2', '\x2', '\x2', '\x472', '\x475', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x471', '\x3', '\x2', '\x2', '\x2', '\x473', '\x474', 
		'\x3', '\x2', '\x2', '\x2', '\x474', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x475', '\x473', '\x3', '\x2', '\x2', '\x2', '\x476', '\x477', '\a', 
		'\x8C', '\x2', '\x2', '\x477', '\x478', '\x5', '\xD2', 'j', '\x2', '\x478', 
		'\x479', '\a', '\x8D', '\x2', '\x2', '\x479', '\x487', '\x3', '\x2', '\x2', 
		'\x2', '\x47A', '\x47B', '\a', '\x8E', '\x2', '\x2', '\x47B', '\x47C', 
		'\x5', '\xD2', 'j', '\x2', '\x47C', '\x47D', '\a', '\x8F', '\x2', '\x2', 
		'\x47D', '\x487', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x47F', '\a', 
		'\x90', '\x2', '\x2', '\x47F', '\x480', '\x5', '\xD2', 'j', '\x2', '\x480', 
		'\x481', '\a', '\x91', '\x2', '\x2', '\x481', '\x487', '\x3', '\x2', '\x2', 
		'\x2', '\x482', '\x487', '\x5', '\x118', '\x8D', '\x2', '\x483', '\x487', 
		'\x5', '\x10C', '\x87', '\x2', '\x484', '\x487', '\x5', '\x13A', '\x9E', 
		'\x2', '\x485', '\x487', '\x5', '\xD6', 'l', '\x2', '\x486', '\x476', 
		'\x3', '\x2', '\x2', '\x2', '\x486', '\x47A', '\x3', '\x2', '\x2', '\x2', 
		'\x486', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x486', '\x482', '\x3', 
		'\x2', '\x2', '\x2', '\x486', '\x483', '\x3', '\x2', '\x2', '\x2', '\x486', 
		'\x484', '\x3', '\x2', '\x2', '\x2', '\x486', '\x485', '\x3', '\x2', '\x2', 
		'\x2', '\x487', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x488', '\x48B', 
		'\t', '\x4', '\x2', '\x2', '\x489', '\x48B', '\x5', '\x132', '\x9A', '\x2', 
		'\x48A', '\x488', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x48B', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x4A5', '\a', '\x6', '\x2', '\x2', '\x48D', '\x4A5', '\a', '%', '\x2', 
		'\x2', '\x48E', '\x4A5', '\a', '&', '\x2', '\x2', '\x48F', '\x4A5', '\a', 
		'\x10', '\x2', '\x2', '\x490', '\x4A5', '\a', '\x14', '\x2', '\x2', '\x491', 
		'\x4A5', '\a', '\'', '\x2', '\x2', '\x492', '\x4A5', '\a', '(', '\x2', 
		'\x2', '\x493', '\x4A5', '\a', ')', '\x2', '\x2', '\x494', '\x4A5', '\a', 
		'\x13', '\x2', '\x2', '\x495', '\x4A5', '\a', '\x11', '\x2', '\x2', '\x496', 
		'\x4A5', '\a', '*', '\x2', '\x2', '\x497', '\x4A5', '\a', '+', '\x2', 
		'\x2', '\x498', '\x4A5', '\a', ',', '\x2', '\x2', '\x499', '\x49A', '\a', 
		',', '\x2', '\x2', '\x49A', '\x49B', '\a', '\x8C', '\x2', '\x2', '\x49B', 
		'\x49C', '\a', '-', '\x2', '\x2', '\x49C', '\x4A5', '\a', '\x8D', '\x2', 
		'\x2', '\x49D', '\x49E', '\a', ',', '\x2', '\x2', '\x49E', '\x49F', '\a', 
		'\x8C', '\x2', '\x2', '\x49F', '\x4A0', '\a', '.', '\x2', '\x2', '\x4A0', 
		'\x4A5', '\a', '\x8D', '\x2', '\x2', '\x4A1', '\x4A5', '\a', '/', '\x2', 
		'\x2', '\x4A2', '\x4A5', '\x5', '\xDC', 'o', '\x2', '\x4A3', '\x4A5', 
		'\x5', '\xDE', 'p', '\x2', '\x4A4', '\x48C', '\x3', '\x2', '\x2', '\x2', 
		'\x4A4', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x48E', '\x3', 
		'\x2', '\x2', '\x2', '\x4A4', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x490', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x491', '\x3', '\x2', '\x2', 
		'\x2', '\x4A4', '\x492', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x493', 
		'\x3', '\x2', '\x2', '\x2', '\x4A4', '\x494', '\x3', '\x2', '\x2', '\x2', 
		'\x4A4', '\x495', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x496', '\x3', 
		'\x2', '\x2', '\x2', '\x4A4', '\x497', '\x3', '\x2', '\x2', '\x2', '\x4A4', 
		'\x498', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x499', '\x3', '\x2', '\x2', 
		'\x2', '\x4A4', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A1', 
		'\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A2', '\x3', '\x2', '\x2', '\x2', 
		'\x4A4', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\x4A6', '\x4A8', '\x5', '\xD8', 'm', '\x2', '\x4A7', 
		'\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A9', '\x3', '\x2', '\x2', 
		'\x2', '\x4A9', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AA', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x4AB', '\x4C5', '\a', '\x30', '\x2', '\x2', '\x4AC', '\x4AD', '\a', 
		'\x30', '\x2', '\x2', '\x4AD', '\x4AE', '\a', '\x8C', '\x2', '\x2', '\x4AE', 
		'\x4AF', '\a', '\r', '\x2', '\x2', '\x4AF', '\x4C5', '\a', '\x8D', '\x2', 
		'\x2', '\x4B0', '\x4C5', '\a', '\x31', '\x2', '\x2', '\x4B1', '\x4B2', 
		'\a', '\x31', '\x2', '\x2', '\x4B2', '\x4B3', '\a', '\x8C', '\x2', '\x2', 
		'\x4B3', '\x4B4', '\a', '\r', '\x2', '\x2', '\x4B4', '\x4C5', '\a', '\x8D', 
		'\x2', '\x2', '\x4B5', '\x4C5', '\a', '\x32', '\x2', '\x2', '\x4B6', '\x4B7', 
		'\a', '\x32', '\x2', '\x2', '\x4B7', '\x4B8', '\a', '\x8C', '\x2', '\x2', 
		'\x4B8', '\x4B9', '\a', '\r', '\x2', '\x2', '\x4B9', '\x4C5', '\a', '\x8D', 
		'\x2', '\x2', '\x4BA', '\x4C5', '\a', '\x33', '\x2', '\x2', '\x4BB', '\x4BC', 
		'\a', '\x33', '\x2', '\x2', '\x4BC', '\x4BD', '\a', '\x8C', '\x2', '\x2', 
		'\x4BD', '\x4BE', '\a', '\r', '\x2', '\x2', '\x4BE', '\x4C5', '\a', '\x8D', 
		'\x2', '\x2', '\x4BF', '\x4C5', '\a', '\x34', '\x2', '\x2', '\x4C0', '\x4C1', 
		'\a', '\x34', '\x2', '\x2', '\x4C1', '\x4C2', '\a', '\x8C', '\x2', '\x2', 
		'\x4C2', '\x4C3', '\a', '\r', '\x2', '\x2', '\x4C3', '\x4C5', '\a', '\x8D', 
		'\x2', '\x2', '\x4C4', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4AC', 
		'\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4B0', '\x3', '\x2', '\x2', '\x2', 
		'\x4C4', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4B5', '\x3', 
		'\x2', '\x2', '\x2', '\x4C4', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4C4', 
		'\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4BB', '\x3', '\x2', '\x2', 
		'\x2', '\x4C4', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C0', 
		'\x3', '\x2', '\x2', '\x2', '\x4C5', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\x4C6', '\x4C7', '\t', '\x5', '\x2', '\x2', '\x4C7', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\x4C8', '\x4C9', '\b', 'q', '\x1', '\x2', '\x4C9', '\x4CB', 
		'\x5', '\xE2', 'r', '\x2', '\x4CA', '\x4CC', '\x5', '\xF2', 'z', '\x2', 
		'\x4CB', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4CC', '\x3', 
		'\x2', '\x2', '\x2', '\x4CC', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4CD', 
		'\x4CF', '\x5', '\xE4', 's', '\x2', '\x4CE', '\x4D0', '\x5', '\xF2', 'z', 
		'\x2', '\x4CF', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D0', 
		'\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D4', '\x3', '\x2', '\x2', '\x2', 
		'\x4D1', '\x4D2', '\a', '\x37', '\x2', '\x2', '\x4D2', '\x4D4', '\x5', 
		'\xF0', 'y', '\x2', '\x4D3', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4D3', 
		'\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4D1', '\x3', '\x2', '\x2', 
		'\x2', '\x4D4', '\x4DA', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D6', 
		'\f', '\x3', '\x2', '\x2', '\x4D6', '\x4D7', '\a', '\x38', '\x2', '\x2', 
		'\x4D7', '\x4D9', '\x5', '\xF0', 'y', '\x2', '\x4D8', '\x4D5', '\x3', 
		'\x2', '\x2', '\x2', '\x4D9', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DA', 
		'\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4DB', '\x3', '\x2', '\x2', 
		'\x2', '\x4DB', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DA', 
		'\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4DE', '\a', '\x8B', '\x2', '\x2', 
		'\x4DE', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\x5', 
		'\xC2', '\x62', '\x2', '\x4E0', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x4E1', 
		'\x4E3', '\x5', '\xD0', 'i', '\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E6', '\x5', '\xE8', 'u', '\x2', 
		'\x4E5', '\x4E7', '\a', '!', '\x2', '\x2', '\x4E6', '\x4E5', '\x3', '\x2', 
		'\x2', '\x2', '\x4E6', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', 
		'\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E9', '\x5', '\x132', '\x9A', 
		'\x2', '\x4E9', '\x4EA', '\x5', '\xF0', 'y', '\x2', '\x4EA', '\x4F4', 
		'\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4ED', '\x5', '\xD0', 'i', '\x2', 
		'\x4EC', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\x3', 
		'\x2', '\x2', '\x2', '\x4ED', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4EE', 
		'\x4EF', '\x5', '\xE8', 'u', '\x2', '\x4EF', '\x4F0', '\a', '\"', '\x2', 
		'\x2', '\x4F0', '\x4F1', '\x5', '\x132', '\x9A', '\x2', '\x4F1', '\x4F2', 
		'\x5', '\xF0', 'y', '\x2', '\x4F2', '\x4F4', '\x3', '\x2', '\x2', '\x2', 
		'\x4F3', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4EC', '\x3', 
		'\x2', '\x2', '\x2', '\x4F4', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x4F5', 
		'\x4F6', '\a', '\x8C', '\x2', '\x2', '\x4F6', '\x4FF', '\a', '\x8D', '\x2', 
		'\x2', '\x4F7', '\x4F8', '\a', '\x8C', '\x2', '\x2', '\x4F8', '\x4FA', 
		'\x5', '\xEA', 'v', '\x2', '\x4F9', '\x4FB', '\x5', '\x134', '\x9B', '\x2', 
		'\x4FA', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FB', '\x3', 
		'\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FC', 
		'\x4FD', '\a', '\x8D', '\x2', '\x2', '\x4FD', '\x4FF', '\x3', '\x2', '\x2', 
		'\x2', '\x4FE', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4FF', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x500', '\x506', '\x5', '\xEC', 'w', '\x2', '\x501', '\x502', '\x5', 
		'\xEC', 'w', '\x2', '\x502', '\x503', '\a', '\x84', '\x2', '\x2', '\x503', 
		'\x504', '\x5', '\xEA', 'v', '\x2', '\x504', '\x506', '\x3', '\x2', '\x2', 
		'\x2', '\x505', '\x500', '\x3', '\x2', '\x2', '\x2', '\x505', '\x501', 
		'\x3', '\x2', '\x2', '\x2', '\x506', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\x507', '\x509', '\x5', '\xD0', 'i', '\x2', '\x508', '\x507', '\x3', 
		'\x2', '\x2', '\x2', '\x508', '\x509', '\x3', '\x2', '\x2', '\x2', '\x509', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x50C', '\x5', '\xF6', 
		'|', '\x2', '\x50B', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50C', 
		'\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', '\x3', '\x2', '\x2', '\x2', 
		'\x50D', '\x512', '\x5', '\xF0', 'y', '\x2', '\x50E', '\x50F', '\x5', 
		'\xEE', 'x', '\x2', '\x50F', '\x510', '\x5', '\xF2', 'z', '\x2', '\x510', 
		'\x512', '\x3', '\x2', '\x2', '\x2', '\x511', '\x508', '\x3', '\x2', '\x2', 
		'\x2', '\x511', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x512', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\x513', '\x518', '\x5', '\x118', '\x8D', 
		'\x2', '\x514', '\x515', '\x5', '\x118', '\x8D', '\x2', '\x515', '\x516', 
		'\x5', '\x118', '\x8D', '\x2', '\x516', '\x518', '\x3', '\x2', '\x2', 
		'\x2', '\x517', '\x513', '\x3', '\x2', '\x2', '\x2', '\x517', '\x514', 
		'\x3', '\x2', '\x2', '\x2', '\x518', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x519', '\x51A', '\b', 'y', '\x1', '\x2', '\x51A', '\x529', '\x5', '\x104', 
		'\x83', '\x2', '\x51B', '\x529', '\x5', '\x106', '\x84', '\x2', '\x51C', 
		'\x529', '\x5', '\xE6', 't', '\x2', '\x51D', '\x529', '\x5', '\xF8', '}', 
		'\x2', '\x51E', '\x529', '\x5', '\xFC', '\x7F', '\x2', '\x51F', '\x529', 
		'\x5', '\x108', '\x85', '\x2', '\x520', '\x521', '\x5', '\xF4', '{', '\x2', 
		'\x521', '\x522', '\x5', '\xF0', 'y', '\x6', '\x522', '\x529', '\x3', 
		'\x2', '\x2', '\x2', '\x523', '\x529', '\a', ';', '\x2', '\x2', '\x524', 
		'\x529', '\a', '<', '\x2', '\x2', '\x525', '\x526', '\a', '<', '\x2', 
		'\x2', '\x526', '\x527', '\a', '\x83', '\x2', '\x2', '\x527', '\x529', 
		'\x5', '\xF8', '}', '\x2', '\x528', '\x519', '\x3', '\x2', '\x2', '\x2', 
		'\x528', '\x51B', '\x3', '\x2', '\x2', '\x2', '\x528', '\x51C', '\x3', 
		'\x2', '\x2', '\x2', '\x528', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x528', 
		'\x51E', '\x3', '\x2', '\x2', '\x2', '\x528', '\x51F', '\x3', '\x2', '\x2', 
		'\x2', '\x528', '\x520', '\x3', '\x2', '\x2', '\x2', '\x528', '\x523', 
		'\x3', '\x2', '\x2', '\x2', '\x528', '\x524', '\x3', '\x2', '\x2', '\x2', 
		'\x528', '\x525', '\x3', '\x2', '\x2', '\x2', '\x529', '\x536', '\x3', 
		'\x2', '\x2', '\x2', '\x52A', '\x52B', '\f', '\v', '\x2', '\x2', '\x52B', 
		'\x535', '\a', '\x80', '\x2', '\x2', '\x52C', '\x52D', '\f', '\n', '\x2', 
		'\x2', '\x52D', '\x535', '\a', '\x82', '\x2', '\x2', '\x52E', '\x52F', 
		'\f', '\b', '\x2', '\x2', '\x52F', '\x530', '\a', '\x83', '\x2', '\x2', 
		'\x530', '\x535', '\a', '\x39', '\x2', '\x2', '\x531', '\x532', '\f', 
		'\a', '\x2', '\x2', '\x532', '\x533', '\a', '\x83', '\x2', '\x2', '\x533', 
		'\x535', '\a', ':', '\x2', '\x2', '\x534', '\x52A', '\x3', '\x2', '\x2', 
		'\x2', '\x534', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x534', '\x52E', 
		'\x3', '\x2', '\x2', '\x2', '\x534', '\x531', '\x3', '\x2', '\x2', '\x2', 
		'\x535', '\x538', '\x3', '\x2', '\x2', '\x2', '\x536', '\x534', '\x3', 
		'\x2', '\x2', '\x2', '\x536', '\x537', '\x3', '\x2', '\x2', '\x2', '\x537', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x538', '\x536', '\x3', '\x2', '\x2', 
		'\x2', '\x539', '\x53B', '\a', '\x86', '\x2', '\x2', '\x53A', '\x53C', 
		'\x5', '\xD0', 'i', '\x2', '\x53B', '\x53A', '\x3', '\x2', '\x2', '\x2', 
		'\x53B', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x53C', '\x53E', '\x3', 
		'\x2', '\x2', '\x2', '\x53D', '\x53F', '\x5', '\xF6', '|', '\x2', '\x53E', 
		'\x53D', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x53F', '\x3', '\x2', '\x2', 
		'\x2', '\x53F', '\x540', '\x3', '\x2', '\x2', '\x2', '\x540', '\x541', 
		'\x5', '\xF0', 'y', '\x2', '\x541', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\x542', '\x543', '\a', '=', '\x2', '\x2', '\x543', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\x544', '\x545', '\a', '>', '\x2', '\x2', '\x545', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\x546', '\x548', '\x5', '\xFA', '~', '\x2', 
		'\x547', '\x549', '\x5', '\x12A', '\x96', '\x2', '\x548', '\x547', '\x3', 
		'\x2', '\x2', '\x2', '\x548', '\x549', '\x3', '\x2', '\x2', '\x2', '\x549', 
		'\x54C', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x54B', '\a', '\x83', '\x2', 
		'\x2', '\x54B', '\x54D', '\x5', '\xF8', '}', '\x2', '\x54C', '\x54A', 
		'\x3', '\x2', '\x2', '\x2', '\x54C', '\x54D', '\x3', '\x2', '\x2', '\x2', 
		'\x54D', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x54E', '\x54F', '\x5', 
		'\xC2', '\x62', '\x2', '\x54F', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x550', 
		'\x552', '\a', '\x8C', '\x2', '\x2', '\x551', '\x553', '\x5', '\xFE', 
		'\x80', '\x2', '\x552', '\x551', '\x3', '\x2', '\x2', '\x2', '\x552', 
		'\x553', '\x3', '\x2', '\x2', '\x2', '\x553', '\x554', '\x3', '\x2', '\x2', 
		'\x2', '\x554', '\x555', '\a', '\x8D', '\x2', '\x2', '\x555', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\x556', '\x55C', '\x5', '\x100', '\x81', 
		'\x2', '\x557', '\x558', '\x5', '\x100', '\x81', '\x2', '\x558', '\x559', 
		'\a', '\x84', '\x2', '\x2', '\x559', '\x55A', '\x5', '\xFE', '\x80', '\x2', 
		'\x55A', '\x55C', '\x3', '\x2', '\x2', '\x2', '\x55B', '\x556', '\x3', 
		'\x2', '\x2', '\x2', '\x55B', '\x557', '\x3', '\x2', '\x2', '\x2', '\x55C', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x55E', '\x5', '\x102', 
		'\x82', '\x2', '\x55E', '\x55F', '\x5', '\xF2', 'z', '\x2', '\x55F', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x560', '\x562', '\x5', '\xF0', 'y', '\x2', 
		'\x561', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x561', '\x560', '\x3', 
		'\x2', '\x2', '\x2', '\x562', '\x101', '\x3', '\x2', '\x2', '\x2', '\x563', 
		'\x564', '\x5', '\x118', '\x8D', '\x2', '\x564', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '\x565', '\x566', '\a', '\x8E', '\x2', '\x2', '\x566', '\x567', 
		'\x5', '\xF0', 'y', '\x2', '\x567', '\x568', '\a', '\x8F', '\x2', '\x2', 
		'\x568', '\x105', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\a', 
		'\x8E', '\x2', '\x2', '\x56A', '\x56B', '\x5', '\xF0', 'y', '\x2', '\x56B', 
		'\x56C', '\a', '\x86', '\x2', '\x2', '\x56C', '\x56D', '\x5', '\xF0', 
		'y', '\x2', '\x56D', '\x56E', '\a', '\x8F', '\x2', '\x2', '\x56E', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x56F', '\x572', '\x5', '\x10A', '\x86', 
		'\x2', '\x570', '\x571', '\a', '\x7F', '\x2', '\x2', '\x571', '\x573', 
		'\x5', '\x10A', '\x86', '\x2', '\x572', '\x570', '\x3', '\x2', '\x2', 
		'\x2', '\x573', '\x574', '\x3', '\x2', '\x2', '\x2', '\x574', '\x572', 
		'\x3', '\x2', '\x2', '\x2', '\x574', '\x575', '\x3', '\x2', '\x2', '\x2', 
		'\x575', '\x109', '\x3', '\x2', '\x2', '\x2', '\x576', '\x577', '\x5', 
		'\xF8', '}', '\x2', '\x577', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x578', 
		'\x57D', '\x5', '\x112', '\x8A', '\x2', '\x579', '\x57D', '\x5', '\x116', 
		'\x8C', '\x2', '\x57A', '\x57D', '\x5', '\x110', '\x89', '\x2', '\x57B', 
		'\x57D', '\x5', '\x10E', '\x88', '\x2', '\x57C', '\x578', '\x3', '\x2', 
		'\x2', '\x2', '\x57C', '\x579', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57A', 
		'\x3', '\x2', '\x2', '\x2', '\x57C', '\x57B', '\x3', '\x2', '\x2', '\x2', 
		'\x57D', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', '\a', 
		'?', '\x2', '\x2', '\x57F', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x580', 
		'\x581', '\t', '\x6', '\x2', '\x2', '\x581', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x582', '\x584', '\t', '\a', '\x2', '\x2', '\x583', '\x582', '\x3', 
		'\x2', '\x2', '\x2', '\x583', '\x584', '\x3', '\x2', '\x2', '\x2', '\x584', 
		'\x585', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', '\x5', '\x114', 
		'\x8B', '\x2', '\x586', '\x113', '\x3', '\x2', '\x2', '\x2', '\x587', 
		'\x588', '\t', '\b', '\x2', '\x2', '\x588', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x589', '\x58A', '\a', 'x', '\x2', '\x2', '\x58A', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x58B', '\x58E', '\a', 'y', '\x2', '\x2', '\x58C', 
		'\x58E', '\x5', '\x138', '\x9D', '\x2', '\x58D', '\x58B', '\x3', '\x2', 
		'\x2', '\x2', '\x58D', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x58F', '\x590', '\a', '\x81', '\x2', '\x2', 
		'\x590', '\x591', '\x5', '\x11C', '\x8F', '\x2', '\x591', '\x592', '\x5', 
		'\x130', '\x99', '\x2', '\x592', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x593', '\x598', '\x5', '\x11E', '\x90', '\x2', '\x594', '\x595', '\a', 
		'\x84', '\x2', '\x2', '\x595', '\x597', '\x5', '\x11E', '\x90', '\x2', 
		'\x596', '\x594', '\x3', '\x2', '\x2', '\x2', '\x597', '\x59A', '\x3', 
		'\x2', '\x2', '\x2', '\x598', '\x596', '\x3', '\x2', '\x2', '\x2', '\x598', 
		'\x599', '\x3', '\x2', '\x2', '\x2', '\x599', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x59A', '\x598', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x5A5', 
		'\x5', '\xFA', '~', '\x2', '\x59C', '\x59D', '\x5', '\xFA', '~', '\x2', 
		'\x59D', '\x59E', '\a', '\x86', '\x2', '\x2', '\x59E', '\x59F', '\x5', 
		'\xF8', '}', '\x2', '\x59F', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A0', 
		'\x5A1', '\x5', '\xFA', '~', '\x2', '\x5A1', '\x5A2', '\a', '\x86', '\x2', 
		'\x2', '\x5A2', '\x5A3', '\x5', '\x108', '\x85', '\x2', '\x5A3', '\x5A5', 
		'\x3', '\x2', '\x2', '\x2', '\x5A4', '\x59B', '\x3', '\x2', '\x2', '\x2', 
		'\x5A4', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A0', '\x3', 
		'\x2', '\x2', '\x2', '\x5A5', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x5A6', 
		'\x5A7', '\a', '\x42', '\x2', '\x2', '\x5A7', '\x5A8', '\x5', '\x122', 
		'\x92', '\x2', '\x5A8', '\x121', '\x3', '\x2', '\x2', '\x2', '\x5A9', 
		'\x5AE', '\x5', '\x124', '\x93', '\x2', '\x5AA', '\x5AB', '\a', '\x84', 
		'\x2', '\x2', '\x5AB', '\x5AD', '\x5', '\x124', '\x93', '\x2', '\x5AC', 
		'\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\x5B0', '\x3', '\x2', '\x2', 
		'\x2', '\x5AE', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AF', 
		'\x3', '\x2', '\x2', '\x2', '\x5AF', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x5B0', '\x5AE', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B4', '\x5', 
		'\x126', '\x94', '\x2', '\x5B2', '\x5B4', '\x5', '\x128', '\x95', '\x2', 
		'\x5B3', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B2', '\x3', 
		'\x2', '\x2', '\x2', '\x5B4', '\x125', '\x3', '\x2', '\x2', '\x2', '\x5B5', 
		'\x5B6', '\x5', '\xF8', '}', '\x2', '\x5B6', '\x5B7', '\a', '\x86', '\x2', 
		'\x2', '\x5B7', '\x5B8', '\x5', '\xF8', '}', '\x2', '\x5B8', '\x5BE', 
		'\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BA', '\x5', '\xF8', '}', '\x2', 
		'\x5BA', '\x5BB', '\a', '\x86', '\x2', '\x2', '\x5BB', '\x5BC', '\x5', 
		'\x108', '\x85', '\x2', '\x5BC', '\x5BE', '\x3', '\x2', '\x2', '\x2', 
		'\x5BD', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5BD', '\x5B9', '\x3', 
		'\x2', '\x2', '\x2', '\x5BE', '\x127', '\x3', '\x2', '\x2', '\x2', '\x5BF', 
		'\x5C0', '\x5', '\xF8', '}', '\x2', '\x5C0', '\x5C1', '\x5', '\x13A', 
		'\x9E', '\x2', '\x5C1', '\x5C2', '\x5', '\xF0', 'y', '\x2', '\x5C2', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C4', '\a', '\x81', '\x2', '\x2', 
		'\x5C4', '\x5C5', '\x5', '\x12C', '\x97', '\x2', '\x5C5', '\x5C6', '\x5', 
		'\x130', '\x99', '\x2', '\x5C6', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x5C7', '\x5CC', '\x5', '\x12E', '\x98', '\x2', '\x5C8', '\x5C9', '\a', 
		'\x84', '\x2', '\x2', '\x5C9', '\x5CB', '\x5', '\x12E', '\x98', '\x2', 
		'\x5CA', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CE', '\x3', 
		'\x2', '\x2', '\x2', '\x5CC', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CC', 
		'\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x5CE', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D0', 
		'\x5', '\xF0', 'y', '\x2', '\x5D0', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x5D1', '\x5D2', '\a', '\x43', '\x2', '\x2', '\x5D2', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x5D3', '\x5D4', '\a', '\x44', '\x2', '\x2', '\x5D4', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x5D5', '\x5D6', '\a', '\x45', '\x2', 
		'\x2', '\x5D6', '\x135', '\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5D8', 
		'\t', '\t', '\x2', '\x2', '\x5D8', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x5D9', '\x5DA', '\t', '\n', '\x2', '\x2', '\x5DA', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x5DB', '\x5DE', '\x5', '\x13C', '\x9F', '\x2', '\x5DC', 
		'\x5DE', '\a', '\x93', '\x2', '\x2', '\x5DD', '\x5DB', '\x3', '\x2', '\x2', 
		'\x2', '\x5DD', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DE', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x5DF', '\x600', '\a', '\x43', '\x2', '\x2', 
		'\x5E0', '\x5E1', '\a', '\x43', '\x2', '\x2', '\x5E1', '\x600', '\a', 
		'\x43', '\x2', '\x2', '\x5E2', '\x5E3', '\a', '\x43', '\x2', '\x2', '\x5E3', 
		'\x5E4', '\a', '\x43', '\x2', '\x2', '\x5E4', '\x600', '\a', '\x43', '\x2', 
		'\x2', '\x5E5', '\x5E6', '\a', '\x43', '\x2', '\x2', '\x5E6', '\x5E7', 
		'\a', '\x43', '\x2', '\x2', '\x5E7', '\x5E8', '\a', '\x43', '\x2', '\x2', 
		'\x5E8', '\x5E9', '\a', '\x43', '\x2', '\x2', '\x5E9', '\x600', '\a', 
		'\x43', '\x2', '\x2', '\x5EA', '\x5EB', '\a', '\x43', '\x2', '\x2', '\x5EB', 
		'\x5EC', '\a', '\x43', '\x2', '\x2', '\x5EC', '\x5ED', '\a', '\x43', '\x2', 
		'\x2', '\x5ED', '\x5EE', '\a', '\x43', '\x2', '\x2', '\x5EE', '\x5EF', 
		'\a', '\x43', '\x2', '\x2', '\x5EF', '\x600', '\a', '\x43', '\x2', '\x2', 
		'\x5F0', '\x5F1', '\a', '\x43', '\x2', '\x2', '\x5F1', '\x5F2', '\a', 
		'\x43', '\x2', '\x2', '\x5F2', '\x5F3', '\a', '\x43', '\x2', '\x2', '\x5F3', 
		'\x5F4', '\a', '\x43', '\x2', '\x2', '\x5F4', '\x5F5', '\a', '\x43', '\x2', 
		'\x2', '\x5F5', '\x5F6', '\a', '\x43', '\x2', '\x2', '\x5F6', '\x600', 
		'\a', '\x43', '\x2', '\x2', '\x5F7', '\x5F8', '\a', '\x43', '\x2', '\x2', 
		'\x5F8', '\x5F9', '\a', '\x43', '\x2', '\x2', '\x5F9', '\x5FA', '\a', 
		'\x43', '\x2', '\x2', '\x5FA', '\x5FB', '\a', '\x43', '\x2', '\x2', '\x5FB', 
		'\x5FC', '\a', '\x43', '\x2', '\x2', '\x5FC', '\x5FD', '\a', '\x43', '\x2', 
		'\x2', '\x5FD', '\x5FE', '\a', '\x43', '\x2', '\x2', '\x5FE', '\x600', 
		'\a', '\x43', '\x2', '\x2', '\x5FF', '\x5DF', '\x3', '\x2', '\x2', '\x2', 
		'\x5FF', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5FF', '\x5E2', '\x3', 
		'\x2', '\x2', '\x2', '\x5FF', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5FF', 
		'\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5FF', '\x5F0', '\x3', '\x2', '\x2', 
		'\x2', '\x5FF', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x600', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\x141', '\x147', '\x156', '\x165', 
		'\x168', '\x16C', '\x177', '\x182', '\x186', '\x189', '\x18D', '\x190', 
		'\x193', '\x198', '\x19D', '\x19F', '\x1B5', '\x1B8', '\x1BB', '\x1BF', 
		'\x1C2', '\x1C5', '\x1C9', '\x1CC', '\x1D3', '\x1D8', '\x1DB', '\x1E0', 
		'\x1EA', '\x1ED', '\x1F1', '\x1F4', '\x1F7', '\x1FA', '\x1FF', '\x202', 
		'\x205', '\x209', '\x20F', '\x213', '\x216', '\x219', '\x223', '\x227', 
		'\x230', '\x234', '\x23C', '\x240', '\x243', '\x24D', '\x251', '\x259', 
		'\x25C', '\x25F', '\x264', '\x267', '\x26A', '\x274', '\x27C', '\x27F', 
		'\x282', '\x287', '\x28A', '\x28D', '\x292', '\x296', '\x29B', '\x29E', 
		'\x2A1', '\x2A5', '\x2AD', '\x2B7', '\x2BA', '\x2BF', '\x2C9', '\x2D6', 
		'\x2DB', '\x2E9', '\x2F4', '\x2FC', '\x304', '\x315', '\x31B', '\x31E', 
		'\x323', '\x328', '\x32B', '\x332', '\x338', '\x346', '\x349', '\x34C', 
		'\x353', '\x358', '\x35B', '\x360', '\x363', '\x366', '\x36B', '\x36F', 
		'\x372', '\x375', '\x378', '\x37E', '\x384', '\x38D', '\x390', '\x393', 
		'\x397', '\x39B', '\x39D', '\x3A7', '\x3AD', '\x3B1', '\x3B4', '\x3B8', 
		'\x3BD', '\x3BF', '\x3C2', '\x3C5', '\x3C9', '\x3CC', '\x3D1', '\x3D4', 
		'\x3D8', '\x3DB', '\x3DE', '\x3E8', '\x3EF', '\x3F3', '\x3F8', '\x3FB', 
		'\x401', '\x40B', '\x411', '\x419', '\x421', '\x429', '\x42D', '\x440', 
		'\x443', '\x44A', '\x455', '\x45C', '\x463', '\x46E', '\x473', '\x486', 
		'\x48A', '\x4A4', '\x4A9', '\x4C4', '\x4CB', '\x4CF', '\x4D3', '\x4DA', 
		'\x4E2', '\x4E6', '\x4EC', '\x4F3', '\x4FA', '\x4FE', '\x505', '\x508', 
		'\x50B', '\x511', '\x517', '\x528', '\x534', '\x536', '\x53B', '\x53E', 
		'\x548', '\x54C', '\x552', '\x55B', '\x561', '\x574', '\x57C', '\x583', 
		'\x58D', '\x598', '\x5A4', '\x5AE', '\x5B3', '\x5BD', '\x5CC', '\x5DD', 
		'\x5FF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
