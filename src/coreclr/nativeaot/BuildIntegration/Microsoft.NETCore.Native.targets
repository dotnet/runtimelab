<!--
***********************************************************************************************
Microsoft.NETCore.Native.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the build process for native AOT compilation.

Licensed to the .NET Foundation under one or more agreements.
The .NET Foundation licenses this file to you under the MIT license.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(_targetArchitecture)' == 'wasm'">
    <NativeCodeGen>llvm</NativeCodeGen>
  </PropertyGroup>

  <!-- Set defaults for unspecified properties -->
  <PropertyGroup>
    <StripSymbols Condition="'$(StripSymbols)' == '' and '$(_targetOS)' != 'win'">true</StripSymbols>
    <NativeLib Condition="'$(OutputType)' == 'Library' and '$(NativeLib)' == '' and '$(IlcMultiModule)' != 'true'">Shared</NativeLib>
    <NativeIntermediateOutputPath Condition="'$(NativeIntermediateOutputPath)' == ''">$(IntermediateOutputPath)native\</NativeIntermediateOutputPath>
    <NativeOutputPath Condition="'$(NativeOutputPath)' == ''">$(OutputPath)native\</NativeOutputPath>
    <NativeCompilationDuringPublish Condition="'$(NativeCompilationDuringPublish)' == ''">true</NativeCompilationDuringPublish>
    <IlcBuildTasksPath Condition="'$(IlcBuildTasksPath)' == ''">$(MSBuildThisFileDirectory)..\tools\netstandard\ILCompiler.Build.Tasks.dll</IlcBuildTasksPath>
    <NativeDebugSymbols Condition="$(DebugType) != 'none' and $(DebugType) != ''">true</NativeDebugSymbols>
    <!-- Workaround for https://github.com/dotnet/runtimelab/issues/771 -->
    <ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
    <PublishTrimmed Condition="'$(PublishTrimmed)' == ''">true</PublishTrimmed>
    <IlcPgoOptimize Condition="'$(IlcPgoOptimize)' == '' and '$(OptimizationPreference)' == 'Speed'">true</IlcPgoOptimize>
    <RunILLink>false</RunILLink>
    <_IsiOSLikePlatform Condition="'$(_targetOS)' == 'maccatalyst' or $(_targetOS.StartsWith('ios')) or $(_targetOS.StartsWith('tvos'))">true</_IsiOSLikePlatform>
    <_IsApplePlatform Condition="'$(_targetOS)' == 'osx' or '$(_IsiOSLikePlatform)' == 'true'">true</_IsApplePlatform>
  </PropertyGroup>

  <!-- Set up default feature switches -->
  <PropertyGroup>
    <UseSystemResourceKeys Condition="$(IlcDisableReflection) == 'true'">true</UseSystemResourceKeys>
    <EventSourceSupport Condition="$(IlcDisableReflection) == 'true'">false</EventSourceSupport>
    <EventSourceSupport Condition="$(EventSourceSupport) == ''">false</EventSourceSupport>
    <UseWindowsThreadPool Condition="'$(UseWindowsThreadPool)' == '' and '$(_targetOS)' == 'win'">true</UseWindowsThreadPool>
    <DynamicCodeSupport Condition="'$(DynamicCodeSupport)' == ''">false</DynamicCodeSupport>
  </PropertyGroup>

  <!-- Configure LINQ expressions -->
  <ItemGroup>
    <RuntimeHostConfigurationOption Include="System.Linq.Expressions.CanEmitObjectArrayDelegate"
                                    Value="false"
                                    Trim="true" />
  </ItemGroup>

  <PropertyGroup Condition="'$(SuppressAotAnalysisWarnings)' == 'true'">
    <EnableAotAnalyzer Condition="'$(EnableAotAnalyzer)' == ''">false</EnableAotAnalyzer>
  </PropertyGroup>

  <PropertyGroup>
    <NativeObjectExt Condition="'$(_targetOS)' == 'win'">.obj</NativeObjectExt>
    <NativeObjectExt Condition="'$(_targetOS)' != 'win'">.o</NativeObjectExt>
    <LlvmObjectExt Condition="'$(NativeCodeGen)' == 'llvm'">.bc</LlvmObjectExt>

    <LibFileExt Condition="'$(_targetOS)' == 'win'">.lib</LibFileExt>
    <LibFileExt Condition="'$(_targetOS)' != 'win'">.a</LibFileExt>

    <IlcOutputFileExt Condition="$(IlcOutputFileExt) == ''">$(NativeObjectExt)</IlcOutputFileExt>
    <IlcOutputFileExt Condition="'$(NativeCodeGen)' == 'llvm'">$(LlvmObjectExt)</IlcOutputFileExt>

    <IsNativeExecutable Condition="'$(OutputType)' == 'Exe' or '$(OutputType)' == 'WinExe'">true</IsNativeExecutable>

    <NativeBinaryExt Condition="'$(IsNativeExecutable)' == 'true' and '$(_targetOS)' == 'win'">.exe</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' == 'true' and '$(_targetOS)' != 'win'"></NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(_targetOS)' == 'win' and '$(NativeLib)' == 'Shared'">.dll</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(_IsApplePlatform)' == 'true' and '$(NativeLib)' == 'Shared'">.dylib</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true' and '$(NativeLib)' == 'Shared'">.so</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(_targetOS)' == 'win' and '$(NativeLib)' == 'Static'">.lib</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(_targetOS)' != 'win' and '$(NativeLib)' == 'Static'">.a</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(_targetOS)' == 'browser'">.html</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(_targetOS)' == 'wasi'">.wasm</NativeBinaryExt>

    <NativeSymbolExt Condition="'$(NativeSymbolExt)' == '' and '$(_IsApplePlatform)' == 'true'">.dsym</NativeSymbolExt>
    <NativeSymbolExt Condition="'$(NativeSymbolExt)' == '' and '$(_targetOS)' == 'win'">.pdb</NativeSymbolExt>
    <NativeSymbolExt Condition="'$(NativeSymbolExt)' == ''">.dbg</NativeSymbolExt>

    <ExportsFileExt Condition="'$(_targetOS)' == 'win'">.def</ExportsFileExt>
    <ExportsFileExt Condition="'$(_targetOS)' != 'win'">.exports</ExportsFileExt>

    <NativeObject>$(NativeIntermediateOutputPath)$(TargetName)$(NativeObjectExt)</NativeObject>
    <NativeBinary>$(NativeOutputPath)$(TargetName)$(NativeBinaryExt)</NativeBinary>
    <IlcExportUnmanagedEntrypoints Condition="'$(IlcExportUnmanagedEntrypoints)' == '' and '$(NativeLib)' == 'Shared'">true</IlcExportUnmanagedEntrypoints>
    <ExportsFile Condition="$(IlcExportUnmanagedEntrypoints) == 'true' and $(ExportsFile) == ''">$(NativeIntermediateOutputPath)$(TargetName)$(ExportsFileExt)</ExportsFile>

    <IlcCompileOutput>$(NativeObject)</IlcCompileOutput>

    <LinkNativeDependsOn>IlcCompile</LinkNativeDependsOn>
    <LinkNativeDependsOn Condition="$(NativeCodeGen) == 'llvm'">CompileWasmObjects</LinkNativeDependsOn>
    <LinkNativeDependsOn Condition="'$(_targetOS)' == 'browser'">$(LinkNativeDependsOn);PrepareWasmRuntimeEmccFlags</LinkNativeDependsOn>

    <LinkNativeDependsOnSingleOrLlvm>LinkNativeSingle</LinkNativeDependsOnSingleOrLlvm>
    <LinkNativeDependsOnSingleOrLlvm Condition="$(NativeCodeGen) == 'llvm'">LinkNativeLlvm</LinkNativeDependsOnSingleOrLlvm>

    <FrameworkLibPath Condition="'$(FrameworkLibPath)' == ''">$(NativeOutputPath)</FrameworkLibPath>
    <FrameworkObjPath Condition="'$(FrameworkObjPath)' == ''">$(NativeIntermediateOutputPath)</FrameworkObjPath>

    <SharedLibrary Condition="'$(_targetOS)' == 'win'">$(FrameworkLibPath)\Framework$(LibFileExt)</SharedLibrary>
    <SharedLibrary Condition="'$(_targetOS)' != 'win'">$(FrameworkLibPath)\libframework$(LibFileExt)</SharedLibrary>
    <IlcDynamicBuildPropertyDependencies>SetupProperties</IlcDynamicBuildPropertyDependencies>
  </PropertyGroup>

  <PropertyGroup Condition="'$(NativeCodeGen)' == 'llvm'">
    <!-- These LLVM options are public and supported. -->
    <WasmEnableJSBigIntIntegration Condition="'$(WasmEnableJSBigIntIntegration)' == ''">true</WasmEnableJSBigIntIntegration>
    <!-- Most browsers support WASM EH, so we enable it by default. This is aligned with the upstream behavior. -->
    <WasmEnableExceptionHandling Condition="'$(WasmEnableExceptionHandling)' == '' and '$(_targetOS)' == 'browser'">true</WasmEnableExceptionHandling>

    <!-- These LLVM options are internal and not supported. -->
    <WasmOptimizationSetting Condition="$(Optimize) == 'true' and $(OptimizationPreference) != 'Size' and '$(_targetOS)' == 'browser'">-O3</WasmOptimizationSetting>
    <!-- TODO-LLVM: test -O1/-O2/-O3 for size with Wasi SDK -->
    <WasmOptimizationSetting Condition="$(Optimize) == 'true' and $(OptimizationPreference) != 'Size' and '$(_targetOS)' == 'wasi'">-O2</WasmOptimizationSetting>
    <WasmOptimizationSetting Condition="$(Optimize) == 'true' and $(OptimizationPreference) == 'Size'">-Oz</WasmOptimizationSetting>

    <IlcLlvmTarget Condition="'$(_targetOS)' == 'wasi'">wasm32-unknown-wasi</IlcLlvmTarget>
    <IlcWasmStackSize>1048576</IlcWasmStackSize> <!-- 1MB -->
    <IlcWasmGlobalBase>1024</IlcWasmGlobalBase> <!-- This value is also hardcoded in the compiler -->
    <IlcLlvmExceptionHandlingModel Condition="'$(WasmEnableExceptionHandling)' == 'true'">wasm</IlcLlvmExceptionHandlingModel>
    <IlcLlvmExceptionHandlingModel Condition="'$(IlcLlvmExceptionHandlingModel)' == '' and '$(targetOS)' == 'browser'">cpp</IlcLlvmExceptionHandlingModel>
    <IlcLlvmExceptionHandlingModel Condition="'$(IlcLlvmExceptionHandlingModel)' == ''">emulated</IlcLlvmExceptionHandlingModel>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IlcCompileDependsOn)'=='' and '$(NativeCompilationDuringPublish)' != 'false'">
    <IlcCompileDependsOn Condition="'$(BuildingFrameworkLibrary)' != 'true'">Compile;ComputeIlcCompileInputs</IlcCompileDependsOn>
    <IlcCompileDependsOn Condition="'$(IlcMultiModule)' == 'true' and '$(BuildingFrameworkLibrary)' != 'true'">$(IlcCompileDependsOn);BuildFrameworkLib</IlcCompileDependsOn>
    <IlcCompileDependsOn>$(IlcCompileDependsOn);SetupOSSpecificProps</IlcCompileDependsOn>
    <IlcCompileDependsOn>$(IlcCompileDependsOn);PrepareForILLink</IlcCompileDependsOn>
  </PropertyGroup>

  <ItemGroup Condition="$(IlcSystemModule) == ''">
    <UnmanagedEntryPointsAssembly Include="System.Private.CoreLib" />
    <AutoInitializedAssemblies Include="System.Private.CoreLib" />
    <AutoInitializedAssemblies Include="System.Private.StackTraceMetadata" Condition="$(StackTraceSupport) != 'false'" />
    <AutoInitializedAssemblies Include="System.Private.TypeLoader" />
    <AutoInitializedAssemblies Include="System.Private.Reflection.Execution" Condition="$(IlcDisableReflection) != 'true'" />
    <AutoInitializedAssemblies Include="System.Private.DisabledReflection" Condition="$(IlcDisableReflection) == 'true'" />
  </ItemGroup>

  <ItemDefinitionGroup>
    <ManagedBinary>
      <IlcRspFile>$(NativeIntermediateOutputPath)\%(Filename).ilc.rsp</IlcRspFile>
      <IlcOutputFile>$(NativeIntermediateOutputPath)\%(Filename)$(IlcOutputFileExt)</IlcOutputFile>
    </ManagedBinary>
  </ItemDefinitionGroup>

  <Target Name="_ComputeManagedAssemblyForILLink"
          AfterTargets="_ComputeManagedAssemblyToLink"
          Condition="'$(NativeCompilationDuringPublish)' == 'true'">
    <ItemGroup>
      <ManagedAssemblyToLink Remove="@(ManagedAssemblyToLink)" />
      <ManagedAssemblyToLink Include="@(DefaultFrameworkAssemblies);@(_ManagedResolvedAssembliesToPublish);@(ManagedBinary)" />
    </ItemGroup>
  </Target>

  <!-- The properties below need to be defined only after we've found the correct runtime package reference -->
  <Target Name="SetupProperties" DependsOnTargets="$(IlcSetupPropertiesDependsOn)" BeforeTargets="Publish">
    <ItemGroup>
      <_NETCoreAppFrameworkReference Include="@(ResolvedFrameworkReference)" Condition="'%(ResolvedFrameworkReference.RuntimePackName)' == 'Microsoft.NETCore.App.Runtime.NativeAOT.$(RuntimeIdentifier)'" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Define paths used in build targets to point to the runtime-specific ILCompiler implementation -->
      <IlcToolsPath Condition="'$(IlcToolsPath)' == ''">$(IlcHostPackagePath)\tools\</IlcToolsPath>
      <IlcFrameworkPath Condition="'$(IlcFrameworkPath)' == '' and '$(PublishAotUsingRuntimePack)' != 'true'">$(RuntimePackagePath)\framework\</IlcFrameworkPath>
      <_NETCoreAppRuntimePackPath>%(_NETCoreAppFrameworkReference.RuntimePackPath)/runtimes/$(RuntimeIdentifier)/</_NETCoreAppRuntimePackPath>
      <IlcFrameworkNativePath Condition="'$(IlcFrameworkNativePath)' == '' and '$(PublishAotUsingRuntimePack)' == 'true'">$(_NETCoreAppRuntimePackPath)\native\</IlcFrameworkNativePath>
      <IlcFrameworkNativePath Condition="'$(IlcFrameworkNativePath)' == '' and '$(PublishAotUsingRuntimePack)' != 'true'">$(RuntimePackagePath)\framework\</IlcFrameworkNativePath>
      <IlcSdkPath Condition="'$(IlcSdkPath)' == '' and '$(PublishAotUsingRuntimePack)' == 'true'">$(IlcFrameworkNativePath)</IlcSdkPath>
      <IlcSdkPath Condition="'$(IlcSdkPath)' == '' and '$(PublishAotUsingRuntimePack)' != 'true'">$(RuntimePackagePath)\sdk\</IlcSdkPath>
      <IlcMibcPath Condition="'$(IlcMibcPath)' == ''">$(RuntimePackagePath)\mibc\</IlcMibcPath>
    </PropertyGroup>

    <ItemGroup Condition="'$(PublishAotUsingRuntimePack)' == 'true'">
      <PrivateSdkAssemblies Include="$(IlcSdkPath)*.dll"/>
      <FrameworkAssemblies Include="@(RuntimePackAsset)" Condition="'%(Extension)' == '.dll'" />
      <DefaultFrameworkAssemblies Include="@(FrameworkAssemblies)" />
    </ItemGroup>

    <ItemGroup Condition="'$(PublishAotUsingRuntimePack)' != 'true'">
      <PrivateSdkAssemblies Include="$(IlcSdkPath)*.dll"/>
      <!-- Exclude unmanaged dlls -->
      <FrameworkAssemblies Include="$(IlcFrameworkPath)*.dll" Exclude="$(IlcFrameworkPath)*.Native.dll;$(IlcFrameworkPath)msquic.dll" />

      <DefaultFrameworkAssemblies Include="@(PrivateSdkAssemblies)" />
      <DefaultFrameworkAssemblies Include="@(FrameworkAssemblies)" />
    </ItemGroup>

    <ItemGroup>
      <MibcFile Include="$(IlcMibcPath)*.mibc" Condition="'$(IlcPgoOptimize)' == 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="ComputeIlcCompileInputs" DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)" BeforeTargets="Publish">
    <ItemGroup>
      <ManagedBinary Condition="$(BuildingFrameworkLibrary) != 'true'" Include="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" />
      <IlcCompileInput Include="@(ManagedBinary)" />
      <IlcReference Include="@(DefaultFrameworkAssemblies)" />
    </ItemGroup>
  </Target>

  <!--
    BuildFrameworkLib is invoked before IlcCompile in multi-module builds to
    produce the shared framework library on demand
  -->
  <Target Name="BuildFrameworkLib" Condition="'$(DisableFrameworkLibGeneration)' != 'true'" DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)">
    <ItemGroup>
     <!-- This builds the project with the ILC implementation in the identified runtime package to avoid resolving it again  -->
      <ProjectToBuild Include="$(MSBuildThisFileDirectory)BuildFrameworkNativeObjects.proj">
        <AdditionalProperties>
          IntermediateOutputPath=$(IntermediateOutputPath);
          FrameworkLibPath=$(FrameworkLibPath);
          FrameworkObjPath=$(FrameworkObjPath);
          RuntimePackagePath=$(RuntimePackagePath);
          IlcHostPackagePath=$(IlcHostPackagePath);
          TargetArchitecture=$(_targetArchitecture);
        </AdditionalProperties>
      </ProjectToBuild>
    </ItemGroup>
    <MSBuild Projects="@(ProjectToBuild)" BuildInParallel="true" />
  </Target>

  <Target Name="WriteIlcRspFileForCompilation"
      Outputs="%(ManagedBinary.IlcRspFile)"
      DependsOnTargets="$(IlcCompileDependsOn)">

    <ItemGroup>
      <!-- Grab the raw ItemGroup that ILLinker accepts in two form: as file names, and as assembly names -->
      <_IlcRootedAssembliesRaw Include="@(TrimmerRootAssembly)" Condition="%(TrimmerRootAssembly.RootMode) != 'EntryPoint'" />
      <_IlcRootedAssembliesRaw Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimMode) == 'copy'" />
      <_IlcConditionallyRootedAssembliesRaw Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimMode) == 'copyused'" />
      <_IlcTrimmedAssembliesRaw Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimMode) == 'link'" />
      <_IlcNoSingleWarnAssembliesRaw Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimmerSingleWarn) == 'false'" />

      <!-- Now process the raw ItemGroup into the form that ILC accepts: assembly names only -->
      <!-- Use the logic that ILLinker uses: if the file exists, this is a file name. Otherwise it's an assembly name -->
      <_IlcRootedAssemblies Include="@(_IlcRootedAssembliesRaw->'%(Filename)')" Condition="Exists('%(Identity)')" />
      <_IlcRootedAssemblies Include="@(_IlcRootedAssembliesRaw)" Condition="!Exists('%(Identity)')" />
      <_IlcConditionallyRootedAssemblies Include="@(_IlcConditionallyRootedAssembliesRaw->'%(Filename)')" Condition="Exists('%(Identity)')" />
      <_IlcConditionallyRootedAssemblies Include="@(_IlcConditionallyRootedAssembliesRaw)" Condition="!Exists('%(Identity)')" />
      <_IlcTrimmedAssemblies Include="@(_IlcTrimmedAssembliesRaw->'%(Filename)')" Condition="Exists('%(Identity)')" />
      <_IlcTrimmedAssemblies Include="@(_IlcTrimmedAssembliesRaw)" Condition="!Exists('%(Identity)')" />
      <_IlcNoSingleWarnAssemblies Include="@(_IlcNoSingleWarnAssembliesRaw->'%(Filename)')" Condition="Exists('%(Identity)')" />
      <_IlcNoSingleWarnAssemblies Include="@(_IlcNoSingleWarnAssembliesRaw)" Condition="!Exists('%(Identity)')" />
    </ItemGroup>

    <ItemGroup>
      <IlcArg Include="@(IlcCompileInput)" />
      <IlcArg Include="-o:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename)$(IlcOutputFileExt)" />
      <IlcArg Include="@(IlcReference->'-r:%(Identity)')" />
      <IlcArg Include="@(IlcSatelliteAssembly->'--satellite:%(Identity)')" />
      <IlcArg Include="@(MibcFile->'--mibc:%(Identity)')" />
      <IlcArg Condition="$(IlcGenerateMetadataLog) == 'true'" Include="--metadatalog:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).metadata.csv" />
      <IlcArg Condition="$(_targetOS) != ''" Include="--targetos:$(_targetOS)" />
      <IlcArg Condition="$(_targetArchitecture) != ''" Include="--targetarch:$(_targetArchitecture)" />
      <IlcArg Condition="$(IlcMultiModule) == 'true'" Include="--multifile" />
      <IlcArg Condition="$(IlcMultiModule) != 'true' and '$(IlcDehydrate)' != 'false' and '$(ControlFlowGuard)' != 'Guard' and '$(_targetArchitecture)' != 'wasm'" Include="--dehydrate" />
      <IlcArg Condition="$(Optimize) == 'true'" Include="-O" />
      <IlcArg Condition="$(NativeDebugSymbols) == 'true'" Include="-g" />
      <IlcArg Condition="$(IlcDwarfVersion) == '5'" Include="--gdwarf-5" />
      <IlcArg Condition="$(IlcGenerateMapFile) == 'true'" Include="--map:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).map.xml" />
      <IlcArg Condition="$(IlcGenerateMstatFile) == 'true'" Include="--mstat:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).mstat" />
      <IlcArg Condition="$(IlcGenerateDgmlFile) == 'true'" Include="--dgmllog:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).codegen.dgml.xml" />
      <IlcArg Condition="$(IlcGenerateDgmlFile) == 'true'" Include="--scandgmllog:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).scan.dgml.xml" />
      <IlcArg Include="@(RdXmlFile->'--rdxml:%(FullPath)')" />
      <IlcArg Include="@(TrimmerRootDescriptor->'--descriptor:%(FullPath)')" />
      <IlcArg Condition="'$(NativeLib)' != ''" Include="--nativelib" />
      <IlcArg Condition="'$(CustomNativeMain)' == 'true'" Include="--splitinit" />
      <IlcArg Condition="$(ExportsFile) != ''" Include="--exportsfile:$(ExportsFile)" />
      <IlcArg Include="@(AutoInitializedAssemblies->'--initassembly:%(Identity)')" />
      <IlcArg Include="@(DirectPInvoke->'--directpinvoke:%(Identity)')" />
      <IlcArg Include="@(DirectPInvokeList->'--directpinvokelist:%(Identity)')" />
      <IlcArg Include="@(WasmImport->'--wasmimport:%(Identity)')" />
      <IlcArg Include="@(WasmImportList->'--wasmimportlist:%(Identity)')" />
      <IlcArg Include="@(_TrimmerFeatureSettings->'--feature:%(Identity)=%(Value)')" />
      <IlcArg Include="@(RuntimeHostConfigurationOption->'--runtimeknob:%(Identity)=%(Value)')" />
      <IlcArg Include="--runtimeknob:RUNTIME_IDENTIFIER=$(RuntimeIdentifier)" />
      <IlcArg Condition="$(ServerGarbageCollection) == 'true'" Include="--runtimeopt:gcServer=1" />
      <IlcArg Condition="$(IlcGenerateCompleteTypeMetadata) == 'true'" Include="--completetypemetadata" />
      <IlcArg Condition="$(StackTraceSupport) != 'false'" Include="--stacktracedata" />
      <IlcArg Condition="$(IlcScanReflection) != 'false' and $(IlcDisableReflection) != 'true'" Include="--scanreflection" />
      <IlcArg Condition="$(IlcFoldIdenticalMethodBodies) == 'true'" Include="--methodbodyfolding" />
      <IlcArg Condition="$(Optimize) == 'true' and $(OptimizationPreference) == 'Size'" Include="--Os" />
      <IlcArg Condition="$(Optimize) == 'true' and $(OptimizationPreference) == 'Speed'" Include="--Ot" />
      <IlcArg Condition="'$(_linuxLibcFlavor)' == 'bionic'" Include="--noinlinetls" />
      <IlcArg Condition="$(IlcInstructionSet) != ''" Include="--instruction-set:$(IlcInstructionSet)" />
      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--reflectiondata:none" />
      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--feature:System.Collections.Generic.DefaultComparers=false" />
      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--feature:System.Reflection=false" />
      <IlcArg Condition="$(IlcMaxVectorTBitWidth) != ''" Include="--max-vectort-bitwidth:$(IlcMaxVectorTBitWidth)" />
      <IlcArg Condition="$(IlcSingleThreaded) == 'true'" Include="--parallelism:1" />
      <IlcArg Condition="$(IlcSystemModule) != ''" Include="--systemmodule:$(IlcSystemModule)" />
      <IlcArg Condition="'$(_targetOS)' == 'win' and $(IlcMultiModule) != 'true' and '$(IlcGenerateWin32Resources)' != 'false'" Include="--win32resourcemodule:%(ManagedBinary.Filename)" />
      <IlcArg Condition="$(IlcDumpIL) == 'true'" Include="--ildump:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).il" />
      <IlcArg Condition="$(NoWarn) != ''" Include='--nowarn:"$([MSBuild]::Escape($(NoWarn)).Replace(`%0A`, ``).Replace(`%0D`, ``))"' />
      <IlcArg Condition="$(TrimmerSingleWarn) == 'true'" Include="--singlewarn" />
      <IlcArg Condition="$(SuppressTrimAnalysisWarnings) == 'true'" Include="--notrimwarn" />
      <IlcArg Condition="$(SuppressAotAnalysisWarnings) == 'true'" Include="--noaotwarn" />
      <IlcArg Condition="$(IlcVerboseLogging) == 'true'" Include="--verbose" />
      <IlcArg Condition="$(IlcTrimMetadata) == 'false'" Include="--reflectiondata:all" />
      <IlcArg Condition="'$(ControlFlowGuard)' == 'Guard' and '$(_targetOS)' == 'win'" Include="--guard:cf" />
      <IlcArg Include="@(_IlcRootedAssemblies->'--root:%(Identity)')" />
      <IlcArg Include="@(_IlcConditionallyRootedAssemblies->'--conditionalroot:%(Identity)')" />
      <IlcArg Include="@(_IlcTrimmedAssemblies->'--trim:%(Identity)')" />
      <IlcArg Include="@(_IlcNoSingleWarnAssemblies->'--nosinglewarnassembly:%(Filename)')" />
      <IlcArg Condition="'$(TrimmerDefaultAction)' == 'copyused' or '$(TrimmerDefaultAction)' == 'copy' or '$(TrimMode)' == 'partial'" Include="--defaultrooting" />
      <IlcArg Include="--resilient" />
      <IlcArg Include="@(UnmanagedEntryPointsAssembly->'--generateunmanagedentrypoints:%(Identity)')" />

      <IlcArg Include="--codegenopt:LlvmExceptionHandlingModel=$(IlcLlvmExceptionHandlingModel)" />
      <IlcArg Condition="'$(IlcLlvmTarget)' != ''" Include="--codegenopt:Target=$(IlcLlvmTarget)" />
      <IlcArg Condition="'$(IlcMaxLlvmModuleCount)' != ''" Include="--codegenopt:MaxLlvmModuleCount=$(IlcMaxLlvmModuleCount)" />

      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--feature:System.Reflection.IsReflectionExecutionAvailable=false" />

      <!-- The managed debugging support in libraries is unused - trim it -->
      <IlcArg Condition="'$(IlcKeepManagedDebuggerSupport)' != 'true'" Include="--feature:System.Diagnostics.Debugger.IsSupported=false" />
      <IlcArg Condition="'$(UseWindowsThreadPool)' != '' and '$(_targetOS)' == 'win'" Include="--feature:System.Threading.ThreadPool.UseWindowsThreadPool=$(UseWindowsThreadPool)" />
    </ItemGroup>

    <MakeDir Directories="$(NativeIntermediateOutputPath)" />
    <WriteLinesToFile File="%(ManagedBinary.IlcRspFile)" Lines="@(IlcArg)" Overwrite="true" WriteOnlyWhenDifferent="true" />
  </Target>

  <Target Name="IlcCompile"
      Inputs="@(IlcCompileInput);@(IlcReference);@(IlcSatelliteAssembly);@(RdXmlFile);%(ManagedBinary.IlcRspFile)"
      Outputs="%(ManagedBinary.IlcOutputFile)"
      DependsOnTargets="WriteIlcRspFileForCompilation;$(IlcCompileDependsOn)">
    <Message Text="Generating native code" Importance="high" />

    <PropertyGroup>
      <_IlcEnvironmentVariables Condition="'$(IlcUseServerGc)' == 'false'">DOTNET_gcServer=0;$(_IlcEnvironmentVariables)</_IlcEnvironmentVariables>
    </PropertyGroup>

    <Exec Command="&quot;$(IlcToolsPath)\ilc&quot; @&quot;$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).ilc.rsp&quot;"
          EnvironmentVariables="$(_IlcEnvironmentVariables)" />

    <!-- Trick ILLinker into not actually running -->
    <MakeDir Condition="$([MSBuild]::VersionLessThan('$(NETCoreSdkVersion)', '7.0.0'))" Directories="$(IntermediateLinkDir)" />
    <Touch Condition="$([MSBuild]::VersionLessThan('$(NETCoreSdkVersion)', '7.0.0'))" Files="$(_LinkSemaphore)" AlwaysCreate="true" />
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Windows.targets" Condition="'$(_targetOS)' == 'win'" />
  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Unix.targets" Condition="'$(_targetOS)' != 'win' and '$(_targetOS)' != 'browser' and '$(_targetOS)' != 'wasi'" />
  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Wasm.props" Condition="'$(_targetArchitecture)' == 'wasm'" />

  <Target Name="MultiFileCopyNative"
      Inputs="@(NativeObjects)"
      Outputs="$(NativeOutputPath)"
      DependsOnTargets="GetNativeObjects">

      <Copy SourceFiles="@(NativeObjects)" DestinationFolder="$(NativeOutputPath)" />
  </Target>

  <Target Name="InitializeTheListOfLlvmObjects"
      AfterTargets="IlcCompile"
      BeforeTargets="CompileWasmObjects;LinkNativeLlvm">
    <ReadLinesFromFile File="$(NativeIntermediateOutputPath)$(TargetName).results.txt">
      <Output TaskParameter="Lines" ItemName="LlvmObjects" />
    </ReadLinesFromFile>

    <ItemGroup>
      <LlvmObjects>
        <NativeObject>%(RelativeDir)%(Filename)$(NativeObjectExt)</NativeObject>
      </LlvmObjects>
      <NativeObjects Include="@(LlvmObjects->'%(NativeObject)')" />
    </ItemGroup>
  </Target>

  <Target Name="CheckWasmSdks">
    <Error Text="Emscripten not found, not compiling to WebAssembly. To enable WebAssembly compilation, install Emscripten and ensure the EMSDK environment variable points to the directory containing upstream/emscripten/emcc.bat"
           Condition="'$(EMSDK)' == ''" />
    <Error Text="Wasi SDK not found, not compiling to WebAssembly. To enable WebAssembly compilation, install Wasi SDK and ensure the WASI_SDK_PATH environment variable points to the directory containing share/wasi-sysroot"
           Condition="'$(WASI_SDK_PATH)' == '' and '$(_targetOS)' == 'wasi'" />
  </Target>

  <Target Name="CompileWasmObjects"
      Inputs="@(LlvmObjects)"
      Outputs="@(LlvmObjects->'%(NativeObject)')"
      DependsOnTargets="IlcCompile;CheckWasmSdks"
      Condition="'$(NativeCodeGen)' == 'llvm'">

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeBinary)))" />

    <PropertyGroup Condition="'$(_targetOS)' == 'browser'">
      <CompileWasmArgs>-c</CompileWasmArgs>
      <CompileWasmArgs Condition="'$(IlcLlvmExceptionHandlingModel)' == 'cpp'">$(CompileWasmArgs) -s DISABLE_EXCEPTION_CATCHING=0</CompileWasmArgs>
      <CompileWasmArgs Condition="'$(IlcLlvmExceptionHandlingModel)' == 'wasm'">$(CompileWasmArgs) -fwasm-exceptions</CompileWasmArgs>
      <CompileWasmArgs Condition="'$(NativeDebugSymbols)' == 'true'">$(CompileWasmArgs) -g3</CompileWasmArgs>
      <!-- TODO-LLVM: remove -s USE_SDL=0 when we update to Emscripten with https://github.com/emscripten-core/emscripten/pull/18443 -->
      <CompileWasmArgs>$(CompileWasmArgs) -s USE_SDL=0 $(WasmOptimizationSetting)</CompileWasmArgs>

      <ScriptExt Condition="'$(OS)' == 'Windows_NT'">.bat</ScriptExt>
      <WasmCompilerPath>&quot;$(EMSDK)/upstream/emscripten/emcc$(ScriptExt)&quot;</WasmCompilerPath>
      <WasmLinkerPath>$(WasmCompilerPath)</WasmLinkerPath>
    </PropertyGroup>

   <PropertyGroup Condition="'$(_targetOS)' == 'wasi'">
      <CompileWasmArgs>-fvisibility=default -mllvm -combiner-global-alias-analysis=false -mllvm -disable-lsr --sysroot=&quot;$(WASI_SDK_PATH)/share/wasi-sysroot&quot; -target $(IlcLlvmTarget) -c</CompileWasmArgs>
      <CompileWasmArgs>$(CompileWasmArgs) $(WasmOptimizationSetting)</CompileWasmArgs>
      <CompileWasmArgs Condition="'$(NativeDebugSymbols)' == 'true'">$(CompileWasmArgs) -g3</CompileWasmArgs>

      <ExeExt Condition="'$(OS)' == 'Windows_NT'">.exe</ExeExt>
      <!-- using Emscripten's clang++ because of a crash in wasi-sdk's clang++ (https://github.com/WebAssembly/wasi-sdk/issues/326) -->
      <WasmCompilerPath>&quot;$(EMSDK)/upstream/bin/clang++$(ExeExt)&quot;</WasmCompilerPath>
      <WasmLinkerPath>&quot;$(WASI_SDK_PATH)/bin/clang&quot;</WasmLinkerPath>
    </PropertyGroup>

    <!-- We use a wrapper project to invoke the compilers in parallel. -->
    <ItemGroup>
      <ExecProjects Include="$(MSBuildThisFileDirectory)ExecWrapper.proj">
        <AdditionalProperties>
          ExecCommand=$(WasmCompilerPath) &quot;%(LlvmObjects.Identity)&quot; -o &quot;%(LlvmObjects.NativeObject)&quot; $(CompileWasmArgs);
          ExecWorkingDirectory=$(MSBuildProjectDirectory)
        </AdditionalProperties>
      </ExecProjects>
    </ItemGroup>

    <MSBuild Projects="@(ExecProjects)" BuildInParallel="true" />
  </Target>

  <Target Name="LinkNativeSingle" Condition="'$(_targetOS)' != 'browser' and '$(_targetOS)' != 'wasi'"
      Inputs="$(NativeObject);@(NativeLibrary)"
      Outputs="$(NativeBinary)"
      DependsOnTargets="$(LinkNativeDependsOn)">

    <ItemGroup>
      <CustomLinkerArg Include="&quot;$(NativeObject)&quot;" />
      <CustomLinkerArg Include="-o &quot;$(NativeBinary)&quot;" Condition="'$(_targetOS)' != 'win'" />
      <CustomLinkerArg Include="/OUT:&quot;$(NativeBinary)&quot;" Condition="'$(_targetOS)' == 'win'" />
      <CustomLinkerArg Include="/DEF:&quot;$(ExportsFile)&quot;" Condition="'$(_targetOS)' == 'win' and $(ExportsFile) != ''" />
      <CustomLinkerArg Include="/EXPORT:DotNetRuntimeDebugHeader,DATA" Condition="'$(_targetOS)' == 'win' and '$(DebuggerSupport)' != 'false'" />
      <CustomLinkerArg Include="/LIBPATH:&quot;%(AdditionalNativeLibraryDirectories.Identity)&quot;" Condition="'$(_targetOS)' == 'win' and '@(AdditionalNativeLibraryDirectories->Count())' &gt; 0" />
      <CustomLinkerArg Include="-exported_symbols_list &quot;$(ExportsFile)&quot;" Condition="'$(_IsApplePlatform)' == 'true' and '$(ExportsFile)' != ''" />
      <CustomLinkerArg Include="-exported_symbols_list /dev/null" Condition="'$(OutputType)' == 'exe' and '$(_IsApplePlatform)' == 'true' and '$(ExportsFile)' == ''" />
      <CustomLinkerArg Include="-Wl,--version-script=$(ExportsFile)" Condition="'$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true' and $(ExportsFile) != ''" />
      <CustomLinkerArg Include="-Wl,--export-dynamic" Condition="'$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true' and '$(IlcExportUnmanagedEntrypoints)' == 'true' and '$(NativeLib)' == ''" />
      <CustomLinkerArg Include="@(LinkerArg)" />
    </ItemGroup>
    <ItemGroup Condition="'$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true'">
      <CustomLinkerArg Include="-Wl,--discard-all" />
      <CustomLinkerArg Include="-Wl,--gc-sections" Condition="'$(LinkerFlavor)' == '' or '$(LinkerFlavor)' == 'bfd' or '$(LinkerFlavor)' == 'lld'" />
      <CustomLinkerArg Include="-Wl,-T,&quot;$(NativeIntermediateOutputPath)sections.ld&quot;" Condition="'$(LinkerFlavor)' == 'lld' and '$(_LinkerVersion)' &gt; '12'" />
    </ItemGroup>
    <ItemGroup>
      <CustomLibArg Include="-crs &quot;$(NativeBinary)&quot;" Condition="'$(_targetOS)' != 'win'" />
      <CustomLibArg Include="/OUT:&quot;$(NativeBinary)&quot;" Condition="'$(_targetOS)' == 'win'" />
      <CustomLibArg Include="&quot;$(NativeObject)&quot;" />
    </ItemGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeBinary)))" />

    <!-- https://github.com/dotnet/runtimelab/issues/956 - we IgnoreStandardErrorWarningFormat on macOS because there's a lot of warnings -->
    <PropertyGroup>
      <_IgnoreLinkerWarnings>false</_IgnoreLinkerWarnings>
      <_IgnoreLinkerWarnings Condition="'$(_IsApplePlatform)' == 'true'">true</_IgnoreLinkerWarnings>
      <_StripFlag Condition="'$(_IsApplePlatform)' == 'true' and '$(IlcExportUnmanagedEntrypoints)' == 'true'">-x</_StripFlag> <!-- keep only global symbols -->
    </PropertyGroup>

    <!-- write linker script for lld (13+) to retain the __modules section -->
    <WriteLinesToFile File="$(NativeIntermediateOutputPath)sections.ld" Lines="OVERWRITE_SECTIONS { __modules : { KEEP(*(__modules)) } }" Overwrite="true" Condition="'$(LinkerFlavor)' == 'lld' and '$(_LinkerVersion)' &gt; '12'" />

    <Exec Command="&quot;$(CppLinker)&quot; @(CustomLinkerArg, ' ')" Condition="'$(_targetOS)' != 'win' and '$(NativeLib)' != 'Static'" IgnoreStandardErrorWarningFormat="$(_IgnoreLinkerWarnings)" />
    <Exec Command="&quot;$(CppLibCreator)&quot; @(CustomLibArg, ' ')" Condition="'$(_targetOS)' != 'win' and '$(NativeLib)' == 'Static'" />

    <WriteLinesToFile File="$(NativeIntermediateOutputPath)link.rsp" Lines="@(CustomLinkerArg)" Overwrite="true" Encoding="utf-8" Condition="'$(_targetOS)' == 'win' and '$(NativeLib)' != 'Static'" />
    <Exec Command="&quot;$(CppLinker)&quot; @&quot;$(NativeIntermediateOutputPath)link.rsp&quot;" Condition="'$(_targetOS)' == 'win' and '$(NativeLib)' != 'Static'" />
    <WriteLinesToFile File="$(NativeIntermediateOutputPath)lib.rsp" Lines="@(CustomLibArg)" Overwrite="true" Encoding="utf-8" Condition="'$(_targetOS)' == 'win' and '$(NativeLib)' == 'Static'" />
    <Exec Command="&quot;$(CppLibCreator)&quot; @&quot;$(NativeIntermediateOutputPath)lib.rsp&quot;" Condition="'$(_targetOS)' == 'win' and '$(NativeLib)' == 'Static'" />

    <!-- remove executable flag -->
    <Exec Command="chmod 644 &quot;$(NativeBinary)&quot;" Condition="'$(NativeLib)' == 'Shared' and !$([MSBuild]::IsOSPlatform('Windows'))" />

    <!-- strip symbols, see https://github.com/dotnet/runtime/blob/5d3288d/eng/native/functions.cmake#L374 -->
    <Exec Condition="'$(StripSymbols)' == 'true' and '$(NativeDebugSymbols)' == 'true' and '$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true'"
      Command="&quot;$(ObjCopyName)&quot; --only-keep-debug &quot;$(NativeBinary)&quot; &quot;$(NativeBinary)$(NativeSymbolExt)&quot;" />
    <Exec Condition="'$(StripSymbols)' == 'true' and '$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true'"
      Command="&quot;$(ObjCopyName)&quot; --strip-debug --strip-unneeded &quot;$(NativeBinary)&quot;" />
    <Exec Condition="'$(StripSymbols)' == 'true' and '$(NativeDebugSymbols)' == 'true' and '$(_targetOS)' != 'win' and '$(_IsApplePlatform)' != 'true'"
      Command="&quot;$(ObjCopyName)&quot; --add-gnu-debuglink=&quot;$(NativeBinary)$(NativeSymbolExt)&quot; &quot;$(NativeBinary)&quot;" />

    <Exec Condition="'$(StripSymbols)' == 'true' and '$(_IsApplePlatform)' == 'true' and '$(NativeLib)' != 'Static'"
      Command="
        dsymutil $(DsymUtilOptions) &quot;$(NativeBinary)&quot; &amp;&amp;
        strip -no_code_signature_warning $(_StripFlag) &quot;$(NativeBinary)&quot;" />
  </Target>

  <!-- NativeAOT-LLVM: separate target to reduce conflicts -->
  <Target Name="LinkNativeLlvm"
      Inputs="@(NativeObjects);@(NativeLibrary)"
      Outputs="$(NativeBinary)"
      DependsOnTargets="$(LinkNativeDependsOn)">

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeBinary)))" />

    <ItemGroup>
      <NativeLibrary Include="$(IlcFrameworkNativePath)libSystem.Native.a" />
      <NativeLibrary Include="$(IlcFrameworkNativePath)libSystem.Globalization.Native.a" />
      <NativeLibrary Condition="$(NativeLib) == '' and '$(CustomNativeMain)' != 'true'" Include="$(IlcSdkPath)libbootstrapper.o" />
      <NativeLibrary Condition="$(NativeLib) != '' or '$(CustomNativeMain)' == 'true'" Include="$(IlcSdkPath)libbootstrapperdll.o" />
      <NativeLibrary Include="$(IlcSdkPath)libPortableRuntime.a" />
      <NativeLibrary Include="$(IlcSdkPath)libstandalonegc-disabled$(LibFileExt)" />
      <NativeLibrary Condition="'$(IlcLlvmExceptionHandlingModel)' == 'cpp'" Include="$(IlcSdkPath)libCppExceptionHandling.a" />
      <NativeLibrary Condition="'$(IlcLlvmExceptionHandlingModel)' == 'wasm'" Include="$(IlcSdkPath)libWasmExceptionHandling.a" />
      <NativeLibrary Condition="'$(IlcLlvmExceptionHandlingModel)' == 'emulated'" Include="$(IlcSdkPath)libEmulatedExceptionHandling.a" />

      <!-- wasi-sdk clang wants forward slashes, emscripten doesn't care -->
      <CustomLinkerArg Include="@(NativeLibrary->'&quot;%(Identity)&quot;'->Replace(&quot;\&quot;, &quot;/&quot;))" />
      <CustomLinkerArg Include="@(NativeObjects->'&quot;%(Identity)&quot;'->Replace(&quot;\&quot;, &quot;/&quot;))" />
      <CustomLinkerArg Include="-o &quot;$(NativeBinary.Replace(&quot;\&quot;, &quot;/&quot;))&quot;" Condition="'$(DotNetJsApi)' != 'true'" />
      <CustomLinkerArg Condition="'$(NativeDebugSymbols)' == 'true'" Include="-g3" />
      <CustomLinkerArg Condition="'$(NativeDebugSymbols)' != 'true'" Include="-Wl,--strip-all" />
      <CustomLinkerArg Condition="'$(NativeDebugSymbols)' != 'true'" Include="-Wl,--compress-relocations" />
      <!-- see https://github.com/emscripten-core/emscripten/issues/16836 for the issue that means we have to force the linker to include these symbols before LTO -->
      <!--<CustomLinkerArg Condition="'$(Optimize)' != 'true'" Include="$(WasmOptimizationSetting) -flto" /> -->
      <CustomLinkerArg Condition="'$(IlcLlvmTarget)' != ''" Include="-target $(IlcLlvmTarget)" />
      <CustomLinkerArg Condition="'$(IlcLlvmExceptionHandlingModel)' == 'wasm'" Include="-fwasm-exceptions" />
    </ItemGroup>

    <ItemGroup Condition = "'$(_targetOS)' == 'browser'" >
      <CustomLinkerArg Include="--js-library &quot;$(IlcFrameworkNativePath)pal_random.lib.js&quot;" />
      <CustomLinkerArg Condition="'$(WasmHtmlTemplate)' != ''" Include="--shell-file &quot;$(WasmHtmlTemplate)&quot;" />
      <CustomLinkerArg Condition="'$(ExportsFile)' != ''" Include="-s EXPORTED_FUNCTIONS=@&quot;$(ExportsFile)&quot;" />
      <CustomLinkerArg Include="-s ALLOW_MEMORY_GROWTH=1" />
      <CustomLinkerArg Include="-s ERROR_ON_UNDEFINED_SYMBOLS=0" />
      <CustomLinkerArg Include="-s GLOBAL_BASE=$(IlcWasmGlobalBase)" />
      <CustomLinkerArg Include="-s TOTAL_STACK=$(IlcWasmStackSize)" />
      <CustomLinkerArg Condition="'$(WasmEnableJSBigIntIntegration)' == 'true'" Include="-s WASM_BIGINT=1" />
      <CustomLinkerArg Condition="'$(IlcLlvmExceptionHandlingModel)' == 'cpp'" Include="-s DISABLE_EXCEPTION_CATCHING=0" />
    </ItemGroup>
    <PropertyGroup Condition = "'$(_targetOS)' == 'browser' and '$(DotNetJsApi)' == 'true'" >
      <EmccExtraArgs>$(EmccExtraArgs) "@$(_EmccDefaultFlagsRsp)" $(_EmccDefaultFlags) "@$(_EmccDefaultLinkFlagsRsp)" "@$(_EmccLinkRsp)"</EmccExtraArgs>
    </PropertyGroup>

    <!-- wasm-ld only supports listing exports on the command line -->
    <ReadLinesFromFile File="$(ExportsFile)" Condition="'$(_targetOS)' == 'wasi' and '$(ExportsFile)' != ''">
      <Output TaskParameter="Lines" ItemName="CustomLinkerArgExport" />
    </ReadLinesFromFile>

    <ItemGroup Condition ="'$(_targetOS)' == 'wasi'" >
      <CustomLinkerArg Include="--sysroot=&quot;$(WASI_SDK_PATH.Replace(&quot;\&quot;, &quot;/&quot;))/share/wasi-sysroot&quot;" />
      <CustomLinkerArg Include="@(CustomLinkerArgExport->'-Wl,--export=%(Identity)')" />
      <!-- Wasi has lots of undefined symbols currently, mostly globalization -->
      <CustomLinkerArg Include="-Wl,--unresolved-symbols=ignore-all -Wl,--error-limit=0" />
      <CustomLinkerArg Include="-lstdc++ -lwasi-emulated-process-clocks -lwasi-emulated-signal -lwasi-emulated-getpid" />
      <CustomLinkerArg Include="-Wl,--max-memory=2147483648" />
      <CustomLinkerArg Include="-Wl,--global-base=$(IlcWasmGlobalBase)" />
      <CustomLinkerArg Include="-Wl,-z,stack-size=$(IlcWasmStackSize)" />
      <CustomLinkerArg Include="-mexec-model=reactor" Condition="'$(NativeLib)' == 'Shared'" />
    </ItemGroup>

    <ItemGroup>
      <CustomLinkerArg Include="@(LinkerArg)" />
    </ItemGroup>

    <WriteLinesToFile File="$(NativeIntermediateOutputPath)link.rsp" Lines="@(CustomLinkerArg)" Overwrite="true" Encoding="utf-8" />
    <!-- <Exec Command='emcc "@$(_EmccDefaultFlagsRsp)" $(_EmccDefaultFlags) "@$(_EmccDefaultLinkFlagsRsp)" "@$(_EmccLinkRsp)"' EnvironmentVariables="@(EmscriptenEnvVars)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_EmccLinkStepConsoleOutput" />
      <Output TaskParameter="ExitCode" PropertyName="_EmccLinkStepExitCode" />
    </Exec> -->
    <Exec Command="$(WasmLinkerPath) @$(NativeIntermediateOutputPath)link.rsp $(EmccExtraArgs)" EnvironmentVariables="@(EmscriptenEnvVars)" />
  </Target>

  <Target Name="PrepareWasmRuntimeEmccFlags" DependsOnTargets="_ReadEmccProps">
    <PropertyGroup>
      <_WasmIntermediateOutputPath Condition="'$(WasmBuildingForNestedPublish)' == ''">$([MSBuild]::NormalizeDirectory($(IntermediateOutputPath), 'wasm'))</_WasmIntermediateOutputPath>
      <_EmccDefaultFlagsRsp>$([MSBuild]::NormalizePath($(IlcFrameworkNativePath), 'src', 'emcc-default.rsp'))</_EmccDefaultFlagsRsp>
      <_EmccDefaultLinkFlagsRsp>$([MSBuild]::NormalizePath($(IlcFrameworkNativePath), 'src', 'emcc-link.rsp'))</_EmccDefaultLinkFlagsRsp>
      <_EmccLinkRsp>$(_WasmIntermediateOutputPath)emcc-link.rsp</_EmccLinkRsp>
    </PropertyGroup>
    <PropertyGroup>
      <_EmccExportedLibraryFunction>&quot;[@(EmccExportedLibraryFunction -> '%27%(Identity)%27', ',')]&quot;</_EmccExportedLibraryFunction>
      <_EmccExportedRuntimeMethods>&quot;[@(EmccExportedRuntimeMethod -> '%27%(Identity)%27', ',')]&quot;</_EmccExportedRuntimeMethods>
      <_EmccExportedFunctions>@(EmccExportedFunction -> '%(Identity)',',')</_EmccExportedFunctions>
      <_EmccDefaultFlags Condition="'$(WasmEnableSIMD)' == 'true'">-msimd128</_EmccDefaultFlags>
      <EmccStackSize Condition="'$(EmccStackSize)' == ''">5MB</EmccStackSize>
      <EmccInitialHeapSize Condition="'$(EmccInitialHeapSize)' == '' and '$(_WasmCalculatedInitialHeapSize)' != '' and $(_WasmCalculatedInitialHeapSize) > 16777216">$(_WasmCalculatedInitialHeapSize)</EmccInitialHeapSize>
      <EmccInitialHeapSize Condition="'$(EmccInitialHeapSize)' == ''">16777216</EmccInitialHeapSize>
    </PropertyGroup>
    <ItemGroup>
      <!-- <EmscriptenEnvVars Include="EMSDK_PYTHON=$(EmscriptenPythonToolsPath)python.exe" Condition="'$(OS)' == 'Windows_NT'" />
      <EmscriptenEnvVars Include="PYTHONPATH=$(EmscriptenPythonToolsPath)" Condition="'$(OS)' == 'Windows_NT'" />
      <EmscriptenEnvVars Include="PYTHONHOME=" Condition="'$(OS)' == 'Windows_NT'" />
      <EmscriptenEnvVars Include="EM_CACHE=$(WasmCachePath)" Condition="'$(WasmCachePath)' != ''" />
      <EmscriptenEnvVars Include="EM_FROZEN_CACHE=True" /> -->
      <EmscriptenEnvVars Include="DISABLE_LEGACY_JS_INTEROP=1" Condition="'$(WasmEnableLegacyJsInterop)' == 'false'" />
      <EmscriptenEnvVars Include="DISABLE_LEGACY_JS_INTEROP=0" Condition="'$(WasmEnableLegacyJsInterop)' != 'false'" />
      <EmscriptenEnvVars Include="WASM_ENABLE_SIMD=1" Condition="'$(WasmEnableSIMD)' != 'false'" />
      <EmscriptenEnvVars Include="WASM_ENABLE_SIMD=0" Condition="'$(WasmEnableSIMD)' == 'false'" />
      <EmscriptenEnvVars Include="WASM_ENABLE_EH=1" Condition="'$(WasmEnableExceptionHandling)' != 'false'" />
      <EmscriptenEnvVars Include="WASM_ENABLE_EH=0" Condition="'$(WasmEnableExceptionHandling)' == 'false'" />
      <EmscriptenEnvVars Include="ENABLE_AOT_PROFILER=$([System.Convert]::ToInt32($(WasmProfilers.Contains('aot'))))" />
      <EmscriptenEnvVars Include="ENABLE_BROWSER_PROFILER=$([System.Convert]::ToInt32($(WasmProfilers.Contains('browser'))))" />
      <EmscriptenEnvVars Include="RUN_AOT_COMPILATION=1" Condition="'$(RunAOTCompilation)' == 'true'" />
      <EmscriptenEnvVars Include="RUN_AOT_COMPILATION=0" Condition="'$(RunAOTCompilation)' != 'true'" />
      <!-- <_EmccCommonFlags Include="$(_DefaultEmccFlags)" />
      <_EmccCommonFlags Include="$(EmccFlags)" />
      <_EmccCommonFlags Include="-g"                                       Condition="'$(WasmNativeDebugSymbols)' == 'true'" />
      <_EmccCommonFlags Include="-v"                                       Condition="'$(EmccVerbose)' != 'false'" />
      <_EmccCommonFlags Include="-s DISABLE_EXCEPTION_CATCHING=0"          Condition="'$(WasmEnableExceptionHandling)' == 'false'" />
      <_EmccCommonFlags Include="-fwasm-exceptions"                        Condition="'$(WasmEnableExceptionHandling)' == 'true'" />
      <_EmccCommonFlags Include="-s MAXIMUM_MEMORY=$(EmccMaximumHeapSize)" Condition="'$(EmccMaximumHeapSize)' != ''" /> -->
      <_EmccLDFlags Include="-s EXPORT_ES6=1" />
      <_EmccLDFlags Include="-s INVOKE_RUN=0" />
      <_EmccLinkStepArgs Include="@(_EmccLDFlags)" />
      <!-- <_EmccLDFlags Include="$(EmccLinkOptimizationFlag)" />
      <_EmccLDFlags Include="@(_EmccCommonFlags)" />
      <_EmccLDSFlags Include="-s INITIAL_MEMORY=$(EmccInitialHeapSize)" />
      <_EmccLDSFlags Include="-s STACK_SIZE=$(EmccStackSize)" />
      <_EmccLDSFlags Include="-s WASM_BIGINT=1" />
      <_EmccLDSFlags Condition="'$(EmccEnvironment)' != ''" Include="-s ENVIRONMENT=&quot;$(EmccEnvironment)&quot;" />
      <_EmccLDSFlags Condition="'$(EmccEnableAssertions)' == 'true'" Include="-s ASSERTIONS=1" />
      <_EmccLinkStepArgs Include="@(_EmccLDSFlags)" /> -->
      <_EmccLinkStepArgs Include="--emit-symbol-map" Condition="'$(WasmEmitSymbolMap)' == 'true'" />
      <JSFileType Include="extpre.js"  Kind="extern-pre-js" />
      <JSFileType Include="iffe.js"    Kind="extern-pre-js" />
      <JSFileType Include="pre.js"     Kind="pre-js" />
      <JSFileType Include="lib.js"     Kind="js-library" />
      <JSFileType Include="post.js"    Kind="post-js" />
      <JSFileType Include="extpost.js" Kind="extern-post-js" />
      <_WasmExtraJSFile Include="$(IlcFrameworkNativePath)src\*.%(JSFileType.Identity)"     Kind="%(JSFileType.Kind)" />
      <_WasmExtraJSFile Include="$(IlcFrameworkNativePath)src\es6\*.%(JSFileType.Identity)" Kind="%(JSFileType.Kind)" />
      <_EmccLinkStepArgs Include="--%(_WasmExtraJSFile.Kind) &quot;%(_WasmExtraJSFile.Identity)&quot;" Condition="'%(_WasmExtraJSFile.Kind)' != ''" />
      <_EmccLinkStepArgs Include="-o &quot;$(_WasmIntermediateOutputPath)dotnet.native.js&quot;" />
      <_EmccLinkStepArgs Include="-s DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=$(_EmccExportedLibraryFunction)" Condition="'$(_EmccExportedLibraryFunction)' != ''" />
      <_EmccLinkStepArgs Include="-s EXPORTED_RUNTIME_METHODS=$(_EmccExportedRuntimeMethods)" />
      <_EmccLinkStepArgs Include="-s EXPORTED_FUNCTIONS=$(_EmccExportedFunctions)" />
      <_EmccLinkStepArgs Include="$(EmccExtraLDFlags)" />
    </ItemGroup>
    <WriteLinesToFile Lines="@(_EmccLinkStepArgs)" File="$(_EmccLinkRsp)" Overwrite="true" WriteOnlyWhenDifferent="true" />
  </Target>
  <Target Name="_ReadEmccProps" Condition="'$(_IsEMSDKMissing)' != 'true'">
    <!-- <ReadEmccProps JsonFilePath="$(IlcFrameworkNativePath)src\emcc-props.json">
      <Output TaskParameter="EmccProperties" ItemName="_EmccPropItems" />
      <Output TaskParameter="WasmOptConfigurationFlags" ItemName="_WasmOptConfigurationFlagsItems" />
      <Output TaskParameter="EmccDefaultExportedFunctions" ItemName="EmccExportedFunction" />
      <Output TaskParameter="EmccDefaultExportedRuntimeMethods" ItemName="EmccExportedRuntimeMethod" />
    </ReadEmccProps>

    <CreateProperty Value="%(_EmccPropItems.Value)">
      <Output TaskParameter="Value" PropertyName="%(_EmccPropItems.Identity)" />
    </CreateProperty>

    <CreateProperty Value="%(_WasmOptConfigurationFlagsItems.Value)">
      <Output TaskParameter="Value" PropertyName="%(_WasmOptConfigurationFlagsItems.Identity)" />
    </CreateProperty> -->
    <ItemGroup>
      <EmccExportedFunction Include="_free" />
      <EmccExportedFunction Include="_htons" />
      <EmccExportedFunction Include="_malloc" />
      <EmccExportedFunction Include="_memalign" />
      <EmccExportedFunction Include="_memset" />
      <EmccExportedFunction Include="_ntohs" />
      <EmccExportedFunction Include="stackAlloc" />
      <EmccExportedFunction Include="stackRestore" />
      <EmccExportedFunction Include="stackSave" />
      <EmccExportedFunction Include="_fmod" />
      <EmccExportedFunction Include="_atan2" />
      <EmccExportedFunction Include="_fma" />
      <EmccExportedFunction Include="_pow" />
      <EmccExportedFunction Include="_fmodf" />
      <EmccExportedFunction Include="_atan2f" />
      <EmccExportedFunction Include="_fmaf" />
      <EmccExportedFunction Include="_powf" />
      <EmccExportedFunction Include="_asin" />
      <EmccExportedFunction Include="_asinh" />
      <EmccExportedFunction Include="_acos" />
      <EmccExportedFunction Include="_acosh" />
      <EmccExportedFunction Include="_atan" />
      <EmccExportedFunction Include="_atanh" />
      <EmccExportedFunction Include="_cbrt" />
      <EmccExportedFunction Include="_cos" />
      <EmccExportedFunction Include="_cosh" />
      <EmccExportedFunction Include="_exp" />
      <EmccExportedFunction Include="_log" />
      <EmccExportedFunction Include="_log2" />
      <EmccExportedFunction Include="_log10" />
      <EmccExportedFunction Include="_sin" />
      <EmccExportedFunction Include="_sinh" />
      <EmccExportedFunction Include="_tan" />
      <EmccExportedFunction Include="_tanh" />
      <EmccExportedFunction Include="_asinf" />
      <EmccExportedFunction Include="_asinhf" />
      <EmccExportedFunction Include="_acosf" />
      <EmccExportedFunction Include="_acoshf" />
      <EmccExportedFunction Include="_atanf" />
      <EmccExportedFunction Include="_atanhf" />
      <EmccExportedFunction Include="_cbrtf" />
      <EmccExportedFunction Include="_cosf" />
      <EmccExportedFunction Include="_coshf" />
      <EmccExportedFunction Include="_expf" />
      <EmccExportedFunction Include="_logf" />
      <EmccExportedFunction Include="_log2f" />
      <EmccExportedFunction Include="_log10f" />
      <EmccExportedFunction Include="_sinf" />
      <EmccExportedFunction Include="_sinhf" />
      <EmccExportedFunction Include="_tanf" />
      <EmccExportedFunction Include="_tanhf" />
      <EmccExportedRuntimeMethod Include="FS" />
      <EmccExportedRuntimeMethod Include="out" />
      <EmccExportedRuntimeMethod Include="err" />
      <EmccExportedRuntimeMethod Include="ccall" />
      <EmccExportedRuntimeMethod Include="cwrap" />
      <EmccExportedRuntimeMethod Include="setValue" />
      <EmccExportedRuntimeMethod Include="getValue" />
      <EmccExportedRuntimeMethod Include="addRunDependency" />
      <EmccExportedRuntimeMethod Include="addFunction" />
      <EmccExportedRuntimeMethod Include="UTF8ToString" />
      <EmccExportedRuntimeMethod Include="UTF8ArrayToString" />
      <EmccExportedRuntimeMethod Include="stringToUTF8Array" />
      <EmccExportedRuntimeMethod Include="FS_createPath" />
      <EmccExportedRuntimeMethod Include="FS_createDataFile" />
      <EmccExportedRuntimeMethod Include="removeRunDependency" />
      <EmccExportedRuntimeMethod Include="safeSetTimeout" />
      <EmccExportedRuntimeMethod Include="runtimeKeepalivePush" />
      <EmccExportedRuntimeMethod Include="runtimeKeepalivePop" />
      <EmccExportedRuntimeMethod Include="callMain" />
    </ItemGroup>
  </Target>





  <Target Name="LinkNative"
      DependsOnTargets="$(LinkNativeDependsOnSingleOrLlvm)">
  </Target>

  <Target Name="CreateLib"
    DependsOnTargets="$(CreateLibDependsOn);$(IlcDynamicBuildPropertyDependencies);SetupOSSpecificProps"
    Inputs="@(LibInputs)"
    Outputs="$(SharedLibrary)" >

    <ItemGroup>
      <CustomLibArg Include="/out:$(SharedLibrary)" Condition="'$(_targetOS)' == 'win'" />
      <CustomLibArg Include="-crs $(SharedLibrary)" Condition="'$(_targetOS)' != 'win'" />
      <CustomLibArg Include="@(LibInputs->'%(Identity)')" />
    </ItemGroup>
    <MakeDir Directories="$(NativeIntermediateOutputPath)" />
    <WriteLinesToFile File="$(NativeIntermediateOutputPath)lib.rsp" Lines="@(CustomLibArg)" Overwrite="true" Encoding="utf-8" Condition="'$(_targetOS)' == 'win'" />
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(SharedLibrary)))" />
    <Exec Command="&quot;$(CppLibCreator)&quot; @&quot;$(NativeIntermediateOutputPath)lib.rsp&quot;" Condition="'$(_targetOS)' == 'win'" />
    <Exec Command="&quot;$(CppLibCreator)&quot; @(CustomLibArg, ' ')" Condition="'$(_targetOS)' != 'win'" />
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Publish.targets" Condition="'$(NativeCompilationDuringPublish)' != 'false'" />


  <UsingTask TaskName="ReadEmccProps" AssemblyFile="$(IlcBuildTasksPath)"
             TaskFactory="JsonToItemsTaskFactory.JsonToItemsTaskFactory">
    <ParameterGroup>
      <EmccProperties ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" Output="true" />
      <WasmOptConfigurationFlags ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" Output="true" />
      <EmccDefaultExportedFunctions ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" Output="true" />
      <EmccDefaultExportedRuntimeMethods ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" Output="true" />
    </ParameterGroup>
  </UsingTask>
</Project>
