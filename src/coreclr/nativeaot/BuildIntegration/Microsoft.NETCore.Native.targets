<!--
***********************************************************************************************
Microsoft.NETCore.Native.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the build process for native AOT compilation.

Licensed to the .NET Foundation under one or more agreements.
The .NET Foundation licenses this file to you under the MIT license.
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="'$(TargetArchitecture)' == 'wasm'">
    <NativeCodeGen>llvm</NativeCodeGen>
  </PropertyGroup>

  <!-- Set defaults for unspecified properties -->
  <PropertyGroup>
    <NativeIntermediateOutputPath Condition="'$(NativeIntermediateOutputPath)' == ''">$(IntermediateOutputPath)native\</NativeIntermediateOutputPath>
    <NativeOutputPath Condition="'$(NativeOutputPath)' == ''">$(OutputPath)native\</NativeOutputPath>
    <NativeCompilationDuringPublish Condition="'$(NativeCompilationDuringPublish)' == ''">true</NativeCompilationDuringPublish>
    <IlcBuildTasksPath Condition="'$(IlcBuildTasksPath)' == ''">$(MSBuildThisFileDirectory)..\tools\netstandard\ILCompiler.Build.Tasks.dll</IlcBuildTasksPath>
    <IlcToolsPath Condition="'$(IlcPath)' != '' and '$(IlcToolsPath)' == ''">$(IlcPath)\tools\</IlcToolsPath>
    <IlcSdkPath Condition="'$(IlcPath)' != '' and '$(IlcSdkPath)' == ''">$(IlcPath)\sdk\</IlcSdkPath>
    <IlcFrameworkPath Condition="'$(IlcPath)' != '' and '$(IlcFrameworkPath)' == ''">$(IlcPath)\framework\</IlcFrameworkPath>
    <IlcMibcPath Condition="'$(IlcPath)' != '' and '$(IlcMibcPath)' == ''">$(IlcPath)\mibc\</IlcMibcPath>
    <TargetOS Condition="'$(TargetOS)' == '' and '$(TargetArchitecture)' == 'wasm'">Browser</TargetOS>
    <TargetOS Condition="'$(TargetOS)' == '' and '$([MSBuild]::IsOSPlatform(Windows))' == 'true'">windows</TargetOS>
    <TargetOS Condition="'$(TargetOS)' == '' and '$([MSBuild]::IsOSPlatform(OSX))' == 'true'">OSX</TargetOS>
    <TargetOS Condition="'$(TargetOS)' == ''">$(OS)</TargetOS>
    <NativeDebugSymbols Condition="$(DebugSymbols) == 'true' or ($(DebugType) != 'none' and $(DebugType) != '')">true</NativeDebugSymbols>
    <!-- Workaround for https://github.com/dotnet/runtimelab/issues/771 -->
    <ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
    <PublishTrimmed Condition="'$(PublishTrimmed)' == ''">true</PublishTrimmed>
  </PropertyGroup>

  <!-- Set up the defaults for the compatibility mode -->
  <PropertyGroup>
    <_BuildingInCompatibleMode Condition="$(TrimmerDefaultAction) == '' and $(IlcGenerateStackTraceData) == '' and $(IlcDisableReflection) == ''">true</_BuildingInCompatibleMode>

    <IlcGenerateStackTraceData Condition="$(IlcGenerateStackTraceData) == ''">true</IlcGenerateStackTraceData>
    <IlcScanReflection Condition="$(IlcScanReflection) == ''">true</IlcScanReflection>
    <SuppressTrimAnalysisWarnings Condition="$(SuppressTrimAnalysisWarnings) == ''">true</SuppressTrimAnalysisWarnings>
    <TrimmerDefaultAction Condition="$([MSBuild]::VersionLessThan('$(NETCoreSdkVersion)', '6.0.0'))">copyused</TrimmerDefaultAction>
  </PropertyGroup>

  <!-- Set up default feature switches -->
  <PropertyGroup>
    <EnableUnsafeBinaryFormatterSerialization Condition="'$(EnableUnsafeBinaryFormatterSerialization)' == ''">false</EnableUnsafeBinaryFormatterSerialization>
    <UseSystemResourceKeys Condition="$(IlcDisableReflection) == 'true'">true</UseSystemResourceKeys>
    <EventSourceSupport Condition="$(IlcDisableReflection) == 'true'">false</EventSourceSupport>
  </PropertyGroup>

  <PropertyGroup>
    <NativeObjectExt Condition="'$(TargetOS)' == 'windows'">.obj</NativeObjectExt>
    <NativeObjectExt Condition="'$(TargetOS)' != 'windows'">.o</NativeObjectExt>
    <LlvmObjectExt Condition="'$(NativeCodeGen)' == 'llvm'">.bc</LlvmObjectExt>

    <LibFileExt Condition="'$(TargetOS)' == 'windows'">.lib</LibFileExt>
    <LibFileExt Condition="'$(TargetOS)' != 'windows'">.a</LibFileExt>

    <IlcOutputFileExt Condition="$(IlcOutputFileExt) == ''">$(NativeObjectExt)</IlcOutputFileExt>
    <IlcOutputFileExt Condition="'$(NativeCodeGen)' == 'llvm'">$(LlvmObjectExt)</IlcOutputFileExt>

    <IsNativeExecutable Condition="'$(OutputType)' == 'Exe' or '$(OutputType)' == 'WinExe'">true</IsNativeExecutable>

    <NativeBinaryExt Condition="'$(IsNativeExecutable)' == 'true' and '$(TargetOS)' == 'windows'">.exe</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' == 'true' and '$(TargetOS)' != 'windows'"></NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(TargetOS)' == 'windows' and $(NativeLib) == 'Shared'">.dll</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(TargetOS)' == 'OSX' and $(NativeLib) == 'Shared'">.dylib</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(TargetOS)' != 'windows' and '$(TargetOS)' != 'OSX' and $(NativeLib) == 'Shared'">.so</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(TargetOS)' == 'windows' and $(NativeLib) == 'Static'">.lib</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(IsNativeExecutable)' != 'true' and '$(TargetOS)' != 'windows' and $(NativeLib) == 'Static'">.a</NativeBinaryExt>
    <NativeBinaryExt Condition="'$(TargetOS)' == 'browser'">.html</NativeBinaryExt>

    <ExportsFileExt Condition="'$(TargetOS)' == 'windows'">.def</ExportsFileExt>
    <ExportsFileExt Condition="'$(TargetOS)' != 'windows'">.exports</ExportsFileExt>

    <LlvmObject Condition="'$(NativeCodeGen)' == 'llvm'">$(NativeIntermediateOutputPath)$(TargetName)$(LlvmObjectExt)</LlvmObject>
    <!-- TODO: remove this when all code is generated by the clrjit -->
    <LlvmClrjitObject Condition="'$(NativeCodeGen)' == 'llvm'">$(NativeIntermediateOutputPath)$(TargetName)clrjit$(LlvmObjectExt)</LlvmClrjitObject>

    <NativeObject>$(NativeIntermediateOutputPath)$(TargetName)$(NativeObjectExt)</NativeObject>
    <NativeClrjitObject>$(NativeIntermediateOutputPath)$(TargetName)clrjit$(NativeObjectExt)</NativeClrjitObject>
    <NativeBinary>$(NativeOutputPath)$(TargetName)$(NativeBinaryExt)</NativeBinary>
    <ExportsFile Condition="$(NativeLib) == 'Shared' and $(ExportsFile) == ''">$(NativeIntermediateOutputPath)$(TargetName)$(ExportsFileExt)</ExportsFile>

    <IlcCompileOutput>$(NativeObject)</IlcCompileOutput>

    <LinkNativeDependsOn>IlcCompile</LinkNativeDependsOn>
    <LinkNativeDependsOn Condition="$(NativeCodeGen) == 'llvm'">WasmObject</LinkNativeDependsOn>

    <LinkNativeDependsOnSingleOrLlvm>LinkNativeSingle</LinkNativeDependsOnSingleOrLlvm>
    <LinkNativeDependsOnSingleOrLlvm Condition="$(NativeCodeGen) == 'llvm'">LinkNativeLlvm</LinkNativeDependsOnSingleOrLlvm>

    <FrameworkLibPath Condition="'$(FrameworkLibPath)' == ''">$(NativeOutputPath)</FrameworkLibPath>
    <FrameworkObjPath Condition="'$(FrameworkObjPath)' == ''">$(NativeIntermediateOutputPath)</FrameworkObjPath>

    <SharedLibrary Condition="'$(TargetOS)' == 'windows'">$(FrameworkLibPath)\Framework$(LibFileExt)</SharedLibrary>
    <SharedLibrary Condition="'$(TargetOS)' != 'windows'">$(FrameworkLibPath)\libframework$(LibFileExt)</SharedLibrary>
    <IlcDynamicBuildPropertyDependencies Condition="'$(IlcCalledViaPackage)' == 'true'">SetupProperties</IlcDynamicBuildPropertyDependencies>
    <IlcDisableUnhandledExceptionExperience Condition="$(NativeCodeGen) == 'llvm'">true</IlcDisableUnhandledExceptionExperience>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IlcCompileDependsOn)'=='' and '$(NativeCompilationDuringPublish)' != 'false'">
    <IlcCompileDependsOn Condition="'$(BuildingFrameworkLibrary)' != 'true'">Compile;ComputeIlcCompileInputs</IlcCompileDependsOn>
    <IlcCompileDependsOn Condition="'$(IlcMultiModule)' == 'true' and '$(BuildingFrameworkLibrary)' != 'true'">$(IlcCompileDependsOn);BuildFrameworkLib</IlcCompileDependsOn>
    <IlcCompileDependsOn>$(IlcCompileDependsOn);SetupOSSpecificProps</IlcCompileDependsOn>
    <IlcCompileDependsOn>$(IlcCompileDependsOn);PrepareForILLink</IlcCompileDependsOn>
  </PropertyGroup>

  <ItemGroup Condition="$(IlcSystemModule) == ''">
    <AutoInitializedAssemblies Include="System.Private.CoreLib" />
    <AutoInitializedAssemblies Include="System.Private.StackTraceMetadata" Condition="$(IlcDisableReflection) != 'true' or $(IlcGenerateStackTraceData) == 'true'" />
    <AutoInitializedAssemblies Include="System.Private.TypeLoader" />
    <AutoInitializedAssemblies Include="System.Private.Reflection.Execution" Condition="$(IlcDisableReflection) != 'true'" />
    <AutoInitializedAssemblies Include="System.Private.DisabledReflection" Condition="$(IlcDisableReflection) == 'true'" />
    <AutoInitializedAssemblies Include="System.Private.Interop" />
  </ItemGroup>

  <ItemGroup>
    <_ExcludedPrivateSdkAssemblies Include="$(IlcSdkPath)System.Private.Reflection.Core.dll" Condition="$(IlcDisableReflection) == 'true'" />
    <PrivateSdkAssemblies Include="$(IlcSdkPath)*.dll" Exclude="@(_ExcludedPrivateSdkAssemblies)"/>

    <!-- Exclude unmanaged dlls -->
    <FrameworkAssemblies Include="$(IlcFrameworkPath)*.dll" Exclude="$(IlcFrameworkPath)*.Native.dll;$(IlcFrameworkPath)msquic.dll" />

    <MibcFile Include="$(IlcMibcPath)*.mibc" Condition="'$(IlcPgoOptimize)' == 'true'" />

    <DefaultFrameworkAssemblies Include="@(FrameworkAssemblies)" />
    <DefaultFrameworkAssemblies Include="@(PrivateSdkAssemblies)" />
  </ItemGroup>

  <Target Name="_ComputeManagedAssemblyForILLink"
          AfterTargets="_ComputeManagedAssemblyToLink"
          Condition="'$(NativeCompilationDuringPublish)' == 'true'">
    <ItemGroup>
      <ManagedAssemblyToLink Remove="@(ManagedAssemblyToLink)" />
      <ManagedAssemblyToLink Include="@(DefaultFrameworkAssemblies);@(_ManagedResolvedAssembliesToPublish);@(ManagedBinary)" />
    </ItemGroup>
    <ItemGroup Condition="$([MSBuild]::VersionLessThan('$(TargetFrameworkVersion)', '6.0'))">
      <ManagedAssemblyToLink Remove="@(ManagedAssemblyToLink)" />
      <ManagedAssemblyToLink Include="@(DefaultFrameworkAssemblies)">
        <IsTrimmable>true</IsTrimmable>
      </ManagedAssemblyToLink>
      <ManagedAssemblyToLink Include="@(_ManagedResolvedAssembliesToPublish);@(ManagedBinary)" />
    </ItemGroup>
  </Target>

  <!-- The properties below need to be defined only after we've found the correct runtime package reference -->
  <Target Name="SetupProperties" DependsOnTargets="$(IlcSetupPropertiesDependsOn)" BeforeTargets="Publish">
    <PropertyGroup>
      <!-- Define paths used in build targets to point to the runtime-specific ILCompiler implementation -->
      <IlcToolsPath Condition="'$(IlcToolsPath)' == ''">$(IlcHostPackagePath)\tools\</IlcToolsPath>
      <IlcSdkPath Condition="'$(IlcSdkPath)' == ''">$(RuntimePackagePath)\sdk\</IlcSdkPath>
      <IlcFrameworkPath Condition="'$(IlcFrameworkPath)' == ''">$(RuntimePackagePath)\framework\</IlcFrameworkPath>
      <IlcMibcPath Condition="'$(IlcMibcPath)' == ''">$(RuntimePackagePath)\mibc\</IlcMibcPath>
    </PropertyGroup>

    <!-- If running from a package these values need to be set again with the resolved IlcXYZPath -->
    <ItemGroup>
      <_ExcludedPrivateSdkAssemblies Include="$(IlcSdkPath)System.Private.Reflection.Core.dll" Condition="$(IlcDisableReflection) == 'true'" />
      <PrivateSdkAssemblies Include="$(IlcSdkPath)*.dll" Exclude="@(_ExcludedPrivateSdkAssemblies)"/>

      <!-- Exclude unmanaged dlls -->
      <FrameworkAssemblies Include="$(IlcFrameworkPath)*.dll" Exclude="$(IlcFrameworkPath)*.Native.dll;$(IlcFrameworkPath)msquic.dll" />

      <MibcFile Include="$(IlcMibcPath)*.mibc" Condition="'$(IlcPgoOptimize)' == 'true'" />

      <DefaultFrameworkAssemblies Include="@(FrameworkAssemblies)" />
      <DefaultFrameworkAssemblies Include="@(PrivateSdkAssemblies)" />
    </ItemGroup>
  </Target>

  <Target Name="ComputeIlcCompileInputs" DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)" BeforeTargets="Publish">
    <ItemGroup>
      <ManagedBinary Condition="$(BuildingFrameworkLibrary) != 'true'" Include="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" />
      <IlcCompileInput Include="@(ManagedBinary)" />
      <IlcReference Include="@(DefaultFrameworkAssemblies)" />
    </ItemGroup>
  </Target>

  <!--
    BuildFrameworkLib is invoked before IlcCompile in multi-module builds to
    produce the shared framework library on demand
  -->
  <Target Name="BuildFrameworkLib" Condition="'$(DisableFrameworkLibGeneration)' != 'true'" DependsOnTargets="$(IlcDynamicBuildPropertyDependencies)">
    <ItemGroup>
     <!-- This builds the project with the ILC implementation in the identified runtime package to avoid resolving it again  -->
      <ProjectToBuild Include="$(MSBuildThisFileDirectory)BuildFrameworkNativeObjects.proj">
        <AdditionalProperties>
          IntermediateOutputPath=$(IntermediateOutputPath);
          FrameworkLibPath=$(FrameworkLibPath);
          FrameworkObjPath=$(FrameworkObjPath);
          RuntimePackagePath=$(RuntimePackagePath);
          IlcHostPackagePath=$(IlcHostPackagePath);
          TargetArchitecture=$(TargetArchitecture);
        </AdditionalProperties>
      </ProjectToBuild>
    </ItemGroup>
    <MSBuild Projects="@(ProjectToBuild)" BuildInParallel="true" />
  </Target>

  <!-- NativeAOT-LLVM note: 'BeforeTargets="_RunILLink"' should be deleted once https://github.com/dotnet/runtime/pull/63914 is merged from upstream -->
  <Target Name="IlcCompile"
      Inputs="@(IlcCompileInput);@(RdXmlFile)"
      Outputs="$(NativeIntermediateOutputPath)%(ManagedBinary.Filename)$(IlcOutputFileExt)"
      BeforeTargets="_RunILLink"
      DependsOnTargets="$(IlcCompileDependsOn)">

    <!-- Set up default properties that have their defaults in the 6.0 SDK (Can be dropped once we drop 5.0 support) -->
    <PropertyGroup Condition="$([MSBuild]::VersionLessThan('$(NETCoreSdkVersion)', '6.0.0'))">
      <TrimmerSingleWarn Condition="'$(TrimmerSingleWarn)' == ''">true</TrimmerSingleWarn>
    </PropertyGroup>

    <!-- Set up single warn trimming like in the 6.0 SDK (Can be dropped once we drop 5.0 support) -->
    <ItemGroup Condition="$([MSBuild]::VersionLessThan('$(NETCoreSdkVersion)', '6.0.0'))">
      <!-- Don't collapse to a single warning for the intermediate assembly.
           This just sets metadata on the items in ManagedAssemblyToLink that came from IntermediateAssembly. -->
      <!-- Find ManagedAssemblyToLink _except_ IntermediateAssembly -->
      <__SingleWarnIntermediateAssembly Include="@(ManagedAssemblyToLink)" />
      <__SingleWarnIntermediateAssembly Remove="@(IntermediateAssembly)" />
      <!-- Subtract these from ManagedAssemblyToLink, to get the intersection. -->
      <_SingleWarnIntermediateAssembly Include="@(ManagedAssemblyToLink)" />
      <_SingleWarnIntermediateAssembly Remove="@(__SingleWarnIntermediateAssembly)" />
      <!-- Set metadata on the intersection. -->
      <_SingleWarnIntermediateAssembly>
        <TrimmerSingleWarn Condition=" '%(_SingleWarnIntermediateAssembly.TrimmerSingleWarn)' == '' ">false</TrimmerSingleWarn>
      </_SingleWarnIntermediateAssembly>
      <!-- Replace these items in ManagedAssemblyToLink. -->
      <ManagedAssemblyToLink Remove="@(_SingleWarnIntermediateAssembly)" />
      <ManagedAssemblyToLink Include="@(_SingleWarnIntermediateAssembly)" />

      <!-- Don't collapse to a single warning for project references -->
      <ManagedAssemblyToLink Condition=" '%(ManagedAssemblyToLink.ProjectReferenceOriginalItemSpec)' != '' ">
        <TrimmerSingleWarn Condition=" '%(ManagedAssemblyToLink.TrimmerSingleWarn)' == '' ">false</TrimmerSingleWarn>
      </ManagedAssemblyToLink>
    </ItemGroup>

    <ItemGroup>
      <_IlcRootedAssemblies Include="@(TrimmerRootAssembly)" />
      <_IlcRootedAssemblies Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimMode) == 'copy'" />
      <_IlcConditionallyRootedAssemblies Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimMode) == 'copyused'" />
      <_IlcTrimmedAssemblies Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimMode) == 'link'" />
      <_IlcNoSingleWarnAssemblies Include="@(ManagedAssemblyToLink)" Condition="%(ManagedAssemblyToLink.TrimmerSingleWarn) == 'false'" />
    </ItemGroup>

    <ItemGroup>
      <IlcArg Include="@(IlcCompileInput)" />
      <IlcArg Include="-o:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename)$(IlcOutputFileExt)" />
      <IlcArg Include="@(IlcReference->'-r:%(Identity)')" />
      <IlcArg Include="@(MibcFile->'--mibc:%(Identity)')" />
      <IlcArg Condition="$(IlcGenerateMetadataLog) == 'true'" Include="--metadatalog:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).metadata.csv" />
      <IlcArg Condition="$(TargetArchitecture) != ''" Include="--targetarch:$(TargetArchitecture)" />
      <IlcArg Condition="'$(TargetArchitecture)' == 'wasm'" Include="--targetos:wasm" />
      <IlcArg Condition="$(IlcMultiModule) == 'true'" Include="--multifile" />
      <IlcArg Condition="$(Optimize) == 'true'" Include="-O" />
      <IlcArg Condition="$(NativeDebugSymbols) == 'true'" Include="-g" />
      <IlcArg Condition="$(IlcGenerateMapFile) == 'true'" Include="--map:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).map.xml" />
      <IlcArg Condition="$(IlcGenerateDgmlFile) == 'true'" Include="--dgmllog:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).codegen.dgml.xml" />
      <IlcArg Condition="$(IlcGenerateDgmlFile) == 'true'" Include="--scandgmllog:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).scan.dgml.xml" />
      <IlcArg Include="@(RdXmlFile->'--rdxml:%(Identity)')" />
      <IlcArg Condition="$(NativeLib) != ''" Include="--nativelib" />
      <IlcArg Condition="$(ExportsFile) != ''" Include="--exportsfile:$(ExportsFile)" />
      <IlcArg Include="@(AutoInitializedAssemblies->'--initassembly:%(Identity)')" />
      <IlcArg Include="@(RuntimeHostConfigurationOption->'--appcontextswitch:%(Identity)=%(Value)')" />
      <IlcArg Include="@(DirectPInvoke->'--directpinvoke:%(Identity)')" />
      <IlcArg Include="@(DirectPInvokeList->'--directpinvokelist:%(Identity)')" />
      <IlcArg Include="@(WasmImport->'--wasmimport:%(Identity)')" />
      <IlcArg Include="@(WasmImportList->'--wasmimportlist:%(Identity)')" />
      <IlcArg Include="@(_TrimmerFeatureSettings->'--feature:%(Identity)=%(Value)')" />
      <IlcArg Condition="$(ServerGarbageCollection) == 'true'" Include="--runtimeopt:gcServer=1" />
      <IlcArg Condition="$(IlcGenerateCompleteTypeMetadata) == 'true' and $(IlcDisableReflection) != 'true'" Include="--completetypemetadata" />
      <IlcArg Condition="$(IlcGenerateStackTraceData) == 'true'" Include="--stacktracedata" />
      <IlcArg Condition="$(IlcScanReflection) == 'true' and $(IlcDisableReflection) != 'true'" Include="--scanreflection" />
      <IlcArg Condition="$(IlcFoldIdenticalMethodBodies) == 'true'" Include="--methodbodyfolding" />
      <IlcArg Condition="$(Optimize) == 'true' and $(IlcOptimizationPreference) == 'Size'" Include="--Os" />
      <IlcArg Condition="$(Optimize) == 'true' and $(IlcOptimizationPreference) == 'Speed'" Include="--Ot" />
      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--disablereflection" />
      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--feature:System.Collections.Generic.DefaultComparers=false" />
      <IlcArg Condition="$(IlcSingleThreaded) == 'true'" Include="--singlethreaded" />
      <IlcArg Condition="$(IlcSystemModule) != ''" Include="--systemmodule:$(IlcSystemModule)" />
      <IlcArg Condition="$(IlcDumpIL) == 'true'" Include="--ildump:$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).il" />
      <IlcArg Condition="$(NoWarn) != ''" Include='--nowarn:"$([MSBuild]::Escape($(NoWarn)))"' />
      <IlcArg Condition="$(TrimmerSingleWarn) == 'true'" Include="--singlewarn" />
      <IlcArg Condition="$(IlcTrimMetadata) == 'true'" Include="--reflectedonly" />
      <IlcArg Condition="'$(ControlFlowGuard)' == 'Guard' and '$(TargetOS)' == 'windows'" Include="--guard:cf" />
      <IlcArg Include="@(_IlcRootedAssemblies->'--root:%(Identity)')" />
      <IlcArg Include="@(_IlcConditionallyRootedAssemblies->'--conditionalroot:%(Identity)')" />
      <IlcArg Include="@(_IlcTrimmedAssemblies->'--trim:%(Identity)')" />
      <IlcArg Include="@(_IlcNoSingleWarnAssemblies->'--nosinglewarnassembly:%(Filename)')" />
      <IlcArg Condition="'$(TrimmerDefaultAction)' == 'copyused' or '$(TrimmerDefaultAction)' == 'copy'" Include="--defaultrooting" />

      <IlcArg Condition="$(IlcDisableReflection) == 'true'" Include="--feature:System.Reflection.IsReflectionExecutionAvailable=false" />

      <!-- Configure LINQ expressions - disable Emit everywhere -->
      <IlcArg Include="--feature:System.Linq.Expressions.CanCompileToIL=false" />
      <IlcArg Include="--feature:System.Linq.Expressions.CanEmitObjectArrayDelegate=false" />
      <IlcArg Include="--feature:System.Linq.Expressions.CanCreateArbitraryDelegates=false" />

      <!-- 6.0 SDK introduces a way to control this through the CustomResourceTypesSupport property, defaulting to false when trimming -->
      <IlcArg Condition="$([MSBuild]::VersionLessThan('$(NETCoreSdkVersion)', '6.0.0')) and $(CustomResourceTypesSupport) != 'true'" Include="--feature:System.Resources.ResourceManager.AllowCustomResourceTypes=false" />
    </ItemGroup>

    <MakeDir Directories="$(NativeIntermediateOutputPath)" />
    <WriteLinesToFile File="$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).ilc.rsp" Lines="@(IlcArg)" Overwrite="true" />

    <Message Text="Generating native code" Condition="$(_BuildingInCompatibleMode) != 'true'" Importance="high" />
    <Message Text="Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT" Condition="$(_BuildingInCompatibleMode) == 'true'" Importance="high" />

    <Exec Command="&quot;$(IlcToolsPath)\ilc&quot; @&quot;$(NativeIntermediateOutputPath)%(ManagedBinary.Filename).ilc.rsp&quot;" />

    <!-- Trick ILLinker into not actually running -->
    <MakeDir Directories="$(IntermediateLinkDir)" />
    <Touch Files="$(_LinkSemaphore)" AlwaysCreate="true" />
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Windows.props" Condition="'$(TargetOS)' == 'windows'" />
  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Unix.props" Condition="'$(TargetOS)' != 'windows' and '$(TargetOS)' != 'browser'" />
  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Browser.props" Condition="'$(TargetOS)' == 'browser'" />

  <Target Name="MultiFileCopyNative"
      Inputs="@(NativeObjects)"
      Outputs="$(NativeOutputPath)"
      DependsOnTargets="GetNativeObjects">

      <Copy SourceFiles="@(NativeObjects)" DestinationFolder="$(NativeOutputPath)" />
  </Target>

  <PropertyGroup>
    <_Win32ResFile>$(NativeIntermediateOutputPath)$(TargetName).res</_Win32ResFile>
  </PropertyGroup>

  <UsingTask TaskName="DumpNativeResources" AssemblyFile="$(IlcBuildTasksPath)" />
  <Target Name="GenerateResFile"
      Inputs="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"
      Outputs="$(_Win32ResFile)"
      Condition="'$(TargetOS)' == 'windows'">

    <DumpNativeResources
        MainAssembly="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"
        ResourceFile="$(_Win32ResFile)" />

  </Target>

  <Target Name="WasmObject"
      Inputs="$(LlvmObject);$(LlvmClrjitObject)"
      Outputs="$(NativeObject);$(NativeClrjitObject)"
      DependsOnTargets="IlcCompile;GenerateResFile"
      Condition="'$(NativeCodeGen)' == 'llvm'">

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeBinary)))" />

    <PropertyGroup>
      <EmccArgs>&quot;$(LlvmObject)&quot; -c -o &quot;$(NativeObject)&quot; -s DISABLE_EXCEPTION_CATCHING=0</EmccArgs>
      <EmccArgs Condition="'$(NativeDebugSymbols)' != 'true'">$(EmccArgs) -O2</EmccArgs>
      <EmccArgs Condition="'$(NativeDebugSymbols)' == 'true'">$(EmccArgs) -g3</EmccArgs>
    </PropertyGroup>
    
    <Exec Command="&quot;$(EMSDK)/upstream/emscripten/emcc.bat&quot; $(EmccArgs)" Condition="'$(EMSDK)' != '' and '$(OS)' == 'Windows_NT'" />
    <Exec Command="&quot;$(EMSDK)/upstream/emscripten/emcc&quot; $(EmccArgs)" Condition="'$(EMSDK)' != '' and '$(OS)' != 'Windows_NT'" />

   <!-- TODO: remove this second compilation when all code is generated by the clrjit -->
   <PropertyGroup>
      <EmccArgs>&quot;$(LlvmClrjitObject)&quot; -c -o &quot;$(NativeClrjitObject)&quot;  -s DISABLE_EXCEPTION_CATCHING=0</EmccArgs>
      <EmccArgs Condition="'$(NativeDebugSymbols)' != 'true'">$(EmccArgs) -O2</EmccArgs>
      <EmccArgs Condition="'$(NativeDebugSymbols)' == 'true'">$(EmccArgs) -g3</EmccArgs>
    </PropertyGroup>
    
    <Exec Command="&quot;$(EMSDK)/upstream/emscripten/emcc.bat&quot; $(EmccArgs)" Condition="'$(EMSDK)' != '' and '$(OS)' == 'Windows_NT'" />
    <Exec Command="&quot;$(EMSDK)/upstream/emscripten/emcc&quot; $(EmccArgs)" Condition="'$(EMSDK)' != '' and '$(OS)' != 'Windows_NT'" />

    <Message Text="Emscripten not found, not linking WebAssembly. To enable WebAssembly linking, install Emscripten and ensure the EMSDK environment variable points to the directory containing upstream/emscripten/emcc.bat"
             Condition="'$(EMSDK)' == ''" />
  </Target>
  <Target Name="LinkNativeSingle" Condition="'$(TargetOS)' != 'browser'"
      Inputs="$(NativeObject);@(NativeLibrary)"
      Outputs="$(NativeBinary)"
      DependsOnTargets="$(LinkNativeDependsOn);GenerateResFile">

    <ItemGroup>
      <CustomLinkerArg Include="&quot;$(NativeObject)&quot;" />
      <CustomLinkerArg Include="-o &quot;$(NativeBinary)&quot;" Condition="'$(TargetOS)' != 'windows'" />
      <CustomLinkerArg Include="/OUT:&quot;$(NativeBinary)&quot;" Condition="'$(TargetOS)' == 'windows'" />
      <CustomLinkerArg Include="/DEF:&quot;$(ExportsFile)&quot;" Condition="'$(TargetOS)' == 'windows' and $(ExportsFile) != ''" />
      <CustomLinkerArg Include="/LIBPATH:&quot;%(AdditionalNativeLibraryDirectories.Identity)&quot;" Condition="'$(TargetOS)' == 'windows' and '@(AdditionalNativeLibraryDirectories->Count())' &gt; 0" />
      <CustomLinkerArg Include="-exported_symbols_list &quot;$(ExportsFile)&quot;" Condition="'$(TargetOS)' == 'OSX' and $(ExportsFile) != ''" />
      <CustomLinkerArg Include="-Wl,--version-script=$(ExportsFile)" Condition="'$(TargetOS)' != 'windows' and '$(TargetOS)' != 'OSX' and $(ExportsFile) != ''" />
      <CustomLinkerArg Condition="Exists('$(_Win32ResFile)')" Include="&quot;$(_Win32ResFile)&quot;" />
      <CustomLinkerArg Include="@(LinkerArg)" />
    </ItemGroup>
    <ItemGroup Condition="'$(TargetOS)' != 'windows' and '$(TargetOS)' != 'OSX'">
      <CustomLinkerArg Include="-Wl,--discard-all" />
      <CustomLinkerArg Include="-Wl,--gc-sections" />
    </ItemGroup>
    <ItemGroup>
      <CustomLibArg Include="-crs &quot;$(NativeBinary)&quot;" Condition="'$(TargetOS)' != 'windows'" />
      <CustomLibArg Include="/OUT:&quot;$(NativeBinary)&quot;" Condition="'$(TargetOS)' == 'windows'" />
      <CustomLibArg Include="&quot;$(NativeObject)&quot;" />
    </ItemGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeBinary)))" />

    <!-- https://github.com/dotnet/runtimelab/issues/956 - we IgnoreStandardErrorWarningFormat on macOS because there's a lot of warnings -->
    <PropertyGroup>
      <_IgnoreLinkerWarnings>false</_IgnoreLinkerWarnings>
      <_IgnoreLinkerWarnings Condition="'$(TargetOS)' == 'OSX'">true</_IgnoreLinkerWarnings>
    </PropertyGroup>
    
    <Exec Command="$(CppLinker) @(CustomLinkerArg, ' ')" Condition="'$(TargetOS)' != 'windows' and '$(NativeLib)' != 'Static'" IgnoreStandardErrorWarningFormat="$(_IgnoreLinkerWarnings)" />
    <Exec Command="$(CppLibCreator) @(CustomLibArg, ' ')" Condition="'$(TargetOS)' != 'windows' and '$(NativeLib)' == 'Static'" />

    <WriteLinesToFile File="$(NativeIntermediateOutputPath)link.rsp" Lines="@(CustomLinkerArg)" Overwrite="true" Encoding="utf-8" Condition="'$(TargetOS)' == 'windows' and '$(NativeLib)' != 'Static'" />
    <Exec Command="$(CppLinker)  @&quot;$(NativeIntermediateOutputPath)link.rsp&quot;" Condition="'$(TargetOS)' == 'windows' and '$(NativeLib)' != 'Static'" />
    <WriteLinesToFile File="$(NativeIntermediateOutputPath)lib.rsp" Lines="@(CustomLibArg)" Overwrite="true" Encoding="utf-8" Condition="'$(TargetOS)' == 'windows' and '$(NativeLib)' == 'Static'" />
    <Exec Command="$(CppLibCreator)  @&quot;$(NativeIntermediateOutputPath)lib.rsp&quot;" Condition="'$(TargetOS)' == 'windows' and '$(NativeLib)' == 'Static'" />
  </Target>

  <!-- LLVM needs 2 inputs.  I can't see how to do that conditionally (on '$(TargetOS)' == 'browser' so just creating another target -->
  <Target Name="LinkNativeLlvm"
      Inputs="$(NativeObject);$(NativeClrjitObject);@(NativeLibrary)"
      Outputs="$(NativeBinary)"
      DependsOnTargets="$(LinkNativeDependsOn);GenerateResFile">

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(NativeBinary)))" />

    <PropertyGroup>
      <BootstrapperSuffix Condition="'$(NativeLib)' == 'Static'">dll</BootstrapperSuffix>
      <EmccArgs>&quot;$(NativeObject)&quot; &quot;$(NativeClrjitObject)&quot; -o &quot;$(NativeBinary)&quot; -s ALLOW_MEMORY_GROWTH=1 -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s DISABLE_EXCEPTION_CATCHING=0</EmccArgs>
      <EmccArgs Condition="'$(TargetArchitecture)' == 'wasm'">$(EmccArgs) &quot;$(IlcPath)/sdk/libPortableRuntime.a&quot; &quot;$(IlcPath)/sdk/libbootstrapper$(BootstrapperSuffix).a&quot; &quot;$(IlcPath)/framework/libSystem.Native.a&quot; &quot;$(IlcPath)/framework/libSystem.Globalization.Native.a&quot; $(EmccExtraArgs)</EmccArgs>
      <EmccArgs Condition="'$(NativeDebugSymbols)' != 'true'">$(EmccArgs) -O2 -flto</EmccArgs>
      <EmccArgs Condition="'$(NativeDebugSymbols)' == 'true'">$(EmccArgs) -g3</EmccArgs>
    </PropertyGroup>

    <Exec Command="&quot;$(EMSDK)/upstream/emscripten/emcc.bat&quot; $(EmccArgs)" Condition="'$(TargetOS)' == 'browser' and '$(EMSDK)' != '' and '$(OS)' == 'Windows_NT'" />
    <Exec Command="&quot;$(EMSDK)/upstream/emscripten/emcc&quot; $(EmccArgs)" Condition="'$(TargetOS)' == 'browser' and '$(EMSDK)' != '' and '$(OS)' != 'Windows_NT'" />
    <Message Text="Emscripten not found, not linking WebAssembly. To enable WebAssembly linking, install Emscripten and ensure the EMSDK environment variable points to the directory containing upstream/emscripten/emcc.bat"
             Condition="'$(NativeCodeGen)' == 'llvm' and '$(EMSDK)' == ''" Importance="High" />
  </Target>
  
  <Target Name="LinkNative"
      DependsOnTargets="$(LinkNativeDependsOnSingleOrLlvm)">
  </Target>

  <Target Name="CreateLib"
    Inputs="@(LibInputs)"
    Outputs="$(SharedLibrary)"
    DependsOnTargets="$(CreateLibDependsOn);$(IlcDynamicBuildPropertyDependencies);SetupOSSpecificProps"
    >

    <ItemGroup>
      <CustomLibArg Include="/out:$(SharedLibrary)" Condition="'$(TargetOS)' == 'windows'" />
      <CustomLibArg Include="-crs $(SharedLibrary)" Condition="'$(TargetOS)' != 'windows'" />
      <CustomLibArg Include="@(LibInputs->'%(Identity)')" />
    </ItemGroup>
    <MakeDir Directories="$(NativeIntermediateOutputPath)" />
    <WriteLinesToFile File="$(NativeIntermediateOutputPath)lib.rsp" Lines="@(CustomLibArg)" Overwrite="true" Encoding="utf-8" Condition="'$(TargetOS)' == 'windows'" />
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(SharedLibrary)))" />
    <Exec Command="$(CppLibCreator) @&quot;$(NativeIntermediateOutputPath)lib.rsp&quot;" Condition="'$(TargetOS)' == 'windows'" />
    <Exec Command="$(CppLibCreator) @(CustomLibArg, ' ')" Condition="'$(TargetOS)' != 'windows'" />
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Microsoft.NETCore.Native.Publish.targets" Condition="'$(NativeCompilationDuringPublish)' != 'false'" />

</Project>
